import{_ as n,o as a,c as p,O as e}from"./chunks/framework.ab95ac3d.js";const l="/learning-notes-blog/images/前端工程化_qsmain.png",s="/learning-notes-blog/images/前端工程化_path.png",o="/learning-notes-blog/images/前端工程化_vueclicmd.png",t="/learning-notes-blog/images/前端工程化_processagv.png",r="/learning-notes-blog/images/前端工程化_windowspaht.png",c="/learning-notes-blog/images/前端工程化_linuxpaht.png.png",i="/learning-notes-blog/images/前端工程化_npmpath.png",d="/learning-notes-blog/images/前端工程化_bin说明.png",B="/learning-notes-blog/images/前端工程化_脚本生成.png",_=JSON.parse('{"title":"","description":"关于 package.json 字段和使用说明","frontmatter":{"description":"关于 package.json 字段和使用说明","tags":["工程化","package.json"]},"headers":[],"relativePath":"C.前端工程化/2.packjson文件说明.md","filePath":"C.前端工程化/2.packjson文件说明.md","lastUpdated":1686206902000}'),u={name:"C.前端工程化/2.packjson文件说明.md"},b=e(`<p>在使用包管理工具对项目初始化的时候，会出现一个文件 <code>package.json</code>,能够帮我们列出项目所依赖的包，可以指定项目可以使用的包版本等等,这个json 文件中的一些字段对项目起到了解释作用</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>version</td><td>当前的版本</td></tr><tr><td>name</td><td>应用程序/软件包的名称</td></tr><tr><td>description</td><td>应用程序/软件包的简短描述</td></tr><tr><td>main</td><td>应用程序的入口点</td></tr><tr><td>private</td><td>如果设置为 true，则可以防止应用程序/软件包被意外地发布到 npm</td></tr><tr><td>scripts</td><td>一组可以运行的 node 脚本</td></tr><tr><td>dependencies</td><td>作为业务依赖安装的 npm 软件包的列表</td></tr><tr><td>devDependencies</td><td>作为开发依赖安装的 npm 软件包的列表</td></tr><tr><td>peerDependencies</td><td>作为同伴依赖安装的 npm 软件包的列表</td></tr><tr><td>bundledDependencies</td><td>打包时需要包含的依赖列表</td></tr><tr><td>optionalDependencies</td><td>可选依赖安装的 npm 软件包的列表</td></tr><tr><td>engines</td><td>此软件包/应用程序在哪个版本的 Node.js 上运行</td></tr><tr><td>browserslist</td><td>告知要支持哪些浏览器（及其版本）</td></tr><tr><td>author</td><td>作者相关信息（发布时用到）</td></tr><tr><td>license</td><td>开源协议（发布时用到）</td></tr><tr><td>repository</td><td>代码仓库的位置</td></tr><tr><td>keywords</td><td>一组关键字，用于描述软件包的内容</td></tr><tr><td>homepage</td><td>应用程序/软件包的主页</td></tr></tbody></table><h2 id="包管理工具的钩子" tabindex="-1">包管理工具的钩子 <a class="header-anchor" href="#包管理工具的钩子" aria-label="Permalink to &quot;包管理工具的钩子&quot;">​</a></h2><p>在包管理 也存在一些钩子函数 在不同时机可以用来触发 ，大多数包管理工具都可以使用的钩子</p><table><thead><tr><th>钩子名称</th><th>触发时机</th></tr></thead><tbody><tr><td><code>preinstall</code></td><td>在安装依赖之前运行，可以用于检查环境或者进行一些准备工作</td></tr><tr><td><code>postinstall</code></td><td>在安装依赖之后运行，可以用于执行一些额外的安装步骤或者进行一些配置</td></tr><tr><td><code>preuninstall</code></td><td>在卸载依赖之前运行，可以用于进行一些清理工作或者备份数据</td></tr><tr><td><code>postuninstall</code></td><td>在卸载依赖之后运行，可以用于执行一些额外的清理步骤或者进行一些配置</td></tr><tr><td><code>prepublish</code></td><td>在发布软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>prepare</code></td><td>在软件包安装或者更新时运行，可以用于进行一些构建或者配置</td></tr><tr><td><code>prepack</code></td><td>在打包软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>postpack</code></td><td>在打包软件包之后运行，可以用于执行一些额外的打包步骤或者进行一些配置</td></tr></tbody></table><p>举个最常见的配置使用钩子案例</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><details class="details custom-block"><summary>npm 的钩子这些钩子里面并不是所有的 包管理工具都支持</summary><table><thead><tr><th>钩子名称</th><th>触发时机</th></tr></thead><tbody><tr><td><code>preinstall</code></td><td>在安装依赖之前运行，可以用于检查环境或者进行一些准备工作</td></tr><tr><td><code>postinstall</code></td><td>在安装依赖之后运行，可以用于执行一些额外的安装步骤或者进行一些配置</td></tr><tr><td><code>preuninstall</code></td><td>在卸载依赖之前运行，可以用于进行一些清理工作或者备份数据</td></tr><tr><td><code>postuninstall</code></td><td>在卸载依赖之后运行，可以用于执行一些额外的清理步骤或者进行一些配置</td></tr><tr><td><code>prepublish</code></td><td>在发布软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>prepare</code></td><td>在软件包安装或者更新时运行，可以用于进行一些构建或者配置</td></tr><tr><td><code>prepack</code></td><td>在打包软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>postpack</code></td><td>在打包软件包之后运行，可以用于执行一些额外的打包步骤或者进行一些配置</td></tr><tr><td><code>prepublishOnly</code></td><td>在发布软件包之前运行，但只有在使用 <code>npm publish</code> 命令时才会触发</td></tr><tr><td><code>preversion</code></td><td>在更新软件包版本号之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>version</code></td><td>在更新软件包版本号之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>postversion</code></td><td>在更新软件包版本号之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>prestop</code></td><td>在停止软件包之前运行，可以用于进行一些清理工作或者备份数据</td></tr><tr><td><code>poststop</code></td><td>在停止软件包之后运行，可以用于执行一些额外的清理步骤或者进行一些配置</td></tr><tr><td><code>prestart</code></td><td>在启动软件包之前运行，可以用于进行一些检查或者配置</td></tr><tr><td><code>poststart</code></td><td>在启动软件包之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>prerestart</code></td><td>在重启软件包之前运行，可以用于进行一些检查或者配置</td></tr><tr><td><code>postrestart</code></td><td>在重启软件包之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>pretest</code></td><td>在运行测试之前运行，可以用于进行一些准备工作或者配置</td></tr><tr><td><code>posttest</code></td><td>在运行测试之后运行，可以用于执行一些额外的测试步骤或者进行一些配置</td></tr><tr><td><code>prepublishToProd</code></td><td>在发布软件包到生产环境之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>postpublish</code></td><td>在发布软件包之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr></tbody></table></details><h3 id="配合脚本本身的钩子" tabindex="-1">配合脚本本身的钩子 <a class="header-anchor" href="#配合脚本本身的钩子" aria-label="Permalink to &quot;配合脚本本身的钩子&quot;">​</a></h3><p>pre,post两类钩子，一个是执行前，一个是执行后。举个例子例如我想，给我在scripts 中定义的server 脚本增加钩子，分别在原有指令前增加了&#39;pre&#39; 和&#39;post&#39;前缀 , 下面案例中 在执行 例如 <code>npm run serve</code>命令时，会依次执行<code>npm run preserve</code>、<code>npm run serve</code>、<code>npm run postserve</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;preserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxx&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service serve&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;postserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxxx&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在不同的包管理工具中可以在 <code>p<wbr>rocess.env</code> 中去获取 这些运行钩子以 npm 为例子，我们创建一个项目，项目pack.json 脚本配置部分</p><p>p<wbr>rocess.env.npm_lifecycle_event是npm特有的环境变量，因此在yarn和pnpm中并不支持。不过，yarn和pnpm都提供了类似的环境变量来获取当前的脚本命令</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;preserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;echo 我是前置钩子&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node app.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;postserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node post.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 app.js 中内容</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">npm_lifecycle_event</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;preserve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the preserve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;serve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the serve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 post.js 中内容</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">npm_lifecycle_event</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;postserve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the postserve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;serve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the serve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>最后打印结果</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">&gt; preserve</span></span>
<span class="line"><span style="color:#abb2bf;">&gt; echo 我是前置钩子</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">我是前置钩子</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">&gt; serve</span></span>
<span class="line"><span style="color:#abb2bf;">&gt; node app.js</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">Running the serve task!</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">&gt; postserve</span></span>
<span class="line"><span style="color:#abb2bf;">&gt; node post.js</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">Running the postserve task!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="main-配置字段的说明" tabindex="-1">main 配置字段的说明 <a class="header-anchor" href="#main-配置字段的说明" aria-label="Permalink to &quot;main 配置字段的说明&quot;">​</a></h2><p>当我们开发一个npm包时，需要在package.json文件中指定main配置项，这个配置项的值是一个js文件的路径，它将作为程序的主入口文件，以qs包为例，当我们使用 <code>import qs from &#39;qs&#39;</code> 实际运行的是 lib/index.js 文件</p><p><img src="`+l+`" alt=""></p><p>如果没有配置main 字段整个包查询过程其实是这样的 举个例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./find.js&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./find&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>模块后缀省略，先找同名JS文件再找同名JS文件夹</li><li>找到了同名文件夹，找文件夹中的index.js</li><li>如果文件夹中没有index.js就会去当前文件夹中的package.json文件中查找main选项中的入口文件（具体路径也可以是指定到node_modules）所以找package.json也是一种情况</li><li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li></ol><p><strong>如果没有具体路径的包，此时会直接去去node_modules文件夹中 查找</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;find&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>首先看是否有该名字的JS文件</li><li>再看是否有该名字的文件夹</li><li>如果是文件夹看里面是否有index.js</li><li>如果没有index.js查看该文件夹中的package.json中的main选项确定模块入口文件否则找不到报错</li></ol><p>往往来说main 就已经足够了当然可以参看这个文章中其他配置 <a href="https://segmentfault.com/a/1190000019438150" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000019438150</a></p><h2 id="scripts-指令集合" tabindex="-1">scripts -- 指令集合 <a class="header-anchor" href="#scripts-指令集合" aria-label="Permalink to &quot;scripts -- 指令集合&quot;">​</a></h2><p>scripts属性用于配置一些脚本命令，以键值对的形式存在 ，配置后我们可以通过 npm run 命令的key来执行这个命令，对于常用的 start、 test、stop、restart可以省略掉run直接通过 npm start等方式运行</p><p>其实 npm run 指令全称是 <code>npm run-script &lt;command&gt; [--silent] [-- &lt;args&gt;...]</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service serve&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#FFFFFF;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>配置指令可以通过npm run 生效的，本质上执行的是&#39;Shell（一般是 Bash）可以运行的命令&#39;,shell是依赖于平台的。查看执行&#39;shell&#39; 脚本位置 使用指令&#39;npm config get shell&#39;,执行完后我的本机配置环境输出结果为&#39;C:\\Windows\\system32\\cmd.exe&#39;,就说明实际是&#39;window&#39;系统的&#39;cmd&#39;命令行工具。默认情况下, Unix-like 操作系统是&#39;/bin/sh&#39;指令, Windows 操作系统是&#39;cmd.exe&#39;。 实际的被&#39;/bin/sh&#39;引用的shell也依赖于平台。&#39;npm@5.1.0&#39;你可以使用&#39;script-shell&#39;自定义你的shell配置。</p><p>可以通过 <code>npm config set script-shell \\&quot;C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\\&quot; </code>去设置shell 平台</p><p>利用钩子去设置</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;my-project&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.0.0&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;test&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;echo &#39;Hello, World!&#39;&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;build&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm run test&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;start&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm run build&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;preinstall&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm config set script-shell </span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">C:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">Program Files</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">Git</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">bin</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">bash.exe</span><span style="color:#56B6C2;">\\&quot;</span><span style="color:#98C379;">&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="可运行的脚本" tabindex="-1">可运行的脚本 <a class="header-anchor" href="#可运行的脚本" aria-label="Permalink to &quot;可运行的脚本&quot;">​</a></h3><p>在npm run 执行的scripts 本质是对应系统所对应的shell 脚本，因此 scripts 的脚本整体分为三种</p><ul><li><strong>内部自带指令</strong>，在win 实际运行在&#39;cmd&#39;中执行的命令，因此系统cmd的内部命令，不需要安装额外的插件，就可以直接执行，在&#39;npm&#39;的&#39;scripts&#39;中都可以执行,举个例子：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/*系统命令*/</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;ip&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;ipconfig&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>执行外部命令</strong>，我们如果安装了node,git等客户端，可以直接在cmd窗口执行（需配置了系统的环境变量）举个例子当安装了 node 后，我们可以直接在控制台输入&#39;node -v&#39; 来查看node 版本信息因此也可以执行下面列子</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">:{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">/*全局外部命令*/</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;git&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;git --version&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;node&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;node -v&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>执行项目内部</strong>,在安装类似&#39;vuecli&#39;、&#39;webpack&#39;、&#39;eslint&#39;等项目时，会自动将当前项目的&#39;node_modules/.bin&#39;找到对应的脚本，例如<code>{&quot;test&quot;: &quot;mocha test&quot;} 等同于 {&quot;test&quot;: &quot; ./node_modules/.bin/mocha&quot;}</code> 也就是说 mocha test 指令可以这么缩写完全是npm 帮我们自动找了组成实际应运行的脚本指令 &quot; ./node_modules/.bin/mocha&quot;</li></ul><h3 id="全局安装的包和局部安装包" tabindex="-1">全局安装的包和局部安装包 <a class="header-anchor" href="#全局安装的包和局部安装包" aria-label="Permalink to &quot;全局安装的包和局部安装包&quot;">​</a></h3><p>非全局安装的时候，当想执行eslint 时候需要我们在scripts 标签配置好脚本，举个例子 <code>scripts:{&quot;eslint-version&quot;:&quot;eslint --version&quot;}</code> ,只需要执行&#39;npm run eslint-version&#39;,如果不想配置&#39;scripts&#39; 其他的执行方法&quot; .\\node_modules.bin\\eslint.cmd --version&quot; 直接指定运行&quot;node_modules.bin&quot; 文件下的脚本 或者 &#39;node .\\node_modules\\eslint\\bin\\eslint.js --version&#39; 直接具体到运行的脚本目录</p><p>全局安装一些包例如&#39;eslint&#39; 直接执行&#39;eslint&#39; 就可以在全局运行，这是因为你在全局安装时候会在node 的文件所在目录自动添加一个执行shell 脚本，并且node 路径在系统path 中因此可以直接调用</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>node 可以直接运行完全是 电脑 path 配置</p><p><img src="`+s+`" alt=""></p></div><h3 id="对npm-执行脚本一个总结" tabindex="-1">对npm 执行脚本一个总结 <a class="header-anchor" href="#对npm-执行脚本一个总结" aria-label="Permalink to &quot;对npm 执行脚本一个总结&quot;">​</a></h3><p>&#39;npm run &#39;在执行对应的&#39;scripts&#39; 是对应的执行窗口调用响应命令而非npm 去调用，是npm 去将具体调用shell指令给到了执行窗口，在通过node 进行了调用，之前介绍过本地的话会找到&quot;node_modules.bin&quot; 以esbuild 的 &quot;node_modules.bin\\esbuild&quot; 文件内容去看也能发现（这里以cmd 的脚本） 是通过node执行的</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">@IF</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">EXIST</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;%~dp0\\node.exe&quot;</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">&quot;%~dp0\\node.exe&quot;</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;%~dp0\\..\\esbuild\\bin\\esbuild&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">%</span><span style="color:#E5C07B;">*</span></span>
<span class="line"><span style="color:#ABB2BF;">) ELSE (</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">@SETLOCAL</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">@SET</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">PATHEXT=%PATHEXT:</span><span style="color:#ABB2BF;">;</span><span style="color:#61AFEF;">.JS</span><span style="color:#ABB2BF;">;=;</span><span style="color:#61AFEF;">%</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">node</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;%~dp0\\..\\esbuild\\bin\\esbuild&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">%</span><span style="color:#E5C07B;">*</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>已经知道 脚本最后是node 执行了，现在也可以知道我们在执行一些命令时候他的传参原理 例如来分析一组指令</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service serve --mode=dev --mobile -config build/example.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当执行&#39;npm run serve&#39; 实际执行的是&quot;node_modules/cli-service&#39;，帮我们间接执行了&quot;node node_modules/@vue\\cli-service\\bin\\vue-cli-service.js --mode=dev --mobile -config build/example.js&quot; &#39;</p><ul><li>&quot;node_modules/cli-service&#39; 脚本如图 <img src="`+o+'" alt=""></li></ul><p>已经知道本质是node 那就可以知道 &#39;node&#39; 调用时候可以通过&#39;process.argv&#39; 获取一个返回的数组于&#39;process.argv&#39;，这个数组包含了启动node进程时的命令行参数。第一个元素为启动node 进程的可执行文件的绝对路径名process.execPath，第二个元素为当前执行的JavaScript文件路径。剩余的元素为其他命令行参数。如下图自己做的一个js 打印（可以去其他第三方包去看他们实现） <strong>可以用一些第三方工具包 minimist 或者 yargs 等参数解析工具来对命令行参数进行解</strong><img src="'+t+'" alt=""></p><h3 id="为啥能npm-run-执行脚本" tabindex="-1">为啥能npm run 执行脚本 <a class="header-anchor" href="#为啥能npm-run-执行脚本" aria-label="Permalink to &quot;为啥能npm run 执行脚本&quot;">​</a></h3><p>那为什么我的脚本在 scripts 通过npm 执行 scripts 脚本可以做到这种匹配，换句话说我我在 shell 脚本的控制台直接输入 &quot;vue-cli-service&quot; 或者 &quot;npm vue-cli-service&quot; 不生效呢？首先所有的脚本能直接在命令行上执行原因就是在他们已经 电脑系统的path 注册了</p><p>在windows 下你可以通过 cmd 下执行 set</p><p><img src="'+r+'" alt=""></p><p>在linux 下执行env 查看</p><p><img src="'+c+'" alt=""></p><ul><li>node 可以直接运行完全是 电脑 path 配置</li></ul><p><img src="'+s+'" alt=""></p><p>因此 &quot;vue-cli-service&quot;（全局安装是另外原因） 和 &quot;npm vue-cli-service&quot;（npx 特殊） 这种执行形式肯定是失效的，那在 npm run 时候会自动新建一个Shell，这个 Shell会将当前项目的node_modules/.bin的绝对路径加入到环境变量PATH中，执行结束后，再将环境变量PATH恢复原样。</p><p>执行查看 npm run env 的时候的环境变量，可以看到运行时的PATH环境变量多了两个路径：npm指令路径和<strong>项目中node_modules/.bin的绝对路径</strong><img src="'+i+`" alt=""></p><p>所以，通过npm run可以在不添加路径前缀的情况下直接访问当前项目node_modules/.bin目录里面的可执行文件</p><h2 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">​</a></h2><p>执行项目内部的script 会去执行 bin 文件，bin 文件生成是在package.json中的字段 bin 中配置的，表示的是一个可执行文件到指定文件源的映射。通过npm bin指令显示当前项目的bin目录的路径</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">&quot;bin&quot;</span><span style="color:#ABB2BF;"> : { </span><span style="color:#E06C75;">&quot;myapp&quot;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;./cli.js&quot;</span><span style="color:#ABB2BF;"> } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>它的工作方式 模块安装的时候，若是全局安装，则&#39;npm&#39;会为&#39;bin&#39;中配置的文件在bin目录下创建一个软连接（对于windows系统，默认会在&#39;C:\\Users\\username\\AppData\\Roaming\\npm&#39;目录下），若是局部安装，则会在项目内的./node_modules/.bin/目录下创建一个软链接。</p><p>如果你的模块只有一个可执行文件，并且它的命令名称和模块名称一样，你可以只写一个字符串来代替上面那种配置，例如：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;my-program&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.2.5&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;bin&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;./path/to/program&quot;</span><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>作用和如下写法相同:</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{ </span><span style="color:#E06C75;">&quot;name&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;my-program&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;1.2.5&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">&quot;bin&quot;</span><span style="color:#ABB2BF;"> : { </span><span style="color:#E06C75;">&quot;my-program&quot;</span><span style="color:#ABB2BF;"> : </span><span style="color:#98C379;">&quot;./path/to/program&quot;</span><span style="color:#ABB2BF;"> } }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">什么是软连接</p><p>软链接（符号链接）是一类特殊的可执行文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用</p></div><p>在举一个 cli-service 例子，&#39;cli-service&#39;的package.json 的bin 告诉了cli 执行脚本位置，也就是要创建软连接后对应文件地址</p><p><img src="`+d+'" alt=""></p><p>在安装包之后会通过这 bin 字段生成 在 &#39;./node_modules/.bin/&#39;目录下创建一个脚本</p><p><img src="'+B+'" alt=""></p>',81),y=[b];function m(F,q,A,g,v,C){return a(),p("div",null,y)}const k=n(u,[["render",m]]);export{_ as __pageData,k as default};
