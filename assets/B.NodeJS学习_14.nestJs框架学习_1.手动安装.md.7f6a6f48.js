import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const u=JSON.parse('{"title":"","description":"安装","frontmatter":{"description":"安装","tags":["服务端","nestjs"]},"headers":[],"relativePath":"B.NodeJS学习/14.nestJs框架学习/1.手动安装.md","filePath":"B.NodeJS学习/14.nestJs框架学习/1.手动安装.md","lastUpdated":1718635980000}'),p={name:"B.NodeJS学习/14.nestJs框架学习/1.手动安装.md"},o=l(`<p>Nest 是一个用于构建高效，可扩展的 Node.js 服务器端应用程序的框架。它使用渐进式 JavaScript，内置并完全支持 TypeScript（但仍然允许开发人员使用纯 JavaScript 编写代码）并结合了 OOP（面向对象编程），FP（函数式编程）和 FRP（函数式响应编程）的元素。</p><p>在底层，Nest使用强大的 HTTP Server 框架，如 Express（默认）和 Fastify。Nest 在这些框架之上提供了一定程度的抽象，同时也将其 API 直接暴露给开发人员。这样可以轻松使用每个平台的无数第三方模块。</p><h2 id="nest-的依赖包" tabindex="-1">Nest 的依赖包 <a class="header-anchor" href="#nest-的依赖包" aria-label="Permalink to &quot;Nest 的依赖包&quot;">​</a></h2><ul><li><code>@nestjs/core</code> Nest.js核心模块，提供构建、启动和管理Nest.js应用程序的基础设施</li><li><code>@nestjs/common</code> 包含了构建Nest.js应用程序基础设施和常用装饰器，像控制器、服务、中间件、守卫、拦截器、管道、异常过滤器等</li><li><code>rxjs</code> 用于构建异步和事件驱动程序的库, 基于可观察序列的概念，提供强大的功能来处理异步数据流。</li><li><code>reflect-metadata</code> 实现元编程的库，提供元数据反射API，可以在运行时检查和操作对象的元数据</li><li><code>@nestjs/platform-express</code> Nest的Express平台适配器，提供中间件、路由等功能</li></ul><p><strong>其他</strong></p><ul><li><code>ts-node</code> 是一个用于直接执行 TypeScript 代码的 Node.js 实现，它允许开发者在不预先编译的情况下运行 TypeScript 文件</li></ul><p><strong>安装</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/core</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/common</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">rxjs</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">reflect-metadata</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/platform-express</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">pnpm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">ts-node</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="简单demo" tabindex="-1">简单demo <a class="header-anchor" href="#简单demo" aria-label="Permalink to &quot;简单demo&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/core&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 服务 @Injectable 装饰器标记 AppService 类为可注入服务</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello World!&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 控制器 @Controller 装饰器标记 AppController 类为控制器。</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// @Get 装饰器标记 getHello 方法为处理 GET 请求的路由。</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">appService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 模块 @Module 装饰器配置模块的控制器和提供者。</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">imports</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppModule</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建和启动应用</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">// 通过 app.listen 启动应用监听 3000 端口，并输出应用运行信息</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Application is running on: http://localhost:3000&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="项目结构目录划分开发" tabindex="-1">项目结构目录划分开发 <a class="header-anchor" href="#项目结构目录划分开发" aria-label="Permalink to &quot;项目结构目录划分开发&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">.</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">package.json</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pnpm-lock.yaml</span></span>
<span class="line"><span style="color:#ABB2BF;">|</span><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">src</span></span>
<span class="line"><span style="color:#ABB2BF;">|   |</span><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">app.controller.ts</span></span>
<span class="line"><span style="color:#ABB2BF;">|   |</span><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">app.module.ts</span></span>
<span class="line"><span style="color:#ABB2BF;">|   </span><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">--</span><span style="color:#98C379;"> main.ts</span></span>
<span class="line"><span style="color:#98C379;">\`</span><span style="color:#61AFEF;">--</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>执行 <code>ts-node src/main.ts</code> 运行项目访问 <code>http://127.0.0.1:3000/a/b</code> 就可以看到页面输出 <code>Hello World!</code> ,启动项目后在控制台 会输入日志</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">[Nest] 22276  - 2024/06/17 13:20:29     LOG [NestFactory] Starting Nest application...</span></span>
<span class="line"><span style="color:#abb2bf;">[Nest] 22276  - 2024/06/17 13:20:29     LOG [InstanceLoader] AppModule dependencies initialized +13ms</span></span>
<span class="line"><span style="color:#abb2bf;">[Nest] 22276  - 2024/06/17 13:20:29     LOG [RoutesResolver] AppController {/a}: +8ms</span></span>
<span class="line"><span style="color:#abb2bf;">[Nest] 22276  - 2024/06/17 13:20:29     LOG [RouterExplorer] Mapped {/a/b, GET} route +3ms</span></span>
<span class="line"><span style="color:#abb2bf;">[Nest] 22276  - 2024/06/17 13:20:29     LOG [NestApplication] Nest application successfully started +3ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>关于日志的说明</p><table><thead><tr><th><strong>时间戳</strong></th><th><strong>进程ID</strong></th><th><strong>日志级别</strong></th><th><strong>组件</strong></th><th><strong>日志信息</strong></th><th><strong>耗时</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>2024/06/17 13:20:29</td><td>22276</td><td>LOG</td><td>[NestFactory]</td><td>Starting Nest application...</td><td></td><td>启动 Nest 应用程序。</td></tr><tr><td>2024/06/17 13:20:29</td><td>22276</td><td>LOG</td><td>[InstanceLoader]</td><td>AppModule dependencies initialized</td><td>+13ms</td><td>初始化 <code>AppModule</code> 的依赖项。</td></tr><tr><td>2024/06/17 13:20:29</td><td>22276</td><td>LOG</td><td>[RoutesResolver]</td><td>AppController {/a}:</td><td>+8ms</td><td>解析<code>AppController</code>中的路由路径<code>/a</code>。</td></tr><tr><td>2024/06/17 13:20:29</td><td>22276</td><td>LOG</td><td>[RouterExplorer]</td><td>Mapped {/a/b, GET} route</td><td>+3ms</td><td>映射 GET 路由 <code>/a/b</code>。</td></tr><tr><td>2024/06/17 13:20:29</td><td>22276</td><td>LOG</td><td>[NestApplication]</td><td>Nest application successfully started</td><td>+3ms</td><td>Nest 应用程序成功启动。</td></tr></tbody></table><h3 id="src-main-ts" tabindex="-1">src\\main.ts <a class="header-anchor" href="#src-main-ts" aria-label="Permalink to &quot;src\\main.ts&quot;">​</a></h3><p><code>NestFactory</code> 是 NestJS 框架中用于创建 Nest 应用实例的核心类。它提供了一组静态方法，用于引导和启动应用程序。</p><p><code>NestFactory.create</code>创建一个 Nest 应用实例，默认使用 Express 作为底层 HTTP 服务器。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入 NestFactory 模块，它用于创建Nest 应用实例</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;@nestjs/core&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 导入跟模块</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./app.module&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个异步函数，用于创建并且启动 Nest 应用</span></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 使用 NestFactory 创建一个 Nest 应用实例 并传入根模块 AppModule</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 在底层，NestFactory.create() 方法使用了一个内部的 HTTP 服务器（Express 或 Fastify）来处理传入的请求</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// NestFactory 它提供了一些静态方法来建立和配置整个应用程序</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// // 设置全局路由前缀</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// app.setGlobalPrefix(&quot;api&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// // 启用 CORS</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// app.enableCors();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 使用 app.listen 方法监听 3000 端口</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="app-module-ts" tabindex="-1">app.module.ts <a class="header-anchor" href="#app-module-ts" aria-label="Permalink to &quot;app.module.ts&quot;">​</a></h3><p><code>@Module</code> 是 NestJS 框架中的一个装饰器，用于定义模块。模块是组织代码的基本单元，它们将相关的组件（如控制器、服务、提供者等）组合在一起。NestJS 的模块系统受到了 Angular 的启发，旨在促进代码的模块化和可维护性。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// controller 用来处理请求</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;./app.controller&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// nest 创建一个新的模块。这个模块是一个类，用 @Module 装饰器装饰</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @Module是一个装饰器，用于定义模块</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 模块是组织代码的基本单元，它将相关的组件(控制器、服务器、提供者)组合在一起</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * Nest的模块系统是受Angular启动</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="app-controller-ts" tabindex="-1">app.controller.ts <a class="header-anchor" href="#app-controller-ts" aria-label="Permalink to &quot;app.controller.ts&quot;">​</a></h3><p><code>@Controller</code> 是 NestJS 框架中的一个装饰器，用于定义控制器。控制器是处理传入 HTTP 请求的核心组件。每个控制器负责处理特定的请求路径和相应的 HTTP 方法。控制器使用路由装饰器（如 <code>@Get</code>、<code>@Post</code> 等）来定义路由和请求处理方法。</p><p><code>@Get</code> 是 <code>NestJS</code> 框架中的一个装饰器，用于将控制器方法映射到 HTTP GET 请求。这个装饰器是由 <code>@nestjs/common</code> 模块提供的。通过使用 <code>@Get</code> 装饰器，可以指定该方法处理特定路径上的 GET 请求。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;@nestjs/common&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义一个控制器类，用于处理请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @Controller也是一个装饰器，用于定义控制器</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 控制器是处理传入HTTP请求的核心组件，每个控制器负责处理特定的请求路径和对应的HTTP方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 在控制器的内部会使用路由装饰 器如</span><span style="color:#C678DD;font-style:italic;">@Get</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#C678DD;font-style:italic;">@Post来定义路径和请求处理方法</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @Get也是一个路由装饰器，用于将控制器的方法(getHello)映射到HTTP的GET请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 当客户端使用GET方法访问 路径/a/b   [&#39;a&#39;,&#39;b&#39;]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 通过@Get装饰器，可以指定该方法处理特定路径上的GET请求</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/a&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;/b&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Hello World!&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="tsconfig-json" tabindex="-1">tsconfig.json <a class="header-anchor" href="#tsconfig-json" aria-label="Permalink to &quot;tsconfig.json&quot;">​</a></h3><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 编译选项</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;compilerOptions&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;emitDecoratorMetadata&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;experimentalDecorators&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 启用实验性的装饰器特性</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;target&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;ESNext&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 编译后的目标版本</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;moduleResolution&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;NodeNext&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 模块解析策略</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;module&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;NodeNext&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 模块化方案</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>compilerOptions</code> 是 TypeScript 的配置文件 <code>tsconfig.json</code> 中用于指定编译选项的顶层字段。</p><ol><li><p><strong><code>emitDecoratorMetadata</code></strong></p><ul><li><strong>含义</strong>：当该选项设置为 <code>true</code> 时，TypeScript 编译器会在编译时生成有关装饰器（decorators）使用的元数据。这对于依赖于反射（reflection）机制的应用程序非常有用。</li><li><strong>默认值</strong>：<code>false</code></li></ul></li><li><p><strong><code>experimentalDecorators</code></strong></p><ul><li><strong>含义</strong>：启用实验性的装饰器特性。装饰器是一个用于装饰类及其成员的特殊语法，目前还处于实验阶段。</li><li><strong>默认值</strong>：<code>false</code></li><li><strong>注意</strong>：由于这是一个实验性特性，可能在未来的版本中发生变化。</li></ul></li><li><p><strong><code>target</code></strong></p><ul><li><strong>含义</strong>：设置编译后的目标 JavaScript 版本。这决定了生成的 JavaScript 代码的语言级别。</li><li><strong>值示例</strong>：<code>&quot;ES5&quot;</code>, <code>&quot;ES6&quot;</code>, <code>&quot;ESNext&quot;</code> 等</li><li><strong>此处设置</strong>：<code>&quot;ESNext&quot;</code> 表示编译后的代码将使用最新的 ECMAScript 标准。</li></ul></li><li><p><strong><code>moduleResolution</code></strong></p><ul><li><strong>含义</strong>：决定 TypeScript 如何查找模块文件。在大多数情况下，这决定了文件之间的导入路径解析策略。</li><li><strong>值示例</strong>：<code>&quot;Classic&quot;</code>, <code>&quot;Node&quot;</code></li><li><strong>此处设置</strong>：<code>&quot;NodeNext&quot;</code> 表示使用 Node.js 的下一代模块解析方式。</li></ul></li><li><p><strong><code>module</code></strong></p><ul><li><strong>含义</strong>：指定要使用的模块系统，有助于决定如何生成和解释模块化的代码。</li><li><strong>值示例</strong>：<code>&quot;CommonJS&quot;</code>, <code>&quot;ES6&quot;</code>, <code>&quot;AMD&quot;</code>, <code>&quot;UMD&quot;</code>, <code>&quot;System&quot;</code></li><li><strong>此处设置</strong>：<code>&quot;NodeNext&quot;</code> 表示使用 Node.js 的下一代模块化方案。</li></ul></li></ol><p>总结：</p><ul><li><code>emitDecoratorMetadata</code> 和 <code>experimentalDecorators</code> 是与装饰器相关的配置，用于启用和生成装饰器的元数据。</li><li><code>target</code> 设定了编译后的 JavaScript 版本，以确保兼容性。</li><li><code>moduleResolution</code> 和 <code>module</code> 决定了如何处理模块和模块化的代码，这些设置视具体的运行环境（如 Node.js）而定。</li></ul>`,33),e=[o];function t(r,c,i,B,y,d){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{u as __pageData,F as default};
