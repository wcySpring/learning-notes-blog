import{_ as s,c as n,o as a,a8 as e,cQ as l,cR as p,cS as o,cT as t,cU as r}from"./chunks/framework.6k5lawSO.js";const f=JSON.parse('{"title":"","description":"Git 的分支管理工作流程","frontmatter":{"description":"Git 的分支管理工作流程","tags":["git"]},"headers":[],"relativePath":"F.开发中杂七杂八/5.Git分支管理工作流-GitFlow.md","filePath":"F.开发中杂七杂八/5.Git分支管理工作流-GitFlow.md","lastUpdated":1718635980000}'),i={name:"F.开发中杂七杂八/5.Git分支管理工作流-GitFlow.md"},c=e('<p>分支是Git的一项强大特性,可以有效地支持团队合作和并行开发。为了充分发挥分支 带来业务价值,有必要设计并采用合理的Git工作流和分支策略。常见的工作流 分支策略有 GitFlow、GitHubFlow 和 GitLabFlow 等</p><h2 id="gitflow" tabindex="-1">GitFlow <a class="header-anchor" href="#gitflow" aria-label="Permalink to &quot;GitFlow&quot;">​</a></h2><p>Git Flow 是一种基于 Git 的分支管理策略，旨在优化软件开发的效率和质量。该策略最初由 Vincent Driessen 在 2010 年提出,我们使用 GitFlow 的策略 可以解决以下问题</p><ul><li><p><strong>管理项目历程</strong>:将<strong>不同的开发阶段对应到不同的分支上</strong>,可以有效地管理和控制项目的整个开发历程。</p></li><li><p><strong>隔离开发</strong>:每个<strong>开发者都有自己的分支进行开发</strong>,不会影响主分支或其他人的工作,有效隔离开发。</p></li><li><p><strong>加快bug修复</strong>:专门的<strong>bug修复分支</strong>(如hotfix分支)可以<strong>快速地fix bug</strong>然后合并。</p></li><li><p><strong>保持仓库清晰</strong>: <strong>主分支(master)保持健全和稳定</strong>,只包含正式发布的版本;特性分支和开发分支包含正在开发的临时变更。</p></li><li><p><strong>管理版本</strong>:通过将<strong>发布版本对应到指定分支,方便管理和回溯每个版本的变更</strong>。</p></li><li><p><strong>协调团队</strong>:清晰的分支结构和工作流有助于团队协同工作,避免混乱</p></li></ul><p>整个 GitFlow 流程管理设计思路是 将分支进行细化分为 <strong>主分支 和 辅助分支</strong>两类分支</p><ol><li><strong>主分支：master分支、develop分支；</strong> 主要分支和开发分支，用于组织与软件开发、部署相关的活动,使用两个分支来记录项目的历史记录，而不是单个主分支。master主分支存储官方发布历史记录，而Develop开发分支作为功能的集成分支</li></ol><ul><li><p><strong>Develop 分支是主要的集成分支，用于将不同的功能集成到一个代码库中</strong>。开是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比<strong>如Feature分支上进行开发，实现单个功能并将其推送到Develop 分支</strong>。该分支应该只是进行一些优化和升级开发，如果有新的需求应该拉出一个feature分支。因此，<strong>Develop 分支包含了尚未发布的所有功能和代码修改。</strong></p></li><li><p><strong>Master 分支是官方发布的历史记录。当代码已经经过测试，并且已经准备好发布时，开发人员将 release 分支合并到 Master 分支中</strong>。因此，Master 分支只包含已经发布的代码。Master 分支的优点是它提供了一个稳定的基准点，可以用于构建和部署生产环境中的应用程序。<strong>此外，Master 分支的每个提交都应该被标记为版本号（标记tag），这使得查找特定版本的代码变得更加容易</strong></p></li></ul><ol start="2"><li><strong>辅助分支：feature分支、release分支、hotfix分支</strong>，辅助分支包含功能分支、预发分支、热修复分支以及其他自定义分支，是为了解决特定的问题而进行的各种开发活动。这些分支总是有有限的生命时间，因为它们最终将被移除</li></ol><p>注意的是 <strong>主分支通常是必须的</strong>，而<strong>辅助分支 例如 feature分支、release分支和hotfix分支是根据项目需要和团队规模来决定是否使用</strong>。辅助分支可以使协作和版本管理更加清晰和高效。</p><table tabindex="0"><thead><tr><th>分支名称</th><th>说明</th><th>场景</th><th>关系</th></tr></thead><tbody><tr><td><strong>master分支</strong></td><td>主分支，代表生产环境的代码版本</td><td>用于发布稳定版本，不应该直接提交代码到此分支</td><td>develop分支的父分支，接受release分支合并，hotfix分支应该合并回master分支</td></tr><tr><td><strong>develop分支</strong></td><td>主分支，代表开发环境的代码版本</td><td>用于开发新功能和修复bug，feature分支从此分支分出，release分支合并回此分支</td><td>master分支的子分支，接受feature分支和hotfix分支合并</td></tr><tr><td><strong>feature分支</strong></td><td>辅助分支，代表特定功能的开发分支</td><td>用于开发特定功能，从develop分支分出，完成后合并回develop分支</td><td>develop分支的子分支</td></tr><tr><td><strong>release分支</strong></td><td>辅助分支，代表发布前的准备分支</td><td>用于进行最后的测试和准备工作，从develop分支分出，完成后合并回master分支和develop分支</td><td>develop分支的子分支，master分支的父分支</td></tr><tr><td><strong>hotfix分支</strong></td><td>辅助分支，代表紧急修复分支</td><td>用于紧急修复生产环境的bug，从master分支分出，完成后合并回master分支和develop分支</td><td>master分支的子分支，develop分支的子分支</td></tr></tbody></table><h3 id="工作流程" tabindex="-1">工作流程 <a class="header-anchor" href="#工作流程" aria-label="Permalink to &quot;工作流程&quot;">​</a></h3><p><strong>当项目开始阶段</strong>，应该创建两个分支 Develop 和 Master，最开始两个分支 develop 是来自master 的</p><p><img src="'+l+'" alt=""></p><p><strong>当进入开发阶段需求任务下发</strong>，开发拿到了自己要开发的模块的时候，划分清楚开发任务模块，针对自己模块内容，通过派生develop分支，生成自己的feature 分支 创建 <strong>功能分支（Feature）</strong> 功能分支一般命名为 Feature/xxx，用于开发即将发布版本或未来版本的新功能或者探索新功能。<strong>该分支通常存在于开发人员的本地代码库而不要求提交到远程代码库上，除非几个人合作在同一个功能分支开发</strong></p><p>功能分支只能拉取自开发分支，开发完成后要么合并回开发分支，要么因为新功能的尝试不如人意而直接丢弃</p><p>当feature开发完毕后，要合并回 develop 分支。feature分支永远不会和master分支打交道</p><p><img src="'+p+'" alt=""></p><p><strong>当功能开发完毕开始交付给测试进行测试阶段</strong>，feature开发完毕后已将代码合并到了 develop ，因此此时 <strong>需要从 develop 分支创建 预发分支（Release）</strong> <strong>该分支专为测试—发布新的版本而开辟，允许做小量级的Bug修复和准备发布版本的元数据信息（版本号、编译时间等）</strong>。通过创建预发分支，使得开发分支得以空闲出来接受下一个版本的新的功能分支的合入</p><p>预发分支需要提交到服务器上，交由测试工程师进行测试，并由开发工程师修复Bug。同时根据该分支的特性我们可以部署自动化测试以及生产环境代码的自动化更新和部署</p><p>release分支不是一个放正式发布产品的分支，你可以将它理解为“待发布”分支。预发分支只能拉取自开发分支，合并回开发分支和主要分支。<strong>要强调这个模式主要做的事情</strong>：</p><ul><li>把这个分支打包给测试人员测试</li><li>在这个分支里修复bug</li><li>编写发布文档</li></ul><p><strong>这个分支绝对不能做的是不会添加新的特性</strong></p><p>当和发布相关的工作都完成后，<strong>release分支合并回develop和master分支</strong>，release分支的好处是，当一个团队在做发布相关的工作时，另一个团队则可以接着开发下一版本的东西。</p><p><img src="'+o+'" alt=""></p><p><strong>当项目上线后发现紧急bug后热修复分支（Hotfix）</strong>，就需要从主要分支上指定的tag版本（比如1.2）拉取热修复分支进行代码的紧急修复，并附上版本号（比如1.2.1）。这样做的好处是不会打断正在进行的开发分支的开发工作，能够让团队中负责功能开发的人与负责代码修复的人并行、独立的开展工作</p><p>热修复分支只能主要分支上拉取，测试通过后合并回主要分支和开发分支。</p><p>一个项目发布后或多或少肯定会有一些bug存在，而bug的修复工作并不适合在develop上做，这是因为</p><ul><li><p>develop分支上包含还未验证过的feature</p></li><li><p>用户未必需要 develop 上的feature</p></li><li><p>develop还不能马上发布，而客户急需这个bug的修复。</p></li></ul><p>这时就需要新建hotfix分支，hotfix分支派生自master分支，仅仅用于修复bug，当bug修复完毕后，马上回归到master分支，然后发布一个新版本，比如，v0.1.1。</p><p>同时hotfix也要合并回develop分支，这样develop分支就能享受到bug修复的好处了。</p><p><img src="'+t+'" alt=""></p><h3 id="全流程" tabindex="-1">全流程 <a class="header-anchor" href="#全流程" aria-label="Permalink to &quot;全流程&quot;">​</a></h3><p><img src="'+r+`" alt=""></p><ol><li><p>开始是一个主分支maser</p></li><li><p>拉取一个开分支develop（简称dev），优化、修改等</p></li><li><p>一旦线上版本有了紧急bug，拉取一个热补丁分支（hotfix），解决bug</p><ul><li>合并到主分支master</li><li>打一个tag</li><li>合并到开发分支dev</li><li>删除hotfix分支</li></ul></li><li><p>一旦有了新的需求</p><ul><li>从开发分支拉取一个feature特征分支</li><li>需求做完，合并到开发分支dev，然后删除feature分支</li><li>从develop拉取一个发布分支release，用于修改测试测出来的bug</li><li>在release修改bug的同时，每次提交要相应的合并到dev分支</li></ul></li><li><p>release分支测试通过</p><ul><li>合并到分支master</li><li>打一个tag</li><li>合并到开发分支dev</li><li>删除release分支</li></ul></li></ol><p><strong>在此流程图中未说明如果在1.0版本发布上线之前，出现一个紧急版本0.3该怎么处理？</strong></p><p>在feature_1X分支进行开发，开发完成后，直接从feature_1X分支打release_0.3版本，测试通过后，合并到master分支tag3.0，和dev分支。</p><p><strong>此时如果又有新的需求怎么办？ （正在修第一个需求的bug，还未发布，新需求又来了）</strong></p><ol><li>先要将release分支合并到dev分支</li><li>然后再从dev分支拉取一个feature分支（之前的那个feature分支早删除了）</li><li>在新的feature分支进行新需求的开发</li></ol><h3 id="gitflow-实践" tabindex="-1">GitFlow 实践 <a class="header-anchor" href="#gitflow-实践" aria-label="Permalink to &quot;GitFlow 实践&quot;">​</a></h3><p>上面每个分支都要进行不同的，操作过程,将这些规则步骤用 git 指令实现出来</p><p><strong>创建 develop 分支</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 创建 develop 分支 </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> branch</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 将 develop 分支推送到远端仓库</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span><span style="color:#986801;"> -u</span><span style="color:#50A14F;"> origin</span><span style="color:#50A14F;"> develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>开始新的 Feature</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 通过develop新建feaeure分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#986801;"> -b</span><span style="color:#50A14F;"> Feature分支名</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 可选，将分支推送到远端仓库</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span><span style="color:#986801;"> -u</span><span style="color:#50A14F;"> origin</span><span style="color:#50A14F;"> Feature分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>编辑 Feature 分支</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 查看状态</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> status</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 添加提交内容</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> add</span><span style="color:#50A14F;"> XXXfile</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 提交    </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> commit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>完成 Feature 分支</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 拉取远端仓库 develop 分支合并到本地 develop 分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> pull</span><span style="color:#50A14F;"> origin</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 切换到 develop 分支     </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 将 Feature 分支合并到 develop 分支    </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	# --no-ff：不使用 fast-forward 方式合并，保留分支的 commit 历史</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	# --squash：使用 squash 方式合并，把多次分支 commit 历史压缩为一次    </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> merge</span><span style="color:#986801;"> --no-ff</span><span style="color:#50A14F;"> Feature分支名</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 将分支推送远端仓库 </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span><span style="color:#50A14F;"> origin</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 删除 Feature分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> branch</span><span style="color:#986801;"> -d</span><span style="color:#50A14F;"> Feature分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><strong>开始Relase</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 创建 Relase 分支并切换到 Relase 分支上</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#986801;"> -b</span><span style="color:#50A14F;"> release-0.1.0</span><span style="color:#50A14F;"> develop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>完成Release</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 切换到 master 分支上</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#50A14F;"> master</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 合并 release-0.1.0 分支    </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> merge</span><span style="color:#986801;"> --no-ff</span><span style="color:#50A14F;"> release-0.1.0</span><span style="color:#383A42;">    </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 推送到远端仓库</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 切换到 develop 分支上    </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 合并 release-0.1.0 分支   </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> merge</span><span style="color:#986801;"> --no-ff</span><span style="color:#50A14F;"> release-0.1.0</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 推送到远端仓库   </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 删除 release-0.1.0 分支 </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> branch</span><span style="color:#986801;"> -d</span><span style="color:#50A14F;"> release-0.1.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>开始Hotfix</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 创建 hotfix 分支并切换到 hotfix 分支上</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#986801;"> -b</span><span style="color:#50A14F;"> hotfix-0.1.1</span><span style="color:#50A14F;"> master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>完成Hotfix</strong></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 切换到 master 分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#50A14F;"> master</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 合并 hotfix-0.1.1 分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> merge</span><span style="color:#986801;"> --no-ff</span><span style="color:#50A14F;"> hotfix-0.1.1</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 推送到远端仓库</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 切换到 develop 分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> checkout</span><span style="color:#50A14F;"> develop</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 合并 hotfix-0.1.1 分支</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> merge</span><span style="color:#986801;"> --no-ff</span><span style="color:#50A14F;"> hotfix-0.1.1</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 推送到远端仓库</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 删除 release-0.1.0 分支    </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> branch</span><span style="color:#986801;"> -d</span><span style="color:#50A14F;"> hotfix-0.1.1</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 为主分支打上版本标签</span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> tag</span><span style="color:#986801;"> -a</span><span style="color:#50A14F;"> v0.1.1</span><span style="color:#50A14F;"> master</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 将标签推送到远端仓库  </span></span>
<span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> push</span><span style="color:#986801;"> --tags</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="更简单的gitflow-工具推荐-配套工具" tabindex="-1">更简单的GitFlow 工具推荐 | 配套工具 <a class="header-anchor" href="#更简单的gitflow-工具推荐-配套工具" aria-label="Permalink to &quot;更简单的GitFlow 工具推荐 | 配套工具&quot;">​</a></h3><p>上面这些有规律重复性质的工作 ，也是有统一的工具可以集成管理，使用 git-flow 工具优化 一些高的 git 版本中已经默认集成了</p><p>查看电脑是否安装 git-flow 工具</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>git flow init</code> 先让仓库初始化 git flow 流程</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">已初始化空的</span><span style="color:#50A14F;"> Git</span><span style="color:#50A14F;"> 仓库于</span><span style="color:#50A14F;"> /Users/.git/</span></span>
<span class="line"><span style="color:#4078F2;">No</span><span style="color:#50A14F;"> branches</span><span style="color:#50A14F;"> exist</span><span style="color:#50A14F;"> yet.</span><span style="color:#50A14F;"> Base</span><span style="color:#50A14F;"> branches</span><span style="color:#50A14F;"> must</span><span style="color:#50A14F;"> be</span><span style="color:#50A14F;"> created</span><span style="color:#50A14F;"> now.</span></span>
<span class="line"><span style="color:#4078F2;">Branch</span><span style="color:#50A14F;"> name</span><span style="color:#50A14F;"> for</span><span style="color:#50A14F;"> production</span><span style="color:#50A14F;"> releases:</span><span style="color:#383A42;"> [master] main    //主分支名称，之前是master，现在用main多一些</span></span>
<span class="line"><span style="color:#4078F2;">Branch</span><span style="color:#50A14F;"> name</span><span style="color:#50A14F;"> for</span><span style="color:#50A14F;"> &quot;next release&quot;</span><span style="color:#50A14F;"> development:</span><span style="color:#383A42;"> [develop]  //开发分支名称，默认就好，下面无特殊要求都默认</span></span>
<span class="line"><span style="color:#4078F2;">How</span><span style="color:#50A14F;"> to</span><span style="color:#50A14F;"> name</span><span style="color:#50A14F;"> your</span><span style="color:#50A14F;"> supporting</span><span style="color:#50A14F;"> branch</span><span style="color:#50A14F;"> prefixes?</span></span>
<span class="line"><span style="color:#4078F2;">Feature</span><span style="color:#50A14F;"> branches?</span><span style="color:#383A42;"> [feature/]   </span></span>
<span class="line"><span style="color:#4078F2;">Release</span><span style="color:#50A14F;"> branches?</span><span style="color:#383A42;"> [release/]</span></span>
<span class="line"><span style="color:#4078F2;">Hotfix</span><span style="color:#50A14F;"> branches?</span><span style="color:#383A42;"> [hotfix/]</span></span>
<span class="line"><span style="color:#4078F2;">Support</span><span style="color:#50A14F;"> branches?</span><span style="color:#383A42;"> [support/]</span></span>
<span class="line"><span style="color:#4078F2;">Version</span><span style="color:#50A14F;"> tag</span><span style="color:#50A14F;"> prefix?</span><span style="color:#383A42;"> []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>当创建一个新的开发模块 <strong>feature 分支时候</strong> start 后面一般跟你的新功能名称，它会基于 develop 分支为基础创建的这个新的分支</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> feature</span><span style="color:#50A14F;"> start</span><span style="color:#50A14F;"> your-branch-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当 <strong>feature 分支</strong> 功能开发完成后,这条命令会将你新开发的功能合并到 develop 分支并删除该 feature 分支，然后切换回 develop 分支，当然，你可以通过命令 git log 查看操作历史。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> feature</span><span style="color:#50A14F;"> finish</span><span style="color:#50A14F;"> your-branch-name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>进入测试阶段发 <strong>release 分支</strong>,创建一个release分支，派生自develop分支。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> release</span><span style="color:#50A14F;"> start</span><span style="color:#50A14F;"> v0.0.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>新版本完成测试后就可以发布该分支了，把release分支合并回master,给本次发布打tag,同时把release分支合并回develop,干掉release分支</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> release</span><span style="color:#50A14F;"> finish</span><span style="color:#50A14F;"> v0.0.1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注：最后不要忘记把tag push到服务器git push --tags</p><p><strong>热修复分支（Hotfix）开始一个Hotfix</strong>:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> hotfix</span><span style="color:#50A14F;"> start</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结束一个hotfix分支，和release一样，同时合并回develop和master</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> flow</span><span style="color:#50A14F;"> hotfix</span><span style="color:#50A14F;"> finish</span><span style="color:#50A14F;"> VERSION</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>Git Flow 代码版本管理策略，它对版本控制较为严格，主要适合开发团队规模较大、开发周期较长，可达几周至几个月的项目，整体四个阶段</p><ol><li><strong>并行开发</strong>：使用GitFlow可以实现并行开发，每个新功能都会建立一个新的feature分支，从而和已经完成的功能隔离开来，只有在新功能完成开发的情况下，其对应的feature分支才会合并到主开发分支（develop分支）上。</li><li><strong>协作开发</strong>：GitFlow支持多人协同开发，因为每个feature分支上改动的代码都只是为了让某个新的feature可以独立运行。同时也很容易知道每个人都在干什么。</li><li><strong>阶段式发布</strong>：当一个新feature开发完成的时候，它会被合并到develop分支，这个分支主要用来暂时保存那些还没有发布的内容，如果需要再开发新的feature，只需要从develop分支创建新分支即可包含所有已经完成的feature。</li><li><strong>支持紧急修复</strong>：GitFlow包含了hotfix分支，这种类型的分支是从master上创建出来并做一个紧急的修复，这个紧急修复只影响已经发布的tag，而不会影响正在开发的新feature。</li></ol><h2 id="sourcetree-管理" tabindex="-1">sourceTree 管理 <a class="header-anchor" href="#sourcetree-管理" aria-label="Permalink to &quot;sourceTree 管理&quot;">​</a></h2><p>使用sourceTree ，作为一个可视化的git 流程管理，他自带Git之GitFlow工作流 可以更加可视化的进行操作，具体可以参考文章中 <a href="https://blog.csdn.net/sunyctf/article/details/130587970" target="_blank" rel="noreferrer">Git之GitFlow工作流 | Gitflow Workflow（万字整理，已是最详）</a></p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844904157992714247?searchId=20230731165611FC6EC41C76537ED51320" target="_blank" rel="noreferrer">Git-flow学习</a></p><p><a href="https://blog.csdn.net/sunyctf/article/details/130587970" target="_blank" rel="noreferrer">Git之GitFlow工作流 | Gitflow Workflow（万字整理，已是最详）</a></p><p><a href="https://www.cnblogs.com/elian/p/10083317.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/elian/p/10083317.html</a></p>`,84),d=[c];function b(u,y,g,A,m,h){return a(),n("div",null,d)}const v=s(i,[["render",b]]);export{f as __pageData,v as default};
