import{_ as s,o as n,c as a,O as l}from"./chunks/framework.46ddca34.js";const A=JSON.parse('{"title":"","description":"了解Express.js 路由是指将HTTP与相应的处理程序或控制器相关联的机制","frontmatter":{"description":"了解Express.js 路由是指将HTTP与相应的处理程序或控制器相关联的机制","tags":["服务端","express"]},"headers":[],"relativePath":"B.NodeJS学习/12.express服务端框架/2.express路由.md","filePath":"B.NodeJS学习/12.express服务端框架/2.express路由.md","lastUpdated":1684226283000}'),p={name:"B.NodeJS学习/12.express服务端框架/2.express路由.md"},o=l(`<p>路由确定了应用程序如何响应客户端对特定端点的请求，包含一个 URI（或路径）和一个特定的 HTTP 请求方法（GET、POST 等）。每个路由可以具有一个或多个处理程序函数，这些函数在路由匹配时执行。</p><p>一个路由的组成有 请求方法 ， 路径 和 回调函数 组成</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="api-介绍" tabindex="-1">api 介绍 <a class="header-anchor" href="#api-介绍" aria-label="Permalink to &quot;api 介绍&quot;">​</a></h2><p><strong>method</strong> 可以包含多种方法例如 &#39;all&#39; | &#39;get&#39; | &#39;post&#39; | &#39;put&#39; | &#39;delete&#39; | &#39;patch&#39; | &#39;options&#39; | &#39;head&#39;</p><ul><li>all: 匹配所有 HTTP 方法。这个方法可以用于在任何请求方法下处理特定路由的共同逻辑。</li><li>get: 处理 HTTP GET 请求。</li><li>post: 处理 HTTP POST 请求。</li><li>put: 处理 HTTP PUT 请求。</li><li>delete: 处理 HTTP DELETE 请求。</li><li>patch: 处理 HTTP PATCH 请求。</li><li>options: 处理 HTTP OPTIONS 请求。</li><li>head: 处理 HTTP HEAD 请求。</li></ul><p><strong>path</strong> 路由参数格式 遵循<a href="https://www.npmjs.com/package/path-to-regexp" target="_blank" rel="noreferrer">path-to-regexp</a> ,常见一些格式可以是字符窜、正则表达式、数组</p><table><thead><tr><th>类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>字符串</td><td><code>&#39;/users/:id&#39;</code></td><td>表示一个包含动态参数的路由路径，如：<code>/users/123</code></td></tr><tr><td>正则表达式</td><td><code>/^\\/users\\/(\\d+)$/</code></td><td>使用正则表达式来匹配路由路径，如：匹配 <code>/users/123</code>，但不匹配 <code>/users/abc</code></td></tr><tr><td>数组（字符串）</td><td><code>[&#39;/users&#39;, &#39;/users/:id&#39;]</code></td><td>将多个路由路径的处理函数组合在一起，如：匹配 <code>/users</code> 和 <code>/users/123</code></td></tr><tr><td>数组（正则表达式）</td><td>[/^/users$/, /^/users/(\\d+)$/ ]</td><td>将多个正则表达式的处理函数组合在一起，如：匹配 <code>/users</code> 和 <code>/users/123</code>，但不匹配<code>/users/abc</code></td></tr></tbody></table><p><strong>callback</strong> 回调函数函数里面的参数有 ,请求对象（request对象）、响应对象（response对象）、next函数（在express中定义的用于执行下一个中间件的函数）</p><table><thead><tr><th>属性/方法</th><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>req.body</strong></td><td></td><td>包含 POST 请求体中提交的数据的对象。在使用中间件解析请求体后可用。</td></tr><tr><td><strong>req.cookies</strong></td><td></td><td>包含解析的 cookies 的对象。会自动解析 HTTP 请求中的 cookie 字段。</td></tr><tr><td><strong>req.get(header)</strong></td><td>header</td><td>获取指定请求头的值。如果请求头存在多个值，则返回第一个值。</td></tr><tr><td><strong>req.header(header)</strong></td><td>header</td><td>获取指定请求头的值。如果请求头存在多个值，则返回以逗号分隔的字符串。</td></tr><tr><td><strong>req.hostname</strong></td><td></td><td>返回主机名，如 &quot;example.com&quot;。</td></tr><tr><td><strong>req.ip</strong></td><td></td><td>返回客户端的 IP 地址。</td></tr><tr><td><strong>req.path</strong></td><td></td><td>返回 URL 的路径部分，如 &quot;/user&quot;。</td></tr><tr><td><strong>req.params</strong></td><td></td><td>包含以冒号标记的路由参数的对象。例如，在路由路径 /user/:id 中，如果一个请求的 URL 为/user/123，则 req.params 拥有一个属性 id，其值为 &quot;123&quot;。</td></tr><tr><td><strong>req.protocol</strong></td><td></td><td>返回请求协议，如 &quot;http&quot; 或 &quot;https&quot;。</td></tr><tr><td><strong>req.query</strong></td><td></td><td>包含 URL 查询参数的对象。例如，在 URL &quot;/user?id=123&quot; 中， req.query 拥有一个属性 id，其值为 &quot;123&quot;。</td></tr><tr><td><strong>req.secure</strong></td><td></td><td>如果请求通过 HTTPS 协议，则返回 true。</td></tr><tr><td><strong>req.url</strong></td><td></td><td>返回完整的 URL，包括查询参数和哈希部分。</td></tr><tr><td><strong>req.xhr</strong></td><td></td><td>如果请求通过 AJAX 发起，则返回 true。</td></tr></tbody></table><table><thead><tr><th>属性/方法</th><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>res.append(field, value)</strong></td><td>field, value</td><td>在响应头中添加一个值。</td></tr><tr><td><strong>res.cookie(name, value, options)</strong></td><td>name, value, options</td><td>设置一个 HTTP cookie。</td></tr><tr><td><strong>res.clearCookie(name, options)</strong></td><td>name, options</td><td>删除一个 HTTP cookie。</td></tr><tr><td><strong>res.download(path, [filename], [options], [callback])</strong></td><td>path, filename, options, callback</td><td>提供文件下载。</td></tr><tr><td><strong>res.end([data], [encoding])</strong></td><td>data, encoding</td><td>结束响应流，并发送响应数据。如果提供了数据，则相当于同时调用 res.write() 和 res.end()。</td></tr><tr><td><strong>res.format(obj)</strong></td><td>obj</td><td>根据请求 Accept 头发送不同的响应格式。</td></tr><tr><td><strong>res.get(field)</strong></td><td>field</td><td>获取响应头中指定字段的值。如果响应头存在多个值，则返回第一个值。</td></tr><tr><td><strong>res.json([body])</strong></td><td>body</td><td>发送一个 JSON 格式的响应。</td></tr><tr><td><strong>res.jsonp([body])</strong></td><td>body</td><td>发送一个 JSONP 格式的响应。</td></tr><tr><td><strong>res.links(links)</strong></td><td>links</td><td>发送 Link 标头。</td></tr><tr><td><strong>res.location(url)</strong></td><td>url</td><td>设置 &quot;Location&quot; 响应头，将客户端重定向到指定的 URL。</td></tr><tr><td><strong>res.redirect([status,] path)</strong></td><td>status, path</td><td>将客户端重定向到指定的 URL。</td></tr><tr><td><strong>res.render(view [, locals] [, callback])</strong></td><td>view, locals, callback</td><td>通过模板引擎渲染模板，并发送响应。</td></tr><tr><td><strong>res.send([body])</strong></td><td>body</td><td>发送一个 HTTP 响应。针对不同类型的数据采用适当的响应头。</td></tr><tr><td><strong>res.sendFile(path [, options] [, fn])</strong></td><td>path, options, fn</td><td>发送文件。</td></tr><tr><td><strong>res.setHeader(name, value)</strong></td><td>name, value</td><td>设置响应头的值。</td></tr><tr><td><strong>res.status(code)</strong></td><td>code</td><td>设定 HTTP 响应状态码。</td></tr><tr><td><strong>res.type(type)</strong></td><td>type</td><td>设置 Content-Type 响应头的值。</td></tr></tbody></table><p>next() 是用于传递请求到下一个 middleware 或者路由处理函数中的一个函数，如果没有执行 next()，那么请求将被阻塞，无法响应客户端。如果传入了参数，则 Express 会认为这是一个错误，并交给内置的错误处理函数处理。如果在中间件函数中调用了 next(&quot;some error message&quot;)，那么这个请求会被 Express 视为发生了错误，并交给 Express 内置的 error handler 函数处理。</p><h2 id="基础案例" tabindex="-1">基础案例 <a class="header-anchor" href="#基础案例" aria-label="Permalink to &quot;基础案例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入express模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建express实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义路由 首页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello World!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个登录页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/user/:id&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取请求头</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">head</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/head&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//匹配所有的请求方法 get post 啥都收到</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/search&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1 秒钟为您找到相关结果约 100,000,000 个&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 此路由路径将匹配 butterfly 和 dragonfly，但是不匹配 butterflyman、dragonfly man 等。</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">fly</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/.*fly$/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//自定义 404 路由 所有都没有匹配到 就是404</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="使用next-案例" tabindex="-1">使用next 案例 <a class="header-anchor" href="#使用next-案例" aria-label="Permalink to &quot;使用next 案例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入express模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建express实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;处理完毕下一个&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我来处理&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我来处理&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="获取请求参数的案例" tabindex="-1">获取请求参数的案例 <a class="header-anchor" href="#获取请求参数的案例" aria-label="Permalink to &quot;获取请求参数的案例&quot;">​</a></h2><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#56B6C2;">---</span></span>
<span class="line"><span style="color:#ABB2BF;">description: </span><span style="color:#E5C07B;">了解Express</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">js</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">路由是指将HTTP与相应的处理程序或控制器相关联的机制</span></span>
<span class="line"><span style="color:#ABB2BF;">tags:</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">服务端</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">express</span></span>
<span class="line"><span style="color:#56B6C2;">---</span></span>
<span class="line"><span style="color:#E06C75;">路由确定了应用程序如何响应客户端对特定端点的请求</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">包含一个</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">URI</span><span style="color:#ABB2BF;">（</span><span style="color:#E06C75;">或路径</span><span style="color:#ABB2BF;">）</span><span style="color:#E06C75;">和一个特定的</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">HTTP</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">请求方法</span><span style="color:#ABB2BF;">（</span><span style="color:#E5C07B;">GET</span><span style="color:#ABB2BF;">、</span><span style="color:#E5C07B;">POST</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">等</span><span style="color:#ABB2BF;">）。</span><span style="color:#E06C75;">每个路由可以具有一个或多个处理程序函数</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">这些函数在路由匹配时执行</span><span style="color:#ABB2BF;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">一个路由的组成有</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">请求方法</span><span style="color:#ABB2BF;"> ， </span><span style="color:#E06C75;">路径</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">和</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">回调函数</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">组成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">~~~</span><span style="color:#E06C75;">js</span></span>
<span class="line"><span style="color:#E06C75;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;">method</span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">，</span><span style="color:#E06C75;">callback</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="api-介绍-1" tabindex="-1">api 介绍 <a class="header-anchor" href="#api-介绍-1" aria-label="Permalink to &quot;api 介绍&quot;">​</a></h2><p><strong>method</strong> 可以包含多种方法例如 &#39;all&#39; | &#39;get&#39; | &#39;post&#39; | &#39;put&#39; | &#39;delete&#39; | &#39;patch&#39; | &#39;options&#39; | &#39;head&#39;</p><ul><li>all: 匹配所有 HTTP 方法。这个方法可以用于在任何请求方法下处理特定路由的共同逻辑。</li><li>get: 处理 HTTP GET 请求。</li><li>post: 处理 HTTP POST 请求。</li><li>put: 处理 HTTP PUT 请求。</li><li>delete: 处理 HTTP DELETE 请求。</li><li>patch: 处理 HTTP PATCH 请求。</li><li>options: 处理 HTTP OPTIONS 请求。</li><li>head: 处理 HTTP HEAD 请求。</li></ul><p><strong>path</strong> 路由参数格式 遵循<a href="https://www.npmjs.com/package/path-to-regexp" target="_blank" rel="noreferrer">path-to-regexp</a> ,常见一些格式可以是字符窜、正则表达式、数组</p><table><thead><tr><th>类型</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>字符串</td><td><code>&#39;/users/:id&#39;</code></td><td>表示一个包含动态参数的路由路径，如：<code>/users/123</code></td></tr><tr><td>正则表达式</td><td><code>/^\\/users\\/(\\d+)$/</code></td><td>使用正则表达式来匹配路由路径，如：匹配 <code>/users/123</code>，但不匹配 <code>/users/abc</code></td></tr><tr><td>数组（字符串）</td><td><code>[&#39;/users&#39;, &#39;/users/:id&#39;]</code></td><td>将多个路由路径的处理函数组合在一起，如：匹配 <code>/users</code> 和 <code>/users/123</code></td></tr><tr><td>数组（正则表达式）</td><td>[/^/users$/, /^/users/(\\d+)$/ ]</td><td>将多个正则表达式的处理函数组合在一起，如：匹配 <code>/users</code> 和 <code>/users/123</code>，但不匹配<code>/users/abc</code></td></tr></tbody></table><p><strong>callback</strong> 回调函数函数里面的参数有 ,请求对象（request对象）、响应对象（response对象）、next函数（在express中定义的用于执行下一个中间件的函数）</p><table><thead><tr><th>属性/方法</th><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>req.body</strong></td><td></td><td>包含 POST 请求体中提交的数据的对象。在使用中间件解析请求体后可用。</td></tr><tr><td><strong>req.cookies</strong></td><td></td><td>包含解析的 cookies 的对象。会自动解析 HTTP 请求中的 cookie 字段。</td></tr><tr><td><strong>req.get(header)</strong></td><td>header</td><td>获取指定请求头的值。如果请求头存在多个值，则返回第一个值。</td></tr><tr><td><strong>req.header(header)</strong></td><td>header</td><td>获取指定请求头的值。如果请求头存在多个值，则返回以逗号分隔的字符串。</td></tr><tr><td><strong>req.hostname</strong></td><td></td><td>返回主机名，如 &quot;example.com&quot;。</td></tr><tr><td><strong>req.ip</strong></td><td></td><td>返回客户端的 IP 地址。</td></tr><tr><td><strong>req.path</strong></td><td></td><td>返回 URL 的路径部分，如 &quot;/user&quot;。</td></tr><tr><td><strong>req.params</strong></td><td></td><td>包含以冒号标记的路由参数的对象。例如，在路由路径 /user/:id 中，如果一个请求的 URL 为/user/123，则 req.params 拥有一个属性 id，其值为 &quot;123&quot;。</td></tr><tr><td><strong>req.protocol</strong></td><td></td><td>返回请求协议，如 &quot;http&quot; 或 &quot;https&quot;。</td></tr><tr><td><strong>req.query</strong></td><td></td><td>包含 URL 查询参数的对象。例如，在 URL &quot;/user?id=123&quot; 中， req.query 拥有一个属性 id，其值为 &quot;123&quot;。</td></tr><tr><td><strong>req.secure</strong></td><td></td><td>如果请求通过 HTTPS 协议，则返回 true。</td></tr><tr><td><strong>req.url</strong></td><td></td><td>返回完整的 URL，包括查询参数和哈希部分。</td></tr><tr><td><strong>req.xhr</strong></td><td></td><td>如果请求通过 AJAX 发起，则返回 true。</td></tr></tbody></table><table><thead><tr><th>属性/方法</th><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong>res.append(field, value)</strong></td><td>field, value</td><td>在响应头中添加一个值。</td></tr><tr><td><strong>res.cookie(name, value, options)</strong></td><td>name, value, options</td><td>设置一个 HTTP cookie。</td></tr><tr><td><strong>res.clearCookie(name, options)</strong></td><td>name, options</td><td>删除一个 HTTP cookie。</td></tr><tr><td><strong>res.download(path, [filename], [options], [callback])</strong></td><td>path, filename, options, callback</td><td>提供文件下载。</td></tr><tr><td><strong>res.end([data], [encoding])</strong></td><td>data, encoding</td><td>结束响应流，并发送响应数据。如果提供了数据，则相当于同时调用 res.write() 和 res.end()。</td></tr><tr><td><strong>res.format(obj)</strong></td><td>obj</td><td>根据请求 Accept 头发送不同的响应格式。</td></tr><tr><td><strong>res.get(field)</strong></td><td>field</td><td>获取响应头中指定字段的值。如果响应头存在多个值，则返回第一个值。</td></tr><tr><td><strong>res.json([body])</strong></td><td>body</td><td>发送一个 JSON 格式的响应。</td></tr><tr><td><strong>res.jsonp([body])</strong></td><td>body</td><td>发送一个 JSONP 格式的响应。</td></tr><tr><td><strong>res.links(links)</strong></td><td>links</td><td>发送 Link 标头。</td></tr><tr><td><strong>res.location(url)</strong></td><td>url</td><td>设置 &quot;Location&quot; 响应头，将客户端重定向到指定的 URL。</td></tr><tr><td><strong>res.redirect([status,] path)</strong></td><td>status, path</td><td>将客户端重定向到指定的 URL。</td></tr><tr><td><strong>res.render(view [, locals] [, callback])</strong></td><td>view, locals, callback</td><td>通过模板引擎渲染模板，并发送响应。</td></tr><tr><td><strong>res.send([body])</strong></td><td>body</td><td>发送一个 HTTP 响应。针对不同类型的数据采用适当的响应头。</td></tr><tr><td><strong>res.sendFile(path [, options] [, fn])</strong></td><td>path, options, fn</td><td>发送文件。</td></tr><tr><td><strong>res.setHeader(name, value)</strong></td><td>name, value</td><td>设置响应头的值。</td></tr><tr><td><strong>res.status(code)</strong></td><td>code</td><td>设定 HTTP 响应状态码。</td></tr><tr><td><strong>res.type(type)</strong></td><td>type</td><td>设置 Content-Type 响应头的值。</td></tr></tbody></table><p>next() 是用于传递请求到下一个 middleware 或者路由处理函数中的一个函数，如果没有执行 next()，那么请求将被阻塞，无法响应客户端。如果传入了参数，则 Express 会认为这是一个错误，并交给内置的错误处理函数处理。如果在中间件函数中调用了 next(&quot;some error message&quot;)，那么这个请求会被 Express 视为发生了错误，并交给 Express 内置的 error handler 函数处理。</p><h2 id="基础案例-1" tabindex="-1">基础案例 <a class="header-anchor" href="#基础案例-1" aria-label="Permalink to &quot;基础案例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入express模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建express实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 定义路由 首页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello World!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建一个登录页</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/user/:id&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello &#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">params</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">id</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 获取请求头</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">head</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/head&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//匹配所有的请求方法 get post 啥都收到</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/search&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">11</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;1 秒钟为您找到相关结果约 100,000,000 个&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 此路由路径将匹配 butterfly 和 dragonfly，但是不匹配 butterflyman、dragonfly man 等。</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">/.</span><span style="color:#D19A66;">*</span><span style="color:#E06C75;">fly</span><span style="color:#C678DD;">$</span><span style="color:#E06C75;">/</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/.*fly$/&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">//自定义 404 路由 所有都没有匹配到 就是404</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">all</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;*&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="使用next-案例-1" tabindex="-1">使用next 案例 <a class="header-anchor" href="#使用next-案例-1" aria-label="Permalink to &quot;使用next 案例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入express模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建express实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;处理完毕下一个&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#61AFEF;">next</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fn1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">next</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我来处理&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;我来处理&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">fn1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="获取请求参数的案例-1" tabindex="-1">获取请求参数的案例 <a class="header-anchor" href="#获取请求参数的案例-1" aria-label="Permalink to &quot;获取请求参数的案例&quot;">​</a></h2><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 导入express模块</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 创建express实例</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">,</span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;"> ) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">method</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// GET</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// /</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">httpVersion</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 1.1</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">/** </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&#39;user-agent&#39;: &#39;PostmanRuntime/7.32.2&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		accept: &#39;*\\/*&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&#39;postman-token&#39;: &#39;8a1d3aeb-db2b-443a-8555-5bbac9db285f&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		host: &#39;localhost:3000&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		&#39;accept-encoding&#39;: &#39;gzip, deflate, br&#39;,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">		connection: &#39;keep-alive&#39;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	*/</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">headers</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//2. express 独有的获取报文的方式</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//获取查询字符串 根据连接拼接对象</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">query</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// {}</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">// 获取指定的请求头</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;host&#39;</span><span style="color:#ABB2BF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;你是谁&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://localhost:3000&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="设置响应" tabindex="-1">设置响应 <a class="header-anchor" href="#设置响应" aria-label="Permalink to &quot;设置响应&quot;">​</a></h2><p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//获取请求的路由规则</span></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/response&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">statusCode</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">404</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">statusMessage</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;xxx&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHeader</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;abc&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;xyz&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">write</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;响应体&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">end</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xxx&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//2. express 的响应方法</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">500</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//设置响应状态码</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xxx&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;yyy&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//设置响应头</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;中文响应不乱码&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//设置响应体</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//连贯操作</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">status</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">404</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">set</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;xxx&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;yyy&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;你好朋友&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#7F848E;font-style:italic;">//3. 其他响应</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">redirect</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;http://atguigu.com&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//重定向</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">download</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./package.json&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//下载响应</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//响应 JSON</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sendFile</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">__dirname</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;/home.html&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">//响应文件内容</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="链式调用" tabindex="-1">链式调用 <a class="header-anchor" href="#链式调用" aria-label="Permalink to &quot;链式调用&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">route</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/book&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Get a random book&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">post</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Add a book&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  })</span></span>
<span class="line"><span style="color:#ABB2BF;">  .</span><span style="color:#61AFEF;">put</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Update the book&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,40),e=[o];function t(r,c,B,y,i,d){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{A as __pageData,b as default};
