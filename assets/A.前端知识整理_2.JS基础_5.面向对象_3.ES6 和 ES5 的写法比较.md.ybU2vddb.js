import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const m=JSON.parse('{"title":"","description":"ES6 和 ES5 的写法比较","frontmatter":{"description":"ES6 和 ES5 的写法比较"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/5.面向对象/3.ES6 和 ES5 的写法比较.md","filePath":"A.前端知识整理/2.JS基础/5.面向对象/3.ES6 和 ES5 的写法比较.md","lastUpdated":1718635980000}'),p={name:"A.前端知识整理/2.JS基础/5.面向对象/3.ES6 和 ES5 的写法比较.md"},e=l(`<p>ES6 出现了class 语法糖更加方便让 js 可以创建对象</p><ol><li><strong>ES5 中类的写法：</strong></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> PersonType</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#C18401;">PersonType</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">sayName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> personType </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> PersonType</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;wang&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">personType.</span><span style="color:#4078F2;">sayName</span><span style="color:#383A42;">(); </span><span style="color:#A0A1A7;font-style:italic;">// wang</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;PersonType instanceof PersonType:&#39;</span><span style="color:#383A42;">, personType </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> PersonType</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;PersonType instanceof Object:&#39;</span><span style="color:#383A42;">, personType </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Object</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li><strong>ES6 中类的写法：</strong></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> PersonClass</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    sayName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> personClass </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> PersonClass</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;wang&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">personClass.</span><span style="color:#4078F2;">sayName</span><span style="color:#383A42;">(); </span><span style="color:#A0A1A7;font-style:italic;">// wang</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;PersonClass instanceof PersonClass:&#39;</span><span style="color:#383A42;">, personClass </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> PersonClass</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;PersonClass instanceof Object:&#39;</span><span style="color:#383A42;">, personClass </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Object</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;typeof PersonClass:&#39;</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> PersonClass); </span><span style="color:#A0A1A7;font-style:italic;">// function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="es6-和-es5-类的其他不同点" tabindex="-1">ES6 和 ES5 类的其他不同点 <a class="header-anchor" href="#es6-和-es5-类的其他不同点" aria-label="Permalink to &quot;ES6 和 ES5 类的其他不同点&quot;">​</a></h4><ol><li><p><strong>函数声明提升 vs. 类声明不可提升：</strong></p><ul><li>函数声明可以被提升，类声明类似 <code>let</code> 声明，不能被提升。</li><li>声明前使用类会导致报错。</li></ul></li><li><p><strong>自动严格模式：</strong></p><ul><li>类声明的所有代码自动运行在严格模式下。</li></ul></li><li><p><strong>方法不可枚举：</strong></p><ul><li>在 ES5 中需要手动指定方法不可枚举。</li><li>ES6 类方法默认不可枚举，挂在对象原型上。</li></ul></li><li><p><strong><code>[[Construct]]</code> 方法：</strong></p><ul><li>通过 <code>new</code> 调用不含 <code>[[Construct]]</code> 的方法会报错。例如箭头函数</li></ul></li><li><p><strong>构造函数必须使用 <code>new</code> 调用：</strong></p><ul><li>直接调用类的构造函数会抛出错误。</li></ul></li><li><p><strong>类名不可修改：</strong></p><ul><li>类声明结束后类名依然可以修改，但在类中修改会报错。</li></ul></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Foo</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        Foo </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;bar&quot;</span><span style="color:#383A42;">;  </span><span style="color:#A0A1A7;font-style:italic;">// 这里会抛出错误</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">Foo </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;bar&quot;</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 类声明结束后才可以修改类名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="代码优化与实现" tabindex="-1">代码优化与实现 <a class="header-anchor" href="#代码优化与实现" aria-label="Permalink to &quot;代码优化与实现&quot;">​</a></h4><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// ES5 版本的符合以上特性的类实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> PersonType2 </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;use strict&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#4078F2;"> PersonType2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (name) {</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;">.</span><span style="color:#E45649;">target</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;undefined&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">            throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Constructor must be called with new.&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">    Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(</span><span style="color:#C18401;">PersonType2</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;sayName&quot;</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:#4078F2;">        value</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;">.</span><span style="color:#E45649;">target</span><span style="color:#0184BC;"> !==</span><span style="color:#50A14F;"> &quot;undefined&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">                throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Method cannot be called with new.&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">            }</span></span>
<span class="line"><span style="color:#383A42;">            console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        },</span></span>
<span class="line"><span style="color:#E45649;">        enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span></span>
<span class="line"><span style="color:#383A42;">    });</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> PersonType2;</span></span>
<span class="line"><span style="color:#383A42;">}());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> PersonType2</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;wang&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// wang</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="访问器属性写法比较" tabindex="-1">访问器属性写法比较 <a class="header-anchor" href="#访问器属性写法比较" aria-label="Permalink to &quot;访问器属性写法比较&quot;">​</a></h4><ol><li><strong>ES5 实现：</strong></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> CustomHTMLElement </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;use strict&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#4078F2;"> CustomHTMLElement</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(element) {</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;">.</span><span style="color:#E45649;">target</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;undefined&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">            throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Constructor must be called with new.&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">element</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> element;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">    Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(</span><span style="color:#C18401;">CustomHTMLElement</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;html&quot;</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:#E45649;">        enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#4078F2;">        get</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">element</span><span style="color:#383A42;">.</span><span style="color:#E45649;">innerHTML</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">        },</span></span>
<span class="line"><span style="color:#4078F2;">        set</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(value) {</span></span>
<span class="line"><span style="color:#E45649;">            this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">element</span><span style="color:#383A42;">.</span><span style="color:#E45649;">innerHTML</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> value;</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    });</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> CustomHTMLElement;</span></span>
<span class="line"><span style="color:#383A42;">}());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="2"><li><strong>ES6 类实现：</strong></li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> CustomHTMLElement</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(element) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">element</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> element;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#0184BC;">    get</span><span style="color:#4078F2;"> html</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">element</span><span style="color:#383A42;">.</span><span style="color:#E45649;">innerHTML</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#0184BC;">    set</span><span style="color:#4078F2;"> html</span><span style="color:#383A42;">(value) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">element</span><span style="color:#383A42;">.</span><span style="color:#E45649;">innerHTML</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> value;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> descriptor </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(</span><span style="color:#C18401;">CustomHTMLElement</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;html&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;get&quot;</span><span style="color:#A626A4;"> in</span><span style="color:#383A42;"> descriptor); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;set&quot;</span><span style="color:#A626A4;"> in</span><span style="color:#383A42;"> descriptor); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(descriptor.</span><span style="color:#E45649;">enumerable</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="优化建议" tabindex="-1">优化建议 <a class="header-anchor" href="#优化建议" aria-label="Permalink to &quot;优化建议&quot;">​</a></h3><ol><li>在大型项目中，使用 ES6 类可以提高代码的可读性和可维护性。</li><li>尽量在类的构造函数中定义所有实例属性，避免属性混乱。</li><li>避免在类中直接修改类名，确保代码逻辑清晰。</li><li>使用 <code>Object.defineProperty</code> 管理 ES5 访问器属性，确保代码在未来的 ES6 迁移中更简便。</li></ol>`,17),o=[e];function r(c,t,i,y,A,b){return a(),n("div",null,o)}const d=s(p,[["render",r]]);export{m as __pageData,d as default};
