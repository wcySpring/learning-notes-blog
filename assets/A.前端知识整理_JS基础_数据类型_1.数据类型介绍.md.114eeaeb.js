import{_ as s,o as n,c as a,O as l}from"./chunks/framework.46ddca34.js";const B=JSON.parse('{"title":"js 数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"A.前端知识整理/JS基础/数据类型/1.数据类型介绍.md","filePath":"A.前端知识整理/JS基础/数据类型/1.数据类型介绍.md"}'),e={name:"A.前端知识整理/JS基础/数据类型/1.数据类型介绍.md"},p=l(`<p>[TOC]</p><h1 id="js-数据类型" tabindex="-1">js 数据类型 <a class="header-anchor" href="#js-数据类型" aria-label="Permalink to &quot;js 数据类型&quot;">​</a></h1><p>js 数据类型有8个,<strong>Undefined、Null、Boolean、Number、String、Object、BigInt、 Symbol</strong></p><div class="tip custom-block"><p class="custom-block-title">类型介绍</p><ul><li>Undefined,当值未定义的时候，例如函数<strong>没有明确返回值</strong>，和<strong>声明变量没有赋值</strong></li><li>Boolean,布尔类型<strong>true 和 false</strong></li><li>String, 字符串类型用<strong>单引号</strong>或者<strong>双引号</strong>表示</li><li>Number,数字类型<strong>整数和小数</strong></li><li>BigInt, 表示<strong>任意精度格式的整数</strong></li><li>Null,空类型,值只有一个:<strong>null</strong>,一个对象指向<strong>为空</strong>,此时<strong>可以赋值为null</strong></li><li>Object,用来表示对象</li><li>Symbol,可以被用作对象属性的唯一标识符,创建<strong>私有属性</strong></li></ul></div><p><strong>基本类型</strong>有7个 <strong>string、number、bigint、boolean、null、undefined、symbol</strong></p><p><strong>引用数据类型</strong>（Object）常见的引用数据类型包括:</p><ul><li><p><strong>Array - 数组对象</strong></p></li><li><p><strong>RegExp - 正则对象</strong></p></li><li><p><strong>Date - 日期对象</strong></p></li><li><p><strong>Math - 数学函数</strong></p></li><li><p><strong>Function - 函数对象</strong></p></li><li><p><strong>基本类型包装对象</strong>（除了 null 和 undefined 之外，所有基本类型都有其对应的包装对象）</p><ul><li><strong>String</strong>- 为字符串基本类型</li><li><strong>Number</strong>- 为数值基本类型</li><li><strong>BigInt</strong>- 为大整数基本类型</li><li><strong>Boolean</strong>- 为布尔基本类型</li><li><strong>Symbol</strong>- 为字面量基本类型等等</li></ul></li></ul><p>存储方式</p><ul><li><strong>基础类型</strong>存储在<strong>栈内存</strong>，被引用或拷贝时，会创建<strong>一个完全相等的变量</strong>；</li><li><strong>引用类型</strong>存储在<strong>堆内存</strong>，存储的<strong>是地址</strong>，多个引用<strong>指向同一个地址</strong>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>函数对象参数</strong> 传递是对象在 <strong>堆中的地址</strong></p></div><h2 id="null-和-undefined" tabindex="-1">null 和 undefined <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;null 和 undefined&quot;">​</a></h2><ol><li><p>首先当我们声明一个对象的变量的时候，如果没有给其赋值最好设置为<code>null</code>，例如：<code>var myObject = null</code>。</p></li><li><p>当使用双等号进行比较时，<code>null</code>和<code>undefined</code>比较(<code>null == undefined</code>)的结果为<code>true</code>，但不建议这样使用。</p></li><li><p><code>null</code>是JavaScript保留<strong>关键字</strong>，而<code>undefined</code>是全局<strong>对象的一个属性</strong>。</p></li></ol><h3 id="undefined" tabindex="-1">undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;undefined&quot;">​</a></h3><ol><li><code>Undefined </code>是一个很特殊的数据类型，它<strong>只有一个值</strong>，也就是 <code>undefined</code></li></ol><div class="tip custom-block"><p class="custom-block-title">产生undefined 的几种情况</p><ul><li>引用已声明但<strong>未初始化的变量</strong>；</li><li>引用<strong>未定义</strong>的对象属性；</li><li>执行<strong>无返回值</strong>函数；</li><li>执行 <strong>void 表达式</strong>；</li><li>全局常量 <strong>window.undefined 或 undefined</strong>。</li></ul></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {}</span></span>
<span class="line"><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">b</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#ABB2BF;">(() </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {})() </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#C678DD;">void</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">undefined</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>void 表达式来得到 undefined 值，因为这种方式既简并且比undefined长度少，不需要引用额外变量和属性在三目运算的时候表示不进行任何操作 <code>x&gt;0 &amp;&amp; x&lt;5 ? fn() : void 0;</code></p><div class="warning custom-block"><p class="custom-block-title">undefined说明</p><ul><li><p><code>undefined</code>,是全局作用域的一个变量,<code>undefined</code>的最初值就是原始数据类型<code>undefined</code>,是一个不能被配置（<strong>non-configurable</strong>），不能被重写（<strong>non-writable</strong>）的属性，同时需要注意，因此<strong>undefined并不是一个保留字</strong>。</p></li><li><p><code>undefined in window // true</code> 可以证明undefined 是 window 的一个属性</p></li><li><p><code>undefined</code>是全局对象的一个属性&#39;,因此在非全局作用域下可以重新赋值</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 打印 &#39;foo string&#39; PS：说明undefined的值和类型都已经改变</span></span>
<span class="line"><span style="color:#ABB2BF;">    (</span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">undefined</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;foo&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p>参考链接：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined" target="_blank" rel="noreferrer">undefined</a></p><h4 id="判断类型是否属于-undefined" tabindex="-1">判断类型是否属于 undefined <a class="header-anchor" href="#判断类型是否属于-undefined" aria-label="Permalink to &quot;判断类型是否属于 undefined&quot;">​</a></h4><ol><li>下面的三种形式都可以用来判断变量是否为undefined，但是<strong>推荐使用typeof的形式</strong>。原因是，<strong>第一种</strong>方式对于空字符串、数值0、null等情况也会判断为undefined，不仅仅针对undefined；<strong>第二种</strong>方式使用&#39;===&#39;进行判断，但是如果变量未定义会报错，导致程序停止运行。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 方式1</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#56B6C2;">!</span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式2</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">x</span><span style="color:#56B6C2;">===</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 方式2</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">x</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;undefined&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">  ...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="boolean-类型" tabindex="-1">Boolean 类型 <a class="header-anchor" href="#boolean-类型" aria-label="Permalink to &quot;Boolean 类型&quot;">​</a></h2><ol><li><p>布尔类型只有两个字面值:<code>true</code> 和 <code>false</code>, 并且<strong>区分大小写</strong>，只能<strong>小写</strong>表示</p></li><li><p>如果想将其他值转成布尔类型使用<code>Boolean()</code> 或者使用<code>!!</code></p></li><li><p>有时候可以看到一些言论说数字 <strong>1是true</strong> 或者 <strong>0是false</strong> 实际只是在 <strong>if 条件语句中</strong> 这些值自动执行了<code>Boolean()</code> 方法的转化为布尔类型</p></li><li><p>除了 <strong>undefined、 null、 false、 &#39;&#39;、 0（包括 +0，-0）、 NaN</strong> 转换出来是 <code>false</code>，其他都是 <code>true</code></p></li></ol><blockquote class="danger"><h5>常见的类型转化成boolean</h5></blockquote><table><thead><tr><th>数据类型</th><th>转化为true</th><th>转化成false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空字符</td><td>字符串length等于0(空字符)</td></tr><tr><td>Number</td><td>非0的数字(Infinity)包括无穷大</td><td>0 和 NaN</td></tr><tr><td>Object</td><td>任何对象包括 {} 对象中没值 /new Boolean(false)</td><td>null</td></tr><tr><td>Undefined</td><td>n/a（不使用的意思）</td><td>undefined</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">Infinity 是true</p><p>console.log(Boolean(Infinity)) // true</p></div><h2 id="number-类型" tabindex="-1">Number 类型 <a class="header-anchor" href="#number-类型" aria-label="Permalink to &quot;Number 类型&quot;">​</a></h2><ol><li>不同进制的数字表示：在JavaScript中，我们可以使用<strong>二进制、八进制、十进制、十六进制等不同进制来表示数字</strong>。在二进制中，遇到2就进一；在八进制( js中表现形式0开头 )，遇到8就进一(0-7)；在十进制中，遇到10就进一；在十六进制中( js表现形式0x开头 )，遇到f就进一((0-9)及(A-F),字母大小写不区分)。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">intNum</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 十进制</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">octalNumber1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">070</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 八进制</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">octalNumber2</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">080</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 错误的八进制只能在0-7中    </span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">hexNumber1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0xA</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 十六进制</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">intNum</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">octalNumber1</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">octalNumber2</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">hexNumber1</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">打印结果</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">56</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">80</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">进制问题 计算的时候会自动将<strong>八进制和十六进制转换成十进制</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">octalNumber1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">070</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 八进制</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">hexNumber1</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0xA</span><span style="color:#ABB2BF;">; </span><span style="color:#7F848E;font-style:italic;">// 十六进制</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">hexNumber1</span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;">octalNumber1</span><span style="color:#ABB2BF;">) </span><span style="color:#7F848E;font-style:italic;">// 八进制56 + 十六进制10</span></span>
<span class="line"><span style="color:#E06C75;">打印结果</span><span style="color:#ABB2BF;">：</span></span>
<span class="line"><span style="color:#D19A66;">66</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><ol start="2"><li><p>在JavaScript中数字类型分为<strong>整数类型</strong>和<strong>浮点数值类型</strong>：整数类型包括正整数、负整数和0，例如1、-2、0等；浮点数值类型表示带有小数部分的数字，例如3.14、-0.25等。</p></li><li><p>NaN：NaN是一个特殊的数字类型，表示“非数值”，当进行一些不合法的数学运算时，结果可能会得到NaN。例如，0/0的结果就是NaN。</p></li><li><p>无穷大/无穷小：在JavaScript中，我们可以使用Infinity和-Infinity来表示无穷大和无穷小。例如，1/0的结果是Infinity，-1/0的结果是-Infinity。</p></li><li><p>数字类型的最大值/最小值：JavaScript中数字类型的最大值可以使用<code>Number.MAX_VALUE</code>来表示，最小值可以使用<code>Number.MIN_VALUE</code>来表示。例如，console.log(Number.MAX_VALUE)可以输出数字类型的最大值，该值为1.7976931348623157e+308（科学计数法表示），使用<code>toLocaleString</code>方法对该值进行格式化输出可以得到更容易阅读的结果。同样，<code>Number.MIN_VALUE</code>表示数字类型的最小值，该值为5e-324（科学计数法表示）。</p></li></ol><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString" target="_blank" rel="noreferrer">toLocaleString 有意思</a></p><h3 id="浮点数值" tabindex="-1">浮点数值 <a class="header-anchor" href="#浮点数值" aria-label="Permalink to &quot;浮点数值&quot;">​</a></h3><ol><li><p><strong>浮点值内存空间是整数值的两</strong>倍，因此在特定情况下浮点值回被转成整数，例如：<code>var a = 1.0</code> 打印的值就是<strong>1</strong></p></li><li><p>可以使用科学计数法来表示一些数值,表现形式就是<strong>e前面的数值乘上后面10的次幂</strong>，例如：<code>var a = 3.12e5</code> 相当于 3.12 * 10^5 因此 a 的结果是<strong>312000</strong></p></li><li><p>想用科学计数法表示小数则可以写成：<code>var a = 3.12e-5</code> 打印结果<strong>0.0000312</strong></p></li><li><p>不要用<strong>一个小数去求证一个小数</strong> 例如 <code>0.1+0.2</code> 不等于0.3的 问题</p></li></ol><h3 id="nan-非数值-not-a-number" tabindex="-1">NaN -- 非数值(Not a Number) <a class="header-anchor" href="#nan-非数值-not-a-number" aria-label="Permalink to &quot;NaN -- 非数值(Not a  Number)&quot;">​</a></h3><ol><li><p><code>NaN</code> 不予任何值相等包括本身例如：<code>alert(NaN == NaN) // false</code></p></li><li><p>任何数值<strong>除以非数值</strong>都会返回<code>NaN</code></p></li><li><p>想判断当前是不是数字用<code>isNaN() </code>方法，不是数字返回<code>true</code>，是数字返回<code>false</code>，这种判断不准确因为<code>isNaN </code>接受的参数其实<strong>是数字</strong>，当然如果你传入了其他类型参数你发现他依然可以执行，在规范中的解释是&#39;<strong>Let num be ToNumber(number)</strong>.&#39; <a href="https://262.ecma-international.org/6.0/#sec-tonumber" target="_blank" rel="noreferrer">tonumber参考</a> 和 <a href="https://262.ecma-international.org/6.0/#sec-isnan-number" target="_blank" rel="noreferrer">isnan参考</a></p></li></ol><div class="tip custom-block"><p class="custom-block-title">判断一个值是不是数字</p><p><code>typeof value === &#39;number&#39; &amp;&amp; !isNaN(value)</code> ,因为 <strong>NaN 的typeof 是number</strong></p></div><ol start="4"><li><code>isNaN()</code> 也可以验证对象，但是会先调用对象的<code>valueOf()</code> 看返回的是不是一个数字，如果对象没有这个方法，则调用<code>toString()</code> 方法，如果都没有则为<code>true</code>,反之根据刚才两方法的返回值来做判断</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;w&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;10&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// false（true会被转成1）</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">([]) )</span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">([</span><span style="color:#D19A66;">123</span><span style="color:#ABB2BF;">]) )</span><span style="color:#7F848E;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">isNaN</span><span style="color:#ABB2BF;">([</span><span style="color:#98C379;">&#39;123&#39;</span><span style="color:#ABB2BF;">]))</span><span style="color:#7F848E;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="number-方法" tabindex="-1">Number() 方法 <a class="header-anchor" href="#number-方法" aria-label="Permalink to &quot;Number() 方法&quot;">​</a></h4><p>一般用于浏览器的隐式转换中都会默认调用<code>Number([val])</code>例如下面几种情况:</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>数学运算,举个例子 1+1 1-1，1-&#39;1&#39; 这一类的计算都是Number数字隐士转换，当然相对数字加字符例如1+&#39;1&#39; 结果为字符串&#39;11&#39; 并不是数字的转换，这类最通俗的记法加号可能是数学计算可能是字符串拼接，当数字和字符串的时候最简单方式就是统一作为拼接处理减少区分类型产生的可能性，相对来说减号只能做数学算法因此是转换Number 计算</p></li><li><p>isNaN检测，isNaN 接受的参数其实是数字，在规范中的解释是&#39;Let num be ToNumber(number).&#39;，这也好解释为什么isNaN(true) 为false 原本认为true 作为Boolean值应该是在isNaN下是true才对但实际isNaN(Number(true)),Number(true) 转换之后为 1 因此变成了isNaN(1) 因此为false</p></li><li><p>==比较</p></li></ul></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">070</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// 56</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">011</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// 9</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;070&#39;</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// 70</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">NaN</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;sss&quot;</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">undefined</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// NaN</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;">))  </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">Number</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;0xf&#39;</span><span style="color:#ABB2BF;">)) </span><span style="color:#7F848E;font-style:italic;">// 15</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>强制转换规则</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">1.隐士转换都是调用了 Number() 方法，因此只要知道Number() 针对其他类型的转换规则，即可针对这种得到转换</span></span>
<span class="line"><span style="color:#abb2bf;">结果</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.1.如果是字符串，遵循以下规则：如果字符串中只包含数字（或者是 0X / 0x 开头的十六进制数字字符串，</span></span>
<span class="line"><span style="color:#abb2bf;">允许包含正负号），则将其转换为十进制；如果字符串中包含有效的浮点格式，将其转换为浮点数值；</span></span>
<span class="line"><span style="color:#abb2bf;">如果是空字符串，将其转换为 0；如果不是以上格式的字符串，均返回 NaN；</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.2.如果是布尔值，true 和 false 分别被转换为 1 和 0；</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.3.如果是 null，返回 0，如果是 undefined，返回 NaN；</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.4.Symbol无法转换为数字，会报错：Uncaught TypeError: Cannot convert a Symbol value to a number</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;"> 1.5.BigInt去除&#39;n&#39;（超过安全数字的，会按照科学计数法处理）</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.6.把对象转换为数字：</span></span>
<span class="line"><span style="color:#abb2bf;">      先调用对象的 &#39;Symbol.toPrimitive&#39; 这个方法，如果不存在这个方法</span></span>
<span class="line"><span style="color:#abb2bf;">      再调用对象的 &#39;valueOf&#39; 获取原始值，如果获取的值不是原始值</span></span>
<span class="line"><span style="color:#abb2bf;">      再调用对象的 &#39;toString&#39; 把其变为字符串</span></span>
<span class="line"><span style="color:#abb2bf;">      最后再把字符串基于&#39;Number&#39;方法转换为数字</span></span>
<span class="line"><span style="color:#abb2bf;">注对&#39;Symbol.toPrimitive&#39; 说明</span></span>
<span class="line"><span style="color:#abb2bf;"> xxx[Symbol.toPrimitive](hint){}</span></span>
<span class="line"><span style="color:#abb2bf;">    // hint:&#39;number&#39; / &#39;string&#39; / &#39;default&#39;</span></span>
<span class="line"><span style="color:#abb2bf;">    //   + number：获取当前对象的数字类型的原始值</span></span>
<span class="line"><span style="color:#abb2bf;">    //   + string：获取当前对象的字符串类型的原始值</span></span>
<span class="line"><span style="color:#abb2bf;">    //   + default：根据操作获取数字或者字符串类型的原始值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li>举例说明1.6<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive" target="_blank" rel="noreferrer">Symbol.toPrimitive</a></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">1.转换 {} 为 Number ，const obj = {}  ，console.log(Number(obj)) 结果是NaN</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.1.先调用&#39;Symbol.toPrimitive&#39;console.log(obj[Symbol.toPrimitive]) 结果是undefined</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.2.调用console.log(obj.valueOf()) 结果是 {}</span></span>
<span class="line"><span style="color:#abb2bf;"> 1.3.调用 console.log(obj.toString()) 结果&#39;[object Object]&#39; 任何非数字字符串转换结果都是NaN，即相当于</span></span>
<span class="line"><span style="color:#abb2bf;">  实际执行为Number(&#39;[object Object]&#39;)</span></span>
<span class="line"><span style="color:#abb2bf;">2.转换数组为Number 为例依旧是经过下面几次得到结果</span></span>
<span class="line"><span style="color:#abb2bf;">    const arr = [10]</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(arr[Symbol.toPrimitive]); // undefined</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(arr.valueOf()); // [ 10 ]</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(arr.toString()); // &quot;10&quot;</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(Number(&quot;10&quot;)); // 10</span></span>
<span class="line"><span style="color:#abb2bf;">    // --------------分割 --------------------------------</span></span>
<span class="line"><span style="color:#abb2bf;">    const arr = [10, 20]</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(arr[Symbol.toPrimitive]) // undefined</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(arr.valueOf()) // [ 10, 20 ]</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(arr.toString()) // &quot;10,20&quot;</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(Number(&#39;10,20&#39;)) // NaN</span></span>
<span class="line"><span style="color:#abb2bf;">3.转换Date，当先查是否有&#39;Symbol.toPrimitive&#39; 属性方法此时发现有就开始调用，调用时候传参，如果想转换</span></span>
<span class="line"><span style="color:#abb2bf;"> 的为number类型，此时传参为&#39;number&#39; 即可</span></span>
<span class="line"><span style="color:#abb2bf;"> const date = new Date(2015, 1, 1)</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(date[Symbol.toPrimitive]) // 存在这个属性</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(date[Symbol.toPrimitive](&#39;number&#39;)) // 1422720000000</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">4.自定义对象重写&#39;Symbol.toPrimitive&#39; 方法</span></span>
<span class="line"><span style="color:#abb2bf;">    let obj = {</span></span>
<span class="line"><span style="color:#abb2bf;">        [Symbol.toPrimitive](hint) {</span></span>
<span class="line"><span style="color:#abb2bf;">            let result;</span></span>
<span class="line"><span style="color:#abb2bf;">            switch (hint) {</span></span>
<span class="line"><span style="color:#abb2bf;">                case &#39;number&#39;:</span></span>
<span class="line"><span style="color:#abb2bf;">                    result = 0;</span></span>
<span class="line"><span style="color:#abb2bf;">                    break;</span></span>
<span class="line"><span style="color:#abb2bf;">                case &#39;string&#39;:</span></span>
<span class="line"><span style="color:#abb2bf;">                    result = JSON.stringify(obj);</span></span>
<span class="line"><span style="color:#abb2bf;">                    break;</span></span>
<span class="line"><span style="color:#abb2bf;">                default:</span></span>
<span class="line"><span style="color:#abb2bf;">                    result = &quot;&quot;;</span></span>
<span class="line"><span style="color:#abb2bf;">            }</span></span>
<span class="line"><span style="color:#abb2bf;">            return result;</span></span>
<span class="line"><span style="color:#abb2bf;">        }</span></span>
<span class="line"><span style="color:#abb2bf;">    };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><blockquote class="danger"><h5>parseInt([val],[radix])</h5></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">1.如果是整数正常解析</span></span>
<span class="line"><span style="color:#abb2bf;">2.[val]值必须是一个字符串，如果不是则先转换为字符串；然后从字符串左侧第一个字符开始找，把找到的有效数字字</span></span>
<span class="line"><span style="color:#abb2bf;">符最后转换为数字「一个都没找到就是NaN」；遇到一个非有效数字字符，不论后面是否还有有效数字字符，都不再查</span></span>
<span class="line"><span style="color:#abb2bf;">找了</span></span>
<span class="line"><span style="color:#abb2bf;">3.[radix]的范围：2~36  不在这个范围内，最后结果都是NaN</span></span>
<span class="line"><span style="color:#abb2bf;">  [radix]不写或者写零：默认值是10「特殊：如果[val]字符串是以0x开始的，默认值是16」</span></span>
<span class="line"><span style="color:#abb2bf;">4.根据上面的结论所以可以得出为什么 &#39;parseInt&#39; 为什么可以把小数转成整数，例</span></span>
<span class="line"><span style="color:#abb2bf;">如1.1,从1开始找到后面发现点不是数字所以后面全丢弃得到 1</span></span>
<span class="line"><span style="color:#abb2bf;">5.字符串的情况下，十六进制是不识别的，八进制会把前缀0舍去，要注意和&#39;Number&#39;</span></span>
<span class="line"><span style="color:#abb2bf;">不同null 和 空字符都是 NaN</span></span>
<span class="line"><span style="color:#abb2bf;">6.想让parseInt 识别十六进制 和八进制字符串可以这么写parseInt(&#39;AF&#39;,16) 第二个参数表示</span></span>
<span class="line"><span style="color:#abb2bf;">几进制</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">console.log(parseInt(070))   // 56</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(&#39;-070   00&#39;)) // -70 </span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(null)) // NaN</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(&#39;AF&#39;)) // NaN</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(&#39;AF&#39;,16)) // 175</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(&#39;070&#39;,8)) // 56</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(&quot;g10&quot;));   //NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote class="danger"><h5>parseFloat([val])</h5></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">1.跟parseInt() 类似，只不过解释所有里面浮点类型，不同点没有第二个参数，无法把十六进制</span></span>
<span class="line"><span style="color:#abb2bf;">和八进制字符串转换，十六进制字符串统一被转成 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">console.log(parseFloat(&quot;10&quot;));//10</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(parseFloat(&quot;10afrswfdsf&quot;));//10</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(parseFloat(&quot;g10&quot;));//NaN</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(parseFloat(&quot;1fds0&quot;));//1</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(parseFloat(&quot;10.98&quot;));//10.98</span></span>
<span class="line"><span style="color:#abb2bf;"> console.log(parseFloat(&quot;10.98fdsfd&quot;));//10.98</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">// -----------------------</span></span>
<span class="line"><span style="color:#abb2bf;">//  在字符串中，找到所有符合二进制的内容 -&gt; &#39;10&#39; ，因为3不是二进制中的因此到3截至了</span></span>
<span class="line"><span style="color:#abb2bf;">//  把&#39;10&#39;看做二进制，转换为十进制？  如何把其它机制的值转换为十进制 “按权展开求和”</span></span>
<span class="line"><span style="color:#abb2bf;">//    个位数权重0  十位数权重1  百位数权重2 依次类推 现在10 其中十位是 1 十位的权重为1，对应的公式</span></span>
<span class="line"><span style="color:#abb2bf;">//    1*2^1 + 0*2^0 =&gt; 2  2的指数对应二进制当前位置1和0 前面乘法的是对应权重</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(parseInt(&#39;1030px&#39;, 2));</span></span>
<span class="line"><span style="color:#abb2bf;">// ---------------------</span></span>
<span class="line"><span style="color:#abb2bf;">let arr = [27.2, 0, &#39;0013&#39;, &#39;14px&#39;, 123];</span></span>
<span class="line"><span style="color:#abb2bf;">// 等到结果原因要知道map 数组回调方法是可接受三个参数，parseInt 默认是两个参数此时其实是</span></span>
<span class="line"><span style="color:#abb2bf;">// parseInt(number,index) 因此会对应位置进制转换</span></span>
<span class="line"><span style="color:#abb2bf;">arr = arr.map(parseInt); //  [27, NaN, 1, 1, 27]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><blockquote class="danger"><h5>判断是否为整数 -- Number.isInteger()</h5></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">1.&#39;Number.isInteger()&#39; 方法用来判断给定的参数是否为整数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>举个例子</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">Number.isInteger(0);         // true</span></span>
<span class="line"><span style="color:#abb2bf;">Number.isInteger(1);         // true</span></span>
<span class="line"><span style="color:#abb2bf;">Number.isInteger(-100000);   // true</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">Number.isInteger(0.1);       // false</span></span>
<span class="line"><span style="color:#abb2bf;">Number.isInteger(Math.PI);   // false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote class="danger"><h5><a href="https://blog.csdn.net/qq_37016928/article/details/80667247" target="_blank" rel="noreferrer">关于trunc方法说明</a>重点</h5></blockquote><blockquote class="danger"><h5>数字类型转化 总结</h5></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">1.总结:想要转整数用parseInt(),想要转小数用parseFloat()想要转数字:Number();</span></span>
<span class="line"><span style="color:#abb2bf;">要比上面的两种方式严格</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote class="info"><h2>字符串String</h2></blockquote><ol><li>toString()可以将所有的的数据都转换为字符串，调用自身 <code>toString</code> 方法,但是要排除 <code>null</code> 和 <code>undefined</code>，也就是<code>false</code> 和 <code>true</code> 例如 <code>true.toString()</code>，包含在内，也可以做进制转换例如：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">二进制：.toString(2);   </span></span>
<span class="line"><span style="color:#abb2bf;">    八进制：.toString(8);</span></span>
<span class="line"><span style="color:#abb2bf;">    十进制：.toString(10);</span></span>
<span class="line"><span style="color:#abb2bf;">    十六进制：.toString(16);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol><li><code>String()</code> 可以将 <code>null</code> 和 <code>undefined</code>转换为字符串，但是<strong>没法转进制字符串转换规则</strong> 2.1. 基本类型拿字符串包起来,举个例子<code>String(true)</code> =&gt; 结果 <code>true</code> 2.2. 对象则是调用 <strong>Symbol.toPrimitive -&gt; valueOf -&gt; toString</strong>， <code>Object.prototype.toString</code> 举个例子<code>String(new Object)</code> =&gt; <code>(new Object).toString()</code> =&gt;打印结果 <strong>[object Object]</strong></li></ol><blockquote class="info"><h2>Sysmbol 唯一值类型</h2></blockquote><ol><li><p>ES6 引入了一种新的原始数据类型 <code>Symbol</code>，表示<strong>独一无二</strong>的值。它是 JavaScript 语言的第七种数据类型</p></li><li><p><code>Symbol</code>函数前<strong>不能使用new命令</strong>，否则会报错。这是因为生成的 <strong>Symbol 是一个原始类型的值，不是对象</strong>。也就是说，由于 <code>Symbol </code>值不是对象，所以<strong>不能添加属性</strong>。基本上，它是<strong>一种类似于字符串的数据类型</strong>。</p></li><li><p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p></li><li><p>很多JS底层的处理机制，就是基于这些属性方法实现的 <code>Symbol.hasInstance\\Symbol.toStringTag\\Symbol.toPrimitive\\Symbol.iterator...</code></p></li></ol><blockquote class="danger"><h5>给对象属性设置sysmbol 值</h5></blockquote><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">const obj = {</span></span>
<span class="line"><span style="color:#abb2bf;">    name: &#39;w&#39;,</span></span>
<span class="line"><span style="color:#abb2bf;">    [Symbol()]: &#39;symbol&#39;,</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;">// 打印是undefined ，原因是因为当前打印的symbol key</span></span>
<span class="line"><span style="color:#abb2bf;">// 和声明的symbol 毫无关系</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(obj[Symbol()])</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">// ---------------想获取方法一------------------</span></span>
<span class="line"><span style="color:#abb2bf;">const key = Symbol()</span></span>
<span class="line"><span style="color:#abb2bf;">const obj = {</span></span>
<span class="line"><span style="color:#abb2bf;">    name: &#39;w&#39;,</span></span>
<span class="line"><span style="color:#abb2bf;">    [key]: &#39;symbol&#39;,</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;">// 想获取symbol 可以将symbol 作为统一的变量提取</span></span>
<span class="line"><span style="color:#abb2bf;">console.log(obj[key])</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">// ---------------想获取方法二------------------</span></span>
<span class="line"><span style="color:#abb2bf;">const obj = {</span></span>
<span class="line"><span style="color:#abb2bf;">    name: &#39;w&#39;,</span></span>
<span class="line"><span style="color:#abb2bf;">    [key]: &#39;symbol&#39;,</span></span>
<span class="line"><span style="color:#abb2bf;">}</span></span>
<span class="line"><span style="color:#abb2bf;">let symbolKeys = Object.getOwnPropertySymbols(obj); //获取当前对象所有Symbol类型的私有属性，结果数组</span></span>
<span class="line"><span style="color:#abb2bf;">symbolKeys.forEach(key =&gt; {</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(obj[key]);</span></span>
<span class="line"><span style="color:#abb2bf;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><blockquote class="info"><h2>BigInt</h2></blockquote><p>JS中在进行数学运算的时候，如果计算的数值超过<strong>最大/最小安全数字</strong>，计算出来的结果很可能是<strong>不准确</strong>，举个例子查看数字最大安全值<code>Number.MAX_SAFE_INTEGER</code>和 最小安全值的方法<code>Number.MIN_SAFE_INTEGER</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">const maxNumber = Number.MAX_SAFE_INTEGER</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(maxNumber)</span></span>
<span class="line"><span style="color:#abb2bf;">    </span></span>
<span class="line"><span style="color:#abb2bf;">    const add = maxNumber + 10</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(add)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>上面的打印结果在我的电脑如下：</li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">9007199254740991</span></span>
<span class="line"><span style="color:#abb2bf;">    9007199254741000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以发现当<strong>超过了最大精度时候计算开始出现错误</strong>，为了避免这种事情发生使用<code>BigInt</code>大数类型：<strong>数字后面加个n</strong>即使大数类型</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">const add = BigInt(maxNumber) + 10n</span></span>
<span class="line"><span style="color:#abb2bf;">    console.log(add)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>打印结果<strong>9007199254741001n</strong>当在数字后面加n时候即转换为大数类型</p><p>实际开发过程服务器端数据库存储，是有<strong>longInt</strong>类型，服务器返回给客户端的<strong>值超过安全数字</strong>的一般会将数字返回<strong>字符串作为参数返回</strong>，但是如果前端想要<strong>计算</strong>此时就不能是单纯转换为数字类，需要<code>BigInt</code>,当计算完成后在将转<strong>换成字符串给到后台</strong></p>`,78),o=[p];function r(c,t,b,i,u,d){return n(),a("div",null,o)}const m=s(e,[["render",r]]);export{B as __pageData,m as default};
