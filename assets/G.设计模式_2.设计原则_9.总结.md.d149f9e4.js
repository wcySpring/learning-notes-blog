import{_ as t,o as e,c as i,V as l}from"./chunks/framework.96db2af4.js";const f=JSON.parse('{"title":"","description":"设计模式总结","frontmatter":{"description":"设计模式总结"},"headers":[],"relativePath":"G.设计模式/2.设计原则/9.总结.md","filePath":"G.设计模式/2.设计原则/9.总结.md","lastUpdated":1690365650000}'),a={name:"G.设计模式/2.设计原则/9.总结.md"},o=l('<p>实际上，所有设计原则的目的都是提高代码的扩展性，实现高内聚、低耦合，只是手段（出发角度）不同：</p><ol><li>开闭原则是从理念本身出发</li><li>单一职责原则是从功能的角度出发；</li><li>迪米特原则从类之间的关系出发（不该依赖的不依赖，要依赖的最小必要依赖）；</li><li>接口隔离原则是从接口调用者的角度出发；</li><li>里式替换原则是从类的继承关系角度出发；</li><li>控制反转（依赖倒置）原则是从程序的控制权角度出发。 目的是提高代码可读性和可维护性从而间接提升代码可扩展性的设计原则有： 1. KISS、YAGNI 2. DRY ----- &gt; 目的都是实现高内聚低耦合，但是出发的角度不一样，单一职责是从自身提供的功能出发，迪米特法则是从关系出发，针对接口而非实现编程是使用者的角度，殊途同归。</li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>单一职责原则 适用对象: 模块，类，接口 白话：职责太多，容易被依赖（高耦合），以后维护，容易牵一发而动全身。（易维护性）</li><li>接口隔离原则 适用对象:接口，函数 白话：有些是不需要让你知道的，避免调用者需要了解的太多（最小知识原则）。有些是不能让你知道的，属于权限问题，需要隔离开来。</li><li>基于接口而非实现编程 适用对象: 接口，抽象类 白话：易维护和可扩展性问题。业务不稳定，于是依赖相对稳定的接口。</li><li>迪米特法则 适用对象:模块，类 白话：这个只是原则，不是说从谁的角度考虑吧。只要符合这个原则，就能做到高内聚、低耦合。</li></ol>',4),_=[o];function r(s,c,n,d,p,h){return e(),i("div",null,_)}const u=t(a,[["render",r]]);export{f as __pageData,u as default};
