import{_ as s,o as a,c as n,V as l}from"./chunks/framework.96db2af4.js";const b=JSON.parse('{"title":"","description":"js的面向对象","frontmatter":{"description":"js的面向对象"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/5.面向对象/4.js的面向对象.md","filePath":"A.前端知识整理/2.JS基础/5.面向对象/4.js的面向对象.md","lastUpdated":1718635980000}'),o={name:"A.前端知识整理/2.JS基础/5.面向对象/4.js的面向对象.md"},p=l(`<p>JavaScript 中的类与其他面向对象语言（如 Java、C++）不同，其核心依赖于原型链。这让初学者有时会感到困惑，因为在 JavaScript 中，类和方法的定义方式以及它们的行为存在许多独特之处。</p><p>JavaScript 要得到一个对象，<strong>不是通过实例化类，而是找到一个对象作为原型并克隆他</strong></p><p>在 JavaScript 中，类是通过原型链实现的。这意味着对象继承自另一个对象，而非直接从类继承。这个概念在 ES6 之前尤其明显，因为那时没有显式的 <code>class</code> 语法。来看一个 ES5 的示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;wang&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// &#39;wang&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">();          </span><span style="color:#7F848E;font-style:italic;">// &#39;wang&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在这个示例中，<code>Person</code> 是一个构造函数，通过 <code>new</code> 关键字调用时会创建一个新的实例，并且 <code>sayName</code> 方法定义在 <code>Person.prototype</code> 上，使得所有实例共享这一方法。</p><h3 id="es5-中的类和函数" tabindex="-1">ES5 中的类和函数 <a class="header-anchor" href="#es5-中的类和函数" aria-label="Permalink to &quot;ES5 中的类和函数&quot;">​</a></h3><p>在 ES5 中，函数可以充当类的角色，但它们在不同使用场景下的行为有所不同。首先来看一个例子：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">fPerson</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;wang1&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;wang&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用 fPerson 作为普通函数</span></span>
<span class="line"><span style="color:#61AFEF;">fPerson</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;wang1&#39;，在非严格模式下，this 绑定到了全局对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 调用 Person 作为构造函数</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;wang&#39;，this 绑定到新创建的实例上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>JavaScript 中没有传统编程语言的类的概念。在许多面向对象的编程语言中，类是用于创建对象的蓝图。然而，在 JavaScript 中，所谓的“类”只是因为语法上和其他具有类概念的语言类似而给人的错觉。实质上，JavaScript 是基于原型的。</p><p>原型模式不仅是一种设计模式，也是一种编程范式，JavaScript 采用的是原型编程的思想。传统的面向对象编程中，类是创建对象的基础。但在原型编程中，<strong>类并不是必须的</strong>。从设计角度来看，原型是一种创建对象的模式。在这种模式下，一个对象（原型对象）用于创建具有相同特性的其他对象。对象可以通过克隆（复制）其他对象来创建。一句话总结：<strong>在原型编程中，一个对象可以通过克隆另一个对象而存在</strong>。</p><h3 id="对象的继承关系" tabindex="-1">对象的继承关系 <a class="header-anchor" href="#对象的继承关系" aria-label="Permalink to &quot;对象的继承关系&quot;">​</a></h3><p>如果对象 A 是从对象 B 克隆出来的，那么 B 对象就是 A 对象的原型。在 JavaScript 中，<code>Object</code> 是所有对象的顶级原型。因此，可以理解为所有对象都“克隆”了一份 <code>Object</code> 对象。</p><h3 id="原型的引用" tabindex="-1">原型的引用 <a class="header-anchor" href="#原型的引用" aria-label="Permalink to &quot;原型的引用&quot;">​</a></h3><p>在 JavaScript 中，克隆一个对象并不是真正复制这个对象的所有内容，而是使新对象 <strong>持有对原型对象的引用</strong>。这意味着，新对象可以访问原型对象的所有属性和方法。JavaScript 中对象的这种克隆机制实现了高效的内存利用和对象共享。</p><h3 id="小结" tabindex="-1">小结： <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结：&quot;">​</a></h3><ol><li><strong>JavaScript 中并没有真正的类</strong>：所谓的类只是形式上的相似。</li><li><strong>原型模式</strong>：本质是通过克隆对象来实现对象创建。</li><li><strong>对象继承</strong>：一个对象可以从另一个对象克隆而来，克隆对象持有原型对象的引用。</li><li><strong>原型链</strong>：所有对象的顶级原型是 <code>Object</code>，对象通过原型链共享属性和方法。</li></ol><h3 id="call-和-construct-内部方法" tabindex="-1">[[Call]] 和 [[Construct]] 内部方法 <a class="header-anchor" href="#call-和-construct-内部方法" aria-label="Permalink to &quot;[[Call]] 和 [[Construct]] 内部方法&quot;">​</a></h3><p>出现上面说的函数在不同调用情况所表现的不同现象完全因为 JavaScript 函数有两个重要的内部方法：<code>[[Call]]</code> 和 <code>[[Construct]]</code>。</p><ul><li><strong><code>[[Call]]</code></strong>：函数以普通方式调用时执行。例如：<code>fPerson()</code>。</li><li><strong><code>[[Construct]]</code></strong>：函数以构造函数方式调用时执行。例如：<code>new Person()</code>。</li></ul><h4 id="区别与用法" tabindex="-1">区别与用法 <a class="header-anchor" href="#区别与用法" aria-label="Permalink to &quot;区别与用法&quot;">​</a></h4><ol><li><p><strong>普通函数调用</strong>：当你直接调用一个函数（如 <code>fPerson()</code>）时，JavaScript 执行 <code>[[Call]]</code>。在这种情况下，<code>this</code> 会绑定到全局对象（在非严格模式下）或者 <code>undefined</code>（在严格模式下）。</p></li><li><p><strong>构造函数调用</strong>：当你使用 <code>new</code> 关键字调用一个函数（如 <code>new Person()</code>）时，JavaScript 执行 <code>[[Construct]]</code>。这会创建一个新的对象并将 <code>this</code> 绑定到这个新创建的对象上。这个函数称为构造函数。</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 当作构造函数使用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">person</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Nicholas&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">29</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Software Engineer&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//&quot;Nicholas&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 作为普通函数调用</span></span>
<span class="line"><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;Greg&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">27</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Doctor&quot;</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 添加到 window</span></span>
<span class="line"><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//&quot;Greg&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在另一个对象的作用域中调用</span></span>
<span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">o</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Kristen&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">25</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;Nurse&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">(); </span><span style="color:#7F848E;font-style:italic;">//&quot;Kristen&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="扩展-使用-es6-类语法" tabindex="-1">扩展：使用 ES6 类语法 <a class="header-anchor" href="#扩展-使用-es6-类语法" aria-label="Permalink to &quot;扩展：使用 ES6 类语法&quot;">​</a></h3><p>从 ES6 开始，JavaScript 引入了 <code>class</code> 语法，使得定义类变得更加直观和简洁，但底层仍然基于原型链。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">per</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Person</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;wang&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">name</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// &#39;wang&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">per</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">sayName</span><span style="color:#ABB2BF;">();          </span><span style="color:#7F848E;font-style:italic;">// &#39;wang&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li><strong>JavaScript 类通过原型链实现</strong>：不同于大部分基于类的语言。</li><li><strong>函数两种调用方式</strong>： <ul><li>普通函数调用（<code>[[Call]]</code>）：执行函数体，<code>this</code> 绑定取决于调用方式。</li><li>构造函数调用（<code>[[Construct]]</code>）：创建实例并将 <code>this</code> 绑定到实例。</li></ul></li></ul><h2 id="object-既是一个构造函数也是一个对象" tabindex="-1">Object 既是一个构造函数也是一个对象 <a class="header-anchor" href="#object-既是一个构造函数也是一个对象" aria-label="Permalink to &quot;Object 既是一个构造函数也是一个对象&quot;">​</a></h2><p>在 JavaScript 中，<code>Object</code> 既是一个构造函数也是一个对象。我们可以通过以下几方面来理解这一点。</p><h4 id="_1-object-是一个对象" tabindex="-1">1. Object 是一个对象 <a class="header-anchor" href="#_1-object-是一个对象" aria-label="Permalink to &quot;1. Object 是一个对象&quot;">​</a></h4><p><code>Object</code> 本身是一个全局对象，你可以直接在代码中使用它。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Object</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;function&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-object-是一个构造函数" tabindex="-1">2. Object 是一个构造函数 <a class="header-anchor" href="#_2-object-是一个构造函数" aria-label="Permalink to &quot;2. Object 是一个构造函数&quot;">​</a></h4><p>除了作为对象，<code>Object</code> 也是构造函数，用来创建新的对象实例。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;object&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="类的定义" tabindex="-1">类的定义 <a class="header-anchor" href="#类的定义" aria-label="Permalink to &quot;类的定义&quot;">​</a></h3><p>在 JavaScript 中，“类”的定义是通过一个内部属性 <code>[[class]]</code> 来表示的。这是一个私有属性，普通开发者不能直接访问。</p><h4 id="内置类型的-class" tabindex="-1">内置类型的 [[class]] <a class="header-anchor" href="#内置类型的-class" aria-label="Permalink to &quot;内置类型的 [[class]]&quot;">​</a></h4><p>对于内置类型如 <code>Number</code>、<code>String</code>、<code>Date</code> 等，JavaScript 规范为它们指定了 <code>[[class]]</code> 属性以表示其类型。比如：</p><ul><li><code>Number</code> 的 <code>[[class]]</code> 是 <code>&quot;Number&quot;</code></li><li><code>String</code> 的 <code>[[class]]</code> 是 <code>&quot;String&quot;</code></li><li><code>Date</code> 的 <code>[[class]]</code> 是 <code>&quot;Date&quot;</code></li></ul><h4 id="访问-class-属性" tabindex="-1">访问 [[class]] 属性 <a class="header-anchor" href="#访问-class-属性" aria-label="Permalink to &quot;访问 [[class]] 属性&quot;">​</a></h4><p>JavaScript 提供了唯一访问 <code>[[class]]</code> 属性的方法，那就是通过 <code>Object.prototype.toString</code> 方法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">)); </span><span style="color:#7F848E;font-style:italic;">// &#39;[object Object]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="示例与解释" tabindex="-1">示例与解释 <a class="header-anchor" href="#示例与解释" aria-label="Permalink to &quot;示例与解释&quot;">​</a></h3><h4 id="基本用法与-typeof-运算符" tabindex="-1">基本用法与 typeof 运算符 <a class="header-anchor" href="#基本用法与-typeof-运算符" aria-label="Permalink to &quot;基本用法与 typeof 运算符&quot;">​</a></h4><ul><li><code>typeof Object</code> 返回 <code>&#39;function&#39;</code>，说明 <code>Object</code> 是一个函数。</li><li><code>typeof obj</code> 返回 <code>&#39;object&#39;</code>，说明 <code>obj</code> 是一个对象实例。</li></ul><p>以下代码展示了这一点：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">obj</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Object</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">obj</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">typeof</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">Object</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;function&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="使用-object-prototype-tostring-访问-class" tabindex="-1">使用 Object.prototype.toString 访问 [[class]] <a class="header-anchor" href="#使用-object-prototype-tostring-访问-class" aria-label="Permalink to &quot;使用 Object.prototype.toString 访问 [[class]]&quot;">​</a></h4><p><code>Object.prototype.toString</code> 方法可以用来查看对象的 <code>[[class]]</code> 属性。比如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">outTypeName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">data</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">type</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">typeName</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">prototype</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">toString</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">call</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">data</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">typeName</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">outTypeName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Object</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;[object Function]&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">outTypeName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">String</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;[object Function]&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">outTypeName</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">Number</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// &#39;[object Function]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上述示例中，<code>Object</code>、<code>String</code> 和 <code>Number</code> 都是内置构造函数，因此它们的 <code>[[class]]</code> 属性被表示为 <code>&#39;Function&#39;</code>。虽然我们平时称它们为内置对象，但是从底层实现来看，它们本质上是内置函数，可以用来创建特定类型的实例。</p><h4 id="分析输出结果" tabindex="-1">分析输出结果 <a class="header-anchor" href="#分析输出结果" aria-label="Permalink to &quot;分析输出结果&quot;">​</a></h4><ul><li><code>outTypeName(Object)</code> 的输出是 <code>[object Function]</code>。<code>Object</code> 是一个函数，因此返回 <code>[object Function]</code>。</li><li><code>outTypeName(String)</code> 和 <code>outTypeName(Number)</code> 的输出同理，它们也是内置构造函数。</li></ul><h3 id="小结-2" tabindex="-1">小结 <a class="header-anchor" href="#小结-2" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ol><li><code>Object</code> 是一个全局对象，同时也是一个构造函数，用于创建新的对象实例。</li><li>所有内置类型如 <code>Number</code>、<code>String</code> 和 <code>Date</code> 的 <code>[[class]]</code> 属性可以通过 <code>Object.prototype.toString</code> 方法访问。</li><li><code>Object.prototype.toString.call(data)</code> 是检查数据类型或内部 <code>[[class]]</code> 属性的一种可靠方法。</li></ol><p>使用Symbol.toStringTag 创建自己&#39;toString&#39; 返回类型</p><p>es6新增&#39;Symbol.toStringTag&#39;属性可以让自己定义的类也有属于自己的标签定义，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag" target="_blank" rel="noreferrer">参考文章</a></p>`,58),e=[p];function c(t,r,B,i,y,d){return a(),n("div",null,e)}const u=s(o,[["render",c]]);export{b as __pageData,u as default};
