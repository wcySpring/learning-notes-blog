import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const u=JSON.parse('{"title":"","description":"编写一个简单的服务端框架，具备的功能展示html页面，静态资源，展示文件上传和下载","frontmatter":{"description":"编写一个简单的服务端框架，具备的功能展示html页面，静态资源，展示文件上传和下载","tags":["服务端"]},"headers":[],"relativePath":"B.NodeJS学习/11.内置模块http/3.编写一个简易服务端框架.md","filePath":"B.NodeJS学习/11.内置模块http/3.编写一个简易服务端框架.md","lastUpdated":1683724366000}'),p={name:"B.NodeJS学习/11.内置模块http/3.编写一个简易服务端框架.md"},e=l(`<p>本文将介绍如何编写一个简单的服务端框架，具备以下功能：</p><ul><li>展示 HTML 页面</li><li>提供静态资源</li><li>支持文件上传和下载</li></ul><h2 id="编写的环境" tabindex="-1">编写的环境 <a class="header-anchor" href="#编写的环境" aria-label="Permalink to &quot;编写的环境&quot;">​</a></h2><ul><li>Nodejs</li><li>Nodejs http 模块</li><li>art-template 提供html 模板语法</li><li>TypeScript 编写</li></ul><h2 id="设计思路" tabindex="-1">设计思路 <a class="header-anchor" href="#设计思路" aria-label="Permalink to &quot;设计思路&quot;">​</a></h2><p>项目使用node http 模块作为服务端启动，当收到 对应的url 请求时候转发到对应处理的<strong>中间件函数</strong>，中间件函数用来定义可以处理的请求链接访问类型来进行逻辑处理的操作，这些处理包含 静态资源处理、文件上传下载的处理、页面展示的处理、页面使用模板语法的处理</p><h2 id="项目目录结构" tabindex="-1">项目目录结构 <a class="header-anchor" href="#项目目录结构" aria-label="Permalink to &quot;项目目录结构&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── nodemon.json</span></span>
<span class="line"><span>├── package-lock.json</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│   ├── index.ts</span></span>
<span class="line"><span>│   ├── middle</span></span>
<span class="line"><span>│   │   ├── aboutPage.ts</span></span>
<span class="line"><span>│   │   ├── errorPage.ts</span></span>
<span class="line"><span>│   │   ├── index.ts</span></span>
<span class="line"><span>│   │   └── indexPage.ts</span></span>
<span class="line"><span>│   ├── public</span></span>
<span class="line"><span>│   │   ├── css</span></span>
<span class="line"><span>│   │   │   └── index.css</span></span>
<span class="line"><span>│   │   └── image</span></span>
<span class="line"><span>│   │       └── 12.png</span></span>
<span class="line"><span>│   ├── router.ts</span></span>
<span class="line"><span>│   ├── setting</span></span>
<span class="line"><span>│   │   └── index.ts</span></span>
<span class="line"><span>│   ├── types</span></span>
<span class="line"><span>│   │   └── glohal.d.ts</span></span>
<span class="line"><span>│   └── utils</span></span>
<span class="line"><span>│       └── index.ts</span></span>
<span class="line"><span>├── views</span></span>
<span class="line"><span>│   ├── about.html</span></span>
<span class="line"><span>│   ├── error.html</span></span>
<span class="line"><span>│   └── index.html</span></span>
<span class="line"><span>└── tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="router-ts-路由和中间件匹配" tabindex="-1">router.ts 路由和中间件匹配 <a class="header-anchor" href="#router-ts-路由和中间件匹配" aria-label="Permalink to &quot;router.ts 路由和中间件匹配&quot;">​</a></h3><p>router.ts 作为路由文件作用是让路由和中间件进行匹配，做到分发的作用</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">indexPage</span><span style="color:#383A42;">, </span><span style="color:#E45649;">errorPage</span><span style="color:#383A42;">, </span><span style="color:#E45649;">aboutPage</span><span style="color:#383A42;"> } </span><span style="color:#A626A4;">from</span><span style="color:#50A14F;"> &#39;./middle&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">： 导出路由配置,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> default</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">	&#39;/&#39;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">		page</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;index.html&#39;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 渲染html</span></span>
<span class="line"><span style="color:#E45649;">		serverRequest</span><span style="color:#0184BC;">:</span><span style="color:#E45649;"> indexPage</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 中间层</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#50A14F;">	&#39;/about&#39;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">		page</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;about.html&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">		serverRequest</span><span style="color:#0184BC;">:</span><span style="color:#E45649;"> aboutPage</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#E45649;">	error</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">		page</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;error.html&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">		serverRequest</span><span style="color:#0184BC;">:</span><span style="color:#E45649;"> errorPage</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="index-ts-项目的入口" tabindex="-1">index.ts 项目的入口 <a class="header-anchor" href="#index-ts-项目的入口" aria-label="Permalink to &quot;index.ts 项目的入口&quot;">​</a></h2><p>http.createServer 创建了node 服务监听访问端口，用来获取请求信息，例如请求地址，用来将响应信息发送会用户客户端</p><p>在这里我们进行路由匹配，配置在 router.ts 存在的地址我们将调用他的 serverRequest 指定中间层的方法，如果访问过来的是我们指定暴露的静态文件资源的地址，将作为静态资源获取后返回，如果地址不存在或者程序异常将会分配到特定的页面1</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> http</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;http&#39;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> router</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;./router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">STATIC</span><span style="color:#383A42;"> } </span><span style="color:#A626A4;">from</span><span style="color:#50A14F;"> &#39;./setting&#39;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">renderStatic</span><span style="color:#383A42;"> } </span><span style="color:#A626A4;">from</span><span style="color:#50A14F;"> &#39;./utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> server</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> http.</span><span style="color:#4078F2;">createServer</span><span style="color:#383A42;">((req, res) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">	try</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">		const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">url</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> req</span></span>
<span class="line"><span style="color:#A626A4;">		if</span><span style="color:#383A42;"> (url </span><span style="color:#0184BC;">&amp;&amp;</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(router, url)) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 路由符合页面的存在</span></span>
<span class="line"><span style="color:#A626A4;">			const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">serverRequest</span><span style="color:#383A42;">, </span><span style="color:#986801;">page</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(router, url)</span></span>
<span class="line"><span style="color:#4078F2;">			serverRequest</span><span style="color:#383A42;">(req, res, page)</span></span>
<span class="line"><span style="color:#383A42;">		} </span><span style="color:#A626A4;">else</span><span style="color:#A626A4;"> if</span><span style="color:#383A42;"> (url </span><span style="color:#0184BC;">&amp;&amp;</span><span style="color:#383A42;"> url.</span><span style="color:#4078F2;">indexOf</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`/</span><span style="color:#CA1243;">\${</span><span style="color:#986801;">STATIC</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">/\`</span><span style="color:#383A42;">) </span><span style="color:#0184BC;">===</span><span style="color:#986801;"> 0</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 静态文件</span></span>
<span class="line"><span style="color:#4078F2;">			renderStatic</span><span style="color:#383A42;">(url).</span><span style="color:#4078F2;">pipe</span><span style="color:#383A42;">(res)</span></span>
<span class="line"><span style="color:#383A42;">		} </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 路由不存在的话 跳转错误页面</span></span>
<span class="line"><span style="color:#A626A4;">			const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">serverRequest</span><span style="color:#383A42;">, </span><span style="color:#986801;">page</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> router[</span><span style="color:#50A14F;">&#39;error&#39;</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#4078F2;">			serverRequest</span><span style="color:#383A42;">(req, res, page)</span></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#383A42;">	} </span><span style="color:#A626A4;">catch</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">		const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">serverRequest</span><span style="color:#383A42;">, </span><span style="color:#986801;">page</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> router[</span><span style="color:#50A14F;">&#39;error&#39;</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#4078F2;">		serverRequest</span><span style="color:#383A42;">(req, res, page)</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"><span style="color:#383A42;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">server.</span><span style="color:#4078F2;">listen</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;8080&#39;</span><span style="color:#383A42;">, () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;启动服务&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="middle-中间层" tabindex="-1">middle 中间层 <a class="header-anchor" href="#middle-中间层" aria-label="Permalink to &quot;middle 中间层&quot;">​</a></h2><p>中间层用来处理对应连接逻辑这里用 middle/aboutPage.ts 为例接受了 处理请求的对象 处理响应的对象 和 router.ts 中映射路由对应的html 的page字段作为参数</p><p>注意这里有个 renderArtTemplate 方法用来读取我们在 views 文件映射的 html 内容将最后读取完毕的内容回调后内容我们使用了 artTemplate 模板语法进行了代码渲染</p><p>再用处理响应的对象end 方法将内容发送到客户端</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> http</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;http&#39;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">renderArtTemplate</span><span style="color:#383A42;"> } </span><span style="color:#A626A4;">from</span><span style="color:#50A14F;"> &#39;../utils&#39;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> artTemplate</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;art-template&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">name</span><span style="color:#A0A1A7;font-style:italic;">：aboutPage</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">： url /about 路由映射</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#4078F2;"> aboutPage</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#383A42;">	req</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> http</span><span style="color:#383A42;">.</span><span style="color:#C18401;">IncomingMessage</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	res</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> http</span><span style="color:#383A42;">.</span><span style="color:#C18401;">ServerResponse</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	pageSrc</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">method</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> req</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(method)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">	if</span><span style="color:#383A42;"> (method </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;GET&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 将读取的html 写入到返回的响应</span></span>
<span class="line"><span style="color:#4078F2;">		renderArtTemplate</span><span style="color:#383A42;">(pageSrc, (data) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">			const</span><span style="color:#986801;"> html</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> artTemplate.</span><span style="color:#4078F2;">render</span><span style="color:#383A42;">(data.</span><span style="color:#4078F2;">toString</span><span style="color:#383A42;">(), {</span></span>
<span class="line"><span style="color:#E45649;">				name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;Jack&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">				age</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 18</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">				province</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;dl&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">				hobbies</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&#39;写代码&#39;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;唱歌&#39;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;打游戏&#39;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#E45649;">				title</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;个人信息&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">			})</span></span>
<span class="line"><span style="color:#383A42;">			res.</span><span style="color:#4078F2;">end</span><span style="color:#383A42;">(html)</span></span>
<span class="line"><span style="color:#383A42;">		})</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> default</span><span style="color:#E45649;"> aboutPage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="views-html-视图层" tabindex="-1">views html 视图层 <a class="header-anchor" href="#views-html-视图层" aria-label="Permalink to &quot;views html 视图层&quot;">​</a></h2><p>view/about.html 为例写好了 artTemplate 的模板语法，只要读取后渲染即可</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">&lt;!</span><span style="color:#E45649;">DOCTYPE</span><span style="color:#986801;"> html</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">&lt;</span><span style="color:#E45649;">html</span><span style="color:#986801;"> lang</span><span style="color:#383A42;">=</span><span style="color:#50A14F;">&quot;en&quot;</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">	&lt;</span><span style="color:#E45649;">head</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">meta</span><span style="color:#986801;"> charset</span><span style="color:#383A42;">=</span><span style="color:#50A14F;">&quot;UTF-8&quot;</span><span style="color:#383A42;"> /&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">title</span><span style="color:#383A42;">&gt;{{ title }}&lt;/</span><span style="color:#E45649;">title</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">	&lt;/</span><span style="color:#E45649;">head</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">	&lt;</span><span style="color:#E45649;">body</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">p</span><span style="color:#383A42;">&gt;大家好，我叫：{{ name }}&lt;/</span><span style="color:#E45649;">p</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">p</span><span style="color:#383A42;">&gt;我今年 {{ age }} 岁了&lt;/</span><span style="color:#E45649;">p</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">h1</span><span style="color:#383A42;">&gt;我来自 {{ province }}&lt;/</span><span style="color:#E45649;">h1</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">p</span><span style="color:#383A42;">&gt;我喜欢：{{each hobbies}} {{ $value }} {{/each}}&lt;/</span><span style="color:#E45649;">p</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;</span><span style="color:#E45649;">script</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#A626A4;">			var</span><span style="color:#383A42;"> foo </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;{{ title }}&#39;</span></span>
<span class="line"><span style="color:#383A42;">		&lt;/</span><span style="color:#E45649;">script</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">	&lt;/</span><span style="color:#E45649;">body</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">&lt;/</span><span style="color:#E45649;">html</span><span style="color:#383A42;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="utils-提供读取文件" tabindex="-1">utils 提供读取文件 <a class="header-anchor" href="#utils-提供读取文件" aria-label="Permalink to &quot;utils 提供读取文件&quot;">​</a></h2><p>提供了读取文件的形式，使用几种方式去读取指定的静态文件资源</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">createReadStream</span><span style="color:#383A42;">, </span><span style="color:#E45649;">readFileSync</span><span style="color:#383A42;"> } </span><span style="color:#A626A4;">from</span><span style="color:#50A14F;"> &#39;fs&#39;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> path</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;path&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">PAGE_VIEW_ROOT</span><span style="color:#383A42;">, </span><span style="color:#E45649;">ROOT</span><span style="color:#383A42;"> } </span><span style="color:#A626A4;">from</span><span style="color:#50A14F;"> &#39;../setting&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> rootPath</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> process.</span><span style="color:#4078F2;">cwd</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">name</span><span style="color:#A0A1A7;font-style:italic;">: renderHtml</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">: 读取html</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> renderHtml</span><span style="color:#383A42;">(src</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> fullPath</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> path.</span><span style="color:#4078F2;">join</span><span style="color:#383A42;">(rootPath, </span><span style="color:#986801;">ROOT</span><span style="color:#383A42;">, </span><span style="color:#986801;">PAGE_VIEW_ROOT</span><span style="color:#383A42;">, src)</span></span>
<span class="line"><span style="color:#A626A4;">	return</span><span style="color:#4078F2;"> createReadStream</span><span style="color:#383A42;">(fullPath)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">name</span><span style="color:#A0A1A7;font-style:italic;">: renderArtTemplate</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">: 读取html art 渲染</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> renderArtTemplate</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">	src</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#4078F2;">	callback</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> (data</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Buffer</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> data</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Buffer</span><span style="color:#383A42;">[] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> []</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> rh</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> renderHtml</span><span style="color:#383A42;">(src)</span></span>
<span class="line"><span style="color:#383A42;">	rh.</span><span style="color:#4078F2;">on</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;data&#39;</span><span style="color:#383A42;">, (chunk) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">		data.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(chunk as </span><span style="color:#C18401;">Buffer</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">	rh.</span><span style="color:#4078F2;">on</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;end&#39;</span><span style="color:#383A42;">, () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">		callback</span><span style="color:#383A42;">?.(Buffer.</span><span style="color:#4078F2;">concat</span><span style="color:#383A42;">(data))</span></span>
<span class="line"><span style="color:#383A42;">	})</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">name</span><span style="color:#A0A1A7;font-style:italic;">: asyncRenderArtTemplate</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">: 同步读取html</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#A626A4;"> async</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> asyncRenderArtTemplate</span><span style="color:#383A42;">(src</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> fullPath</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> path.</span><span style="color:#4078F2;">join</span><span style="color:#383A42;">(rootPath, </span><span style="color:#986801;">ROOT</span><span style="color:#383A42;">, </span><span style="color:#986801;">PAGE_VIEW_ROOT</span><span style="color:#383A42;">, src)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">	return</span><span style="color:#A626A4;"> await</span><span style="color:#4078F2;"> readFileSync</span><span style="color:#383A42;">(fullPath)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">name</span><span style="color:#A0A1A7;font-style:italic;">: renderStatic</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">: image css js 等其他静态文件</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> renderStatic</span><span style="color:#383A42;">(src</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> fullPath</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> path.</span><span style="color:#4078F2;">join</span><span style="color:#383A42;">(rootPath, </span><span style="color:#986801;">ROOT</span><span style="color:#383A42;">, src)</span></span>
<span class="line"><span style="color:#A626A4;">	return</span><span style="color:#4078F2;"> createReadStream</span><span style="color:#383A42;">(fullPath)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h2 id="关于文件上传和下载" tabindex="-1">关于文件上传和下载 <a class="header-anchor" href="#关于文件上传和下载" aria-label="Permalink to &quot;关于文件上传和下载&quot;">​</a></h2><ol><li><p>使用 FormData 格式进行上传和下载。这是最常用的方法，可以方便地将文件和其他表单数据一起发送到服务器，并且可以使用 fetch API 进行异步请求。</p></li><li><p>使用 Base64 编码或二进制数据将文件包含在 JSON 对象中进行上传和下载。这种方法可能会导致数据大小增加，并且可能需要更多的处理步骤。</p></li><li><p>对于下载，可以使用 Blob 格式来接收响应数据。在这种情况下，响应数据可以是任何格式，例如 JSON、XML 或文本。但是，如果要下载的文件非常大，可能需要使用流式传输来避免内存问题。</p></li><li><p>使用 WebSocket 进行上传和下载。这种方法可以实现实时上传和下载，并且可以在上传和下载过程中进行流式处理。</p></li><li><p>使用 WebRTC 进行上传和下载。这种方法可以实现点对点的文件传输，可以在不同的浏览器之间进行文件传输。但是，这种方法需要建立一个对等连接，并且需要处理 NAT 穿透等问题。</p></li></ol><p>这里我们选用的 FormData 形式来编写，在 view/upload 页面增加一个上传按钮页面，在路由映射位置 这个页面并且 增加一个接受上传逻辑的映射</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#50A14F;">	&#39;/upload&#39;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">		page</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;upload.html&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">		serverRequest</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> uploadPage,</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50A14F;">	&#39;/upload/file&#39;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// page: &#39;upload.html&#39;,</span></span>
<span class="line"><span style="color:#E45649;">		serverRequest</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> uploadFile,</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>主要看一下 middle/uploadFile 这个逻辑处理，通过获取请求头中的数据，将格式通过二进制读取出来，获取到了 fromData 格式，我们在这个规律的格式中获取图片信息写入到服务器中</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> http</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;http&#39;</span></span>
<span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> fs</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;fs&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">name</span><span style="color:#A0A1A7;font-style:italic;">：uploadPage</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">description</span><span style="color:#A0A1A7;font-style:italic;">： url /uploadPage 路由映射</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#4078F2;"> uploadFile</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#383A42;">	req</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> http</span><span style="color:#383A42;">.</span><span style="color:#C18401;">IncomingMessage</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	res</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> http</span><span style="color:#383A42;">.</span><span style="color:#C18401;">ServerResponse</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	pageSrc</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">method</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> req</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(method)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">	if</span><span style="color:#383A42;"> (method </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;POST&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 读取图片</span></span>
<span class="line"><span style="color:#383A42;">		req.</span><span style="color:#4078F2;">setEncoding</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;binary&#39;</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// 二进制将数据读取出来</span></span>
<span class="line"><span style="color:#A626A4;">		const</span><span style="color:#986801;"> boundary</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> req.</span><span style="color:#E45649;">headers</span><span style="color:#383A42;">[</span><span style="color:#50A14F;">&#39;content-type&#39;</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">			?.</span><span style="color:#4078F2;">split</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;; &#39;</span><span style="color:#383A42;">)[</span><span style="color:#986801;">1</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">			.</span><span style="color:#4078F2;">replace</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;boundary=&#39;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">		let</span><span style="color:#383A42;"> formData </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 获取请求 体中的数据</span></span>
<span class="line"><span style="color:#383A42;">		req.</span><span style="color:#4078F2;">on</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;data&#39;</span><span style="color:#383A42;">, (chunk) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">			formData </span><span style="color:#0184BC;">+=</span><span style="color:#383A42;"> chunk</span></span>
<span class="line"><span style="color:#383A42;">		})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 处理formdata 格式数据</span></span>
<span class="line"><span style="color:#383A42;">		req.</span><span style="color:#4078F2;">on</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;end&#39;</span><span style="color:#383A42;">, () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 1.截图从image/jpeg位置开始后面所有的数据</span></span>
<span class="line"><span style="color:#A626A4;">			const</span><span style="color:#986801;"> imgType</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;image/jpeg&#39;</span></span>
<span class="line"><span style="color:#A626A4;">			const</span><span style="color:#986801;"> imageTypePosition</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> formData.</span><span style="color:#4078F2;">indexOf</span><span style="color:#383A42;">(imgType) </span><span style="color:#0184BC;">+</span><span style="color:#383A42;"> imgType.</span><span style="color:#E45649;">length</span></span>
<span class="line"><span style="color:#A626A4;">			let</span><span style="color:#383A42;"> imageData </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> formData.</span><span style="color:#4078F2;">substring</span><span style="color:#383A42;">(imageTypePosition)</span></span>
<span class="line"><span style="color:#383A42;">			console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">123</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 2.imageData开始位置会有两个空格</span></span>
<span class="line"><span style="color:#383A42;">			imageData </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> imageData.</span><span style="color:#4078F2;">replace</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">/</span><span style="color:#A626A4;">^</span><span style="color:#986801;">\\s\\s</span><span style="color:#0184BC;">*/</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 3.替换最后的boundary</span></span>
<span class="line"><span style="color:#383A42;">			imageData </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> imageData.</span><span style="color:#4078F2;">substring</span><span style="color:#383A42;">(</span><span style="color:#986801;">0</span><span style="color:#383A42;">, imageData.</span><span style="color:#4078F2;">indexOf</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`--</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">boundary</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">--\`</span><span style="color:#383A42;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 4.将imageData的数据存储到文件中</span></span>
<span class="line"><span style="color:#383A42;">			fs.</span><span style="color:#4078F2;">writeFile</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;./bar.png&#39;</span><span style="color:#383A42;">, imageData, </span><span style="color:#50A14F;">&#39;binary&#39;</span><span style="color:#383A42;">, () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">				console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;文件存储成功&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">				res.</span><span style="color:#4078F2;">end</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;文件上传成功~&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">			})</span></span>
<span class="line"><span style="color:#383A42;">		})</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> default</span><span style="color:#E45649;"> uploadFile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h2 id="demo-地址" tabindex="-1">demo 地址 <a class="header-anchor" href="#demo-地址" aria-label="Permalink to &quot;demo 地址&quot;">​</a></h2><p><a href="https://github.com/wcySpring/simple-node-http-server/tree/main" target="_blank" rel="noreferrer">https://github.com/wcySpring/simple-node-http-server/tree/main</a></p>`,34),o=[e];function t(r,c,i,y,A,b){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{u as __pageData,d as default};
