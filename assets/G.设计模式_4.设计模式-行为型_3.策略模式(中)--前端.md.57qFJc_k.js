import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const m=JSON.parse('{"title":"","description":"策略模式 js 的理解","frontmatter":{"description":"策略模式 js 的理解"},"headers":[],"relativePath":"G.设计模式/4.设计模式-行为型/3.策略模式(中)--前端.md","filePath":"G.设计模式/4.设计模式-行为型/3.策略模式(中)--前端.md","lastUpdated":1690900495000}'),p={name:"G.设计模式/4.设计模式-行为型/3.策略模式(中)--前端.md"},e=l(`<p>js 和 java 不同作为弱类型语言，在使用策略模式上也整体思路是一样的，但是代码编写上略有不同</p><p>举个例子公司要发奖金，根据不同等级奖金比例也是不同，为了判断每一个人应该根据等级和等级所对应的倍数得到的奖金，写出下面的代码</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> calculateBonus</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (performanceLevel, salary) {</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;">(performanceLevel </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;s&#39;</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;">(performanceLevel </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;a&#39;</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;">(performanceLevel </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;b&#39;</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">calculateBonus</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;s&#39;</span><span style="color:#383A42;">,</span><span style="color:#986801;">2000</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#4078F2;">calculateBonus</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;a&#39;</span><span style="color:#383A42;">,</span><span style="color:#986801;">600</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>先按照js 函数式编程的思路去来做，只创建函数不创建类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> performanceS</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> performanceA</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> performanceB</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 2</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> calculateBonus</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( performanceLevel, salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> ( performanceLevel </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;S&#39;</span><span style="color:#383A42;"> ){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#4078F2;"> performanceS</span><span style="color:#383A42;">( salary );</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> ( performanceLevel </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;A&#39;</span><span style="color:#383A42;"> ){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#4078F2;"> performanceA</span><span style="color:#383A42;">( salary );</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> ( performanceLevel </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;B&#39;</span><span style="color:#383A42;"> ){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#4078F2;"> performanceB</span><span style="color:#383A42;">( salary );</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#4078F2;">calculateBonus</span><span style="color:#383A42;">( </span><span style="color:#50A14F;">&#39;A&#39;</span><span style="color:#383A42;"> , </span><span style="color:#986801;">10000</span><span style="color:#383A42;"> ); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：30000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>按照之前学过的策略模式 js 没有接口的概念 但是也先确定一下每个策略 统一使用调用的方法叫做calculate</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">        // 算法</span></span>
<span class="line"><span style="color:#A626A4;">	var</span><span style="color:#4078F2;"> performanceS</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){};</span></span>
<span class="line"><span style="color:#C18401;">	performanceS</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">calculate</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">		return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"><span style="color:#A626A4;">	var</span><span style="color:#4078F2;"> performanceA</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){};</span></span>
<span class="line"><span style="color:#C18401;">	performanceA</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">calculate</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">		return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"><span style="color:#A626A4;">	var</span><span style="color:#4078F2;"> performanceB</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){};</span></span>
<span class="line"><span style="color:#C18401;">	performanceB</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">calculate</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">		return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 2</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	//接下来定义奖金类Bonus：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">	var</span><span style="color:#4078F2;"> Bonus</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){</span></span>
<span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">salary</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> null</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 原始工资</span></span>
<span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">strategy</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> null</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 绩效等级对应的策略对象</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"><span style="color:#C18401;">	Bonus</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">setSalary</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">salary</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> salary; </span><span style="color:#A0A1A7;font-style:italic;">// 设置员工的原始工资</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"><span style="color:#C18401;">	Bonus</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">setStrategy</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( strategy ){</span></span>
<span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">strategy</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> strategy; </span><span style="color:#A0A1A7;font-style:italic;">// 设置员工绩效等级对应的策略对象</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"><span style="color:#C18401;">	Bonus</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getBonus</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){ </span><span style="color:#A0A1A7;font-style:italic;">// 取得奖金数额</span></span>
<span class="line"><span style="color:#A626A4;">		return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">strategy</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">calculate</span><span style="color:#383A42;">( </span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">salary</span><span style="color:#383A42;"> ); </span><span style="color:#A0A1A7;font-style:italic;">// 把计算奖金的操作委托给对应的策略对象</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">	var</span><span style="color:#383A42;"> bonus </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Bonus</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">	bonus.</span><span style="color:#4078F2;">setSalary</span><span style="color:#383A42;">( </span><span style="color:#986801;">10000</span><span style="color:#383A42;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">	bonus.</span><span style="color:#4078F2;">setStrategy</span><span style="color:#383A42;">( </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> performanceS</span><span style="color:#383A42;">() ); </span><span style="color:#A0A1A7;font-style:italic;">// 设置策略对象</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( bonus.</span><span style="color:#4078F2;">getBonus</span><span style="color:#383A42;">() ); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：40000</span></span>
<span class="line"><span style="color:#383A42;">	bonus.</span><span style="color:#4078F2;">setStrategy</span><span style="color:#383A42;">( </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> performanceA</span><span style="color:#383A42;">() ); </span><span style="color:#A0A1A7;font-style:italic;">// 设置策略对象</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( bonus.</span><span style="color:#4078F2;">getBonus</span><span style="color:#383A42;">() ); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：30000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="js-天然特性的策略模式" tabindex="-1">js 天然特性的策略模式 <a class="header-anchor" href="#js-天然特性的策略模式" aria-label="Permalink to &quot;js 天然特性的策略模式&quot;">​</a></h2><p>但实际上 js 是可以直接天然使用策略模式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">	var</span><span style="color:#383A42;"> strategies </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">		&quot;S&quot;</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">			return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">		},</span></span>
<span class="line"><span style="color:#50A14F;">		&quot;A&quot;</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">			return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">		},</span></span>
<span class="line"><span style="color:#50A14F;">		&quot;B&quot;</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">			return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 2</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"><span style="color:#A626A4;">	var</span><span style="color:#4078F2;"> calculateBonus</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( level, salary ){</span></span>
<span class="line"><span style="color:#A626A4;">		return</span><span style="color:#383A42;"> strategies[ level ]( salary );</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( </span><span style="color:#4078F2;">calculateBonus</span><span style="color:#383A42;">( </span><span style="color:#50A14F;">&#39;S&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">20000</span><span style="color:#383A42;"> ) ); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：80000</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( </span><span style="color:#4078F2;">calculateBonus</span><span style="color:#383A42;">( </span><span style="color:#50A14F;">&#39;A&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">10000</span><span style="color:#383A42;"> ) ); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：30000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="js-函数编程策略模式" tabindex="-1">js 函数编程策略模式 <a class="header-anchor" href="#js-函数编程策略模式" aria-label="Permalink to &quot;js 函数编程策略模式&quot;">​</a></h2><p>函数作为一等对象的概念。在某些编程语言中，函数可以像其他数据类型（如整数、字符串等）一样被当作值来使用。这意味着函数可以作为参数传递给其他函数，可以作为函数的返回值，可以存储在变量中，并且可以在运行时动态地创建和修改。这种能力使得函数可以更灵活地用于编程任务。</p><p>策略模式是一种设计模式，用于在运行时选择算法或行为。它允许在不修改现有代码的情况下定义一系列算法，并根据需要在运行时选择其中之一。这种模式通常通过将算法封装在独立的类中，并使用接口或抽象类定义它们之间的共同行为来实现。</p><p>Peter Norvig在他的演讲中指出，当使用支持函数作为一等对象的编程语言时，策略模式可以更为简洁和隐式地实现。这是因为函数作为一等对象的特性使得我们可以直接将不同的策略（即不同的函数）作为参数传递给其他函数，从而实现动态的算法选择。这种方式避免了显式地定义和实现多个类来表示不同的策略，从而简化了代码结构和维护。</p><p>因此，Peter Norvig的这句话强调了在支持函数作为一等对象的编程语言中，策略模式可以更加自然和隐式地实现，从而提供更高的灵活性和简洁性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> S</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">     return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">; </span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> A</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> B</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> salary </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 2</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> calculateBonus</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">( func, salary ){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#4078F2;"> func</span><span style="color:#383A42;">( salary );</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#4078F2;">calculateBonus</span><span style="color:#383A42;">( </span><span style="color:#986801;">S</span><span style="color:#383A42;">, </span><span style="color:#986801;">10000</span><span style="color:#383A42;">  );    </span><span style="color:#A0A1A7;font-style:italic;">// 输出：40000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>相比java的策略模式需要建立接口建立类来维护，js天然优势就是函数是一等公民，我们可以不用像java那么复杂来实现策略</p>`,18),o=[e];function r(c,t,y,i,A,b){return a(),n("div",null,o)}const d=s(p,[["render",r]]);export{m as __pageData,d as default};
