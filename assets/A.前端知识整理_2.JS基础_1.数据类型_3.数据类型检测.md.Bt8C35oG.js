import{_ as s,c as n,o as a,a8 as l,aa as p,ab as o}from"./chunks/framework.6k5lawSO.js";const f=JSON.parse(`{"title":"","description":"判断类型常用方法'typeof'、'instanceof'、'Object.prototype.toString'、'constructor'","frontmatter":{"description":"判断类型常用方法'typeof'、'instanceof'、'Object.prototype.toString'、'constructor'"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/1.数据类型/3.数据类型检测.md","filePath":"A.前端知识整理/2.JS基础/1.数据类型/3.数据类型检测.md","lastUpdated":1689587902000}`),e={name:"A.前端知识整理/2.JS基础/1.数据类型/3.数据类型检测.md"},t=l(`<p>判断类型常用方法typeof、instanceof、Object.prototype.toString、constructor</p><h2 id="使用typeof-区分数据类型" tabindex="-1">使用typeof 区分数据类型 <a class="header-anchor" href="#使用typeof-区分数据类型" aria-label="Permalink to &quot;使用typeof 区分数据类型&quot;">​</a></h2><ol><li><p>typeof 是一个<strong>操作符</strong>，不是方法因此使用的时候可以加括号，也可以省略</p></li><li><p>使用 typeof 运算符来进行检查,8 种基本数据类型，分别是 undefined、boolean、number、string、object、bigint 和 symbol。要注意的是typeof 运算符将 null 值归类为对象类型，并且可以检测是否是function（也是一种特殊的对象）</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> num </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 10</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> str </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;小白&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> flag </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> nll </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> null</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> undef;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> obj </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Object</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//是使用typeof 获取变量的类型</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> num); </span><span style="color:#A0A1A7;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> str); </span><span style="color:#A0A1A7;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> flag); </span><span style="color:#A0A1A7;font-style:italic;">// boolean</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> nll); </span><span style="color:#A0A1A7;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> undef); </span><span style="color:#A0A1A7;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> obj); </span><span style="color:#A0A1A7;font-style:italic;">// object</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> a); </span><span style="color:#A0A1A7;font-style:italic;">// function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 这个小案例</span></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> object </span><span style="color:#A0A1A7;font-style:italic;">// undefined 未定义 他就是一个变量名</span></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> Object </span><span style="color:#A0A1A7;font-style:italic;">// function 他是一个构造函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0184BC;">/</span><span style="color:#383A42;"> 除 Function 外的所有构造函数的类型都是 </span><span style="color:#50A14F;">&#39;object&#39;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> str </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> String</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;String&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> num </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Number</span><span style="color:#383A42;">(</span><span style="color:#986801;">100</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> str; </span><span style="color:#A0A1A7;font-style:italic;">// 返回 &#39;object&#39;</span></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> num; </span><span style="color:#A0A1A7;font-style:italic;">// 返回 &#39;object&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> func </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Function</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> func; </span><span style="color:#A0A1A7;font-style:italic;">// 返回 &#39;function&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><ol start="3"><li>typeof检测未被声明的变量，不会报错，结果是 &#39;undefined&#39;</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 报错 因为a变量没有声明</span></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">a) {</span></span>
<span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// typeof 即使对没声明的变量也不会报错</span></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">!==</span><span style="color:#50A14F;"> &#39;undefined&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">利用这个判断特性</p><p>针对这种特性在封装第三方包的时候就可以使用，在node 环境中是没有window 变量，相对的在浏览器环境中没有module和module.exports种cjs 导出变量，为了让我们封装的东西可以在两个环境运行就可以利用typeof 这种对未声明变量的不报错的性质做出下面形式的写法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 支持浏览器导入 &amp;&amp; 支持NODE端运行{CommonJS规范}</span></span>
<span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">	let</span><span style="color:#383A42;"> utils </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// ...</span></span>
<span class="line"><span style="color:#383A42;">	};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0184BC;">	/!* 暴露API *!/</span></span>
<span class="line"><span style="color:#A626A4;">	if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#E45649;"> module</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;object&quot;</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#0184BC;"> typeof</span><span style="color:#E45649;"> module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;object&quot;</span><span style="color:#383A42;">) </span><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> utils;</span></span>
<span class="line"><span style="color:#A626A4;">	if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> window </span><span style="color:#0184BC;">!==</span><span style="color:#50A14F;"> &quot;undefined&quot;</span><span style="color:#383A42;">) window.</span><span style="color:#E45649;">utils</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> utils;</span></span>
<span class="line"><span style="color:#383A42;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></div><div class="danger custom-block"><p class="custom-block-title">在es6的let 和 const 声明变量,前用typeof访问变量</p><p>在es6出现后 let const在其被声明之前对块中的 let 和 const 变量使用 typeof 会抛出一个 ReferenceError。块作用域变量在块的头部处于<strong>暂存死区</strong>，直至其被初始化，在这期间，访问变量将<strong>会引发错误</strong>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> undeclaredVariable </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;undefined&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    </span></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> newLetVariable; </span><span style="color:#A0A1A7;font-style:italic;">// ReferenceError</span></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> newConstVariable; </span><span style="color:#A0A1A7;font-style:italic;">// ReferenceError</span></span>
<span class="line"><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> newClass; </span><span style="color:#A0A1A7;font-style:italic;">// ReferenceError</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> newLetVariable;</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> newConstVariable</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;hello&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> newClass</span><span style="color:#383A42;">{};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><h3 id="typeof-null-object-最开始的设计bug" tabindex="-1">typeof null === &#39;object&#39; 最开始的设计bug <a class="header-anchor" href="#typeof-null-object-最开始的设计bug" aria-label="Permalink to &quot;typeof null === &#39;object&#39; 最开始的设计bug&quot;">​</a></h3><p>所有数据类型值，在计算机底层中都是以二进制形式存储的（64位），相对的二进制检测类型效率更高。在 JavaScript 中，不同数据类型对应 的二进制存储形式如下：</p><ul><li>000：对象</li><li>1：整数</li><li>010：浮点数</li><li>100：字符串</li><li>110：布尔</li><li>000000….：null</li></ul><p>可以发现，由于 null 的存储单元（全是 0）最后三位和 object 完全一样是 000，因此判断 null 也为 Object。但是内部识别为对象后，会再次检测这个对象是否有内部实现[[call]]。如果实现了，结果是 function，如果没有实现，结果是 object。</p><p><a href="https://segmentfault.com/q/1010000011846328" target="_blank" rel="noreferrer">参考链接1</a></p><p><a href="https://2ality.com/2013/10/typeof-null.html" target="_blank" rel="noreferrer">参考链接2</a></p><h3 id="判断是否是对象" tabindex="-1">判断是否是对象 <a class="header-anchor" href="#判断是否是对象" aria-label="Permalink to &quot;判断是否是对象&quot;">​</a></h3><ol><li>在function 也是对象但是typeof function 得到是function ，当想对是否为对象判断时候并且包含function 可以写成</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (val </span><span style="color:#0184BC;">!==</span><span style="color:#986801;"> null</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#0184BC;"> /</span><span style="color:#A626A4;">^</span><span style="color:#0184BC;">(object|function)</span><span style="color:#A626A4;">$</span><span style="color:#0184BC;">/</span><span style="color:#A626A4;">i</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">test</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> val)) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="instanceof-检测引用类型" tabindex="-1">instanceof -- 检测引用类型 <a class="header-anchor" href="#instanceof-检测引用类型" aria-label="Permalink to &quot;instanceof -- 检测引用类型&quot;">​</a></h2><ol><li><code>a instanceof B</code> a是不是B的实例，即a的原型链上是否有B</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">,</span><span style="color:#986801;">2</span><span style="color:#383A42;">,</span><span style="color:#986801;">3</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Array</span><span style="color:#383A42;">)  </span><span style="color:#A0A1A7;font-style:italic;">// 变量 A 是数组么 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>在<code>ECMAScript7</code>规范中的<code>instanceof</code>操作符则是根据 Symbol.hasInstance 进行，用于判断某对象是否为某构造器的实例。因此你可以用它自定义 instanceof 操作符在某个类上的行为。例如，对于数组构造函数上的Symbol.hasInstance属性，可以使用以下代码进行判断：</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> arr </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> []</span></span>
<span class="line"><span style="color:#383A42;">Array[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">](arr) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>下图可以看出，数组构造函数上的Symbol.hasInstance属性是继承自Function的prototype属性，<code>ECMAScript7</code>规范中，在<code>Function</code>的<code>prototype</code>属性上定义了<code>Symbol.hasInstance</code>属性</p><p><img src="`+p+`" alt=""></p><p>Symbol.hasInstance属性特点 writable/enumerable/configurable 都为false 不可写，不可枚举 不可修改属性即不可以属性赋值。下面代码进行验证，即使已经修改了返回值为false 但实际打印是true 证明不可修改的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">Array[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (){</span><span style="color:#A626A4;">return</span><span style="color:#986801;"> false</span><span style="color:#383A42;"> }</span></span>
<span class="line"><span style="color:#383A42;">arr </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Array</span><span style="color:#A0A1A7;font-style:italic;"> // true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因此，在普通的构造函数上直接修改Symbol.hasInstance属性是不行的。但是，可以使用class进行重写。例如，对于class Fn，可以使用以下代码进行重写：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Fn</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#383A42;">[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">](obj) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;OK&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (Array.</span><span style="color:#4078F2;">isArray</span><span style="color:#383A42;">(obj)) </span><span style="color:#A626A4;">return</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#986801;"> false</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> f </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> Fn;</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> arr </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> [</span><span style="color:#986801;">10</span><span style="color:#383A42;">, </span><span style="color:#986801;">20</span><span style="color:#383A42;">, </span><span style="color:#986801;">30</span><span style="color:#383A42;">];</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(f </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Fn</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;false</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(arr </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Fn</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Fn[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">](f)); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="3"><li>像上面案例可以知道Symbol.hasInstance是一个内置的Symbol值，它是一个用于定义对象的instanceof运算符的方法。在一个对象上使用instanceof运算符时，会调用该对象的Symbol.hasInstance方法，该方法接受一个参数，即要检测的值，如果该方法返回true，则表示该值是该对象的实例，否则返回false。<strong>如果在没有Symbol.hasInstance 属性浏览器上则会像以前一样去原型链上中</strong></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Array</span><span style="color:#383A42;">{}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">a </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> A</span><span style="color:#A0A1A7;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#383A42;">a </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Array</span><span style="color:#A0A1A7;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#383A42;">Array[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">](a) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#986801;">A</span><span style="color:#383A42;">[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">](a) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#986801;">A</span><span style="color:#383A42;">[Symbol.</span><span style="color:#C18401;">hasInstance</span><span style="color:#383A42;">](</span><span style="color:#A626A4;">new</span><span style="color:#383A42;"> Map) </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="4"><li>instanceof 不能检测原始值类型的值，下面案例即使 1 确实是Number 类型但不是Number对象的实例，因此使用instanceof操作符检测时会返回false。如果使用new Number(1)创建一个Number对象，那么该对象就是Number构造函数的实例，使用instanceof操作符检测时会返回true。</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Number</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Number</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#A626A4;"> instanceof</span><span style="color:#C18401;"> Number</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在JavaScript中，使用instanceof操作符检测一个对象是否是某个构造函数的实例时，实际上是调用了一个名为InstanceofOperator的抽象操作。该操作的步骤如下：</p><ul><li>如果C的数据类型不是对象，抛出一个类型错误的异常。</li><li>如果O的数据类型不是对象，返回false。</li><li>如果O的原型链上存在C.prototype，返回true。</li><li>递归地检查O的原型链上的下一个原型对象，重复步骤3和步骤4，直到原型链结束或找到C.prototype为止。 因此，如果C不是一个对象，而是一个原始值类型的值，那么在第一步就会抛出一个类型错误的异常。例如，如果我们使用1 instanceof Number进行检测，由于Number是一个构造函数，而1是一个数字类型的值，不是一个对象，因此会抛出一个类型错误的异常。</li></ul></div><p><a href="https://segmentfault.com/a/1190000037689078" target="_blank" rel="noreferrer">参考ECMAScript7规范中的instanceof操作符</a></p><h3 id="实现一个instanceof" tabindex="-1">实现一个instanceof <a class="header-anchor" href="#实现一个instanceof" aria-label="Permalink to &quot;实现一个instanceof&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> myInstanceof</span><span style="color:#383A42;">(left, right) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 这里先用typeof来判断基础数据类型，如果是，直接返回false</span></span>
<span class="line"><span style="color:#A626A4;">  if</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> left </span><span style="color:#0184BC;">!==</span><span style="color:#50A14F;"> &#39;object&#39;</span><span style="color:#0184BC;"> ||</span><span style="color:#383A42;"> left </span><span style="color:#0184BC;">===</span><span style="color:#986801;"> null</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">return</span><span style="color:#986801;"> false</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // getProtypeOf是Object对象自带的API，能够拿到参数的原型对象</span></span>
<span class="line"><span style="color:#A626A4;">  let</span><span style="color:#383A42;"> proto </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">(left);</span></span>
<span class="line"><span style="color:#A626A4;">  while</span><span style="color:#383A42;">(</span><span style="color:#986801;">true</span><span style="color:#383A42;">) {                  </span><span style="color:#A0A1A7;font-style:italic;">//循环往下寻找，直到找到相同的原型对象</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;">(proto </span><span style="color:#0184BC;">===</span><span style="color:#986801;"> null</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">return</span><span style="color:#986801;"> false</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;">(proto </span><span style="color:#0184BC;">===</span><span style="color:#C18401;"> right</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">return</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span><span style="color:#A0A1A7;font-style:italic;">//找到相同原型对象，返回true</span></span>
<span class="line"><span style="color:#383A42;">    proto </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">getPrototypeof</span><span style="color:#383A42;">(proto);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 验证一下自己实现的myInstanceof是否OK</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">myInstanceof</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Number</span><span style="color:#383A42;">(</span><span style="color:#986801;">123</span><span style="color:#383A42;">), Number));    </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">myInstanceof</span><span style="color:#383A42;">(</span><span style="color:#986801;">123</span><span style="color:#383A42;">, Number));                </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="object-prototype-tostring" tabindex="-1">Object.prototype.toString <a class="header-anchor" href="#object-prototype-tostring" aria-label="Permalink to &quot;Object.prototype.toString&quot;">​</a></h2><ol><li><p>toString()是Object的原型方法，调用该方法可以统一返回格式为&#39;[object Xxx]&#39;的字符串，其中Xxx就是对象的类型。对于Object对象，直接调用toString()就能返回&#39;[object Object]&#39;，其他对象需要通过call来调用。</p></li><li><p>这是JS中唯一一个检测数据类型没有任何瑕疵的方法，可以检测内置类型，例如&quot;[object Number/String/Boolen/Null/Undefined/Symbol/BigInt/Object/Function/Array/RegExp/Date/Math/Error...]&quot;。</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">toString</span><span style="color:#383A42;">({})       </span><span style="color:#A0A1A7;font-style:italic;">// &quot;[object Object]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">({})  </span><span style="color:#A0A1A7;font-style:italic;">// 同上结果，加上call也ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">)    </span><span style="color:#A0A1A7;font-style:italic;">// &quot;[object Number]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;1&#39;</span><span style="color:#383A42;">)  </span><span style="color:#A0A1A7;font-style:italic;">// &quot;[object String]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#986801;">true</span><span style="color:#383A42;">)  </span><span style="color:#A0A1A7;font-style:italic;">// &quot;[object Boolean]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(){})  </span><span style="color:#A0A1A7;font-style:italic;">// &quot;[object Function]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">)   </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object Null]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#986801;">undefined</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object Undefined]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">/123/</span><span style="color:#A626A4;">g</span><span style="color:#383A42;">)    </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object RegExp]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">()) </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object Date]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">([])       </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object Array]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(document)  </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object HTMLDocument]&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(window)   </span><span style="color:#A0A1A7;font-style:italic;">//&quot;[object Window]&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol start="3"><li>检测返回值遵循规则，一般都是返回当前实例所属的构造函数信息。但是如果实例对象拥有&#39;Symbol.toStringTag&#39;属性，属性值就是返回值。例如，Math[Symbol.toStringTag]=&quot;Math&quot;，则Object.prototype.toString.call(Math)返回&quot;[object Math]&quot;。</li></ol><p>如果没有重写&#39;Symbol.toStringTag&#39;，则返回值为&quot;[object Object]&quot;。如果重写了&#39;Symbol.toStringTag&#39;，则返回值为&quot;[object Xxx]&quot;，其中Xxx为重写的属性值。</p><p>示例代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 没有重写&#39;Symbol.toStringTag&#39;</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Fn</span><span style="color:#383A42;"> {}</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> f </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> Fn;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(f)); </span><span style="color:#A0A1A7;font-style:italic;">// [object Object]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 重写&#39;Symbol.toStringTag&#39;</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Fn</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  [Symbol.</span><span style="color:#C18401;">toStringTag</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;Fn&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> f </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> Fn;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(f)); </span><span style="color:#A0A1A7;font-style:italic;">// [object Fn]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="typeof-和-object-prototype-tostring-搭配来判断数据类型" tabindex="-1">typeof 和 Object.prototype.toString 搭配来判断数据类型 <a class="header-anchor" href="#typeof-和-object-prototype-tostring-搭配来判断数据类型" aria-label="Permalink to &quot;typeof 和 Object.prototype.toString 搭配来判断数据类型&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> getType</span><span style="color:#383A42;">(obj){</span></span>
<span class="line"><span style="color:#A626A4;">    let</span><span style="color:#383A42;"> type  </span><span style="color:#0184BC;">=</span><span style="color:#0184BC;"> typeof</span><span style="color:#383A42;"> obj;</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (type </span><span style="color:#0184BC;">!==</span><span style="color:#50A14F;"> &quot;object&quot;</span><span style="color:#383A42;">) {    </span><span style="color:#A0A1A7;font-style:italic;">// 先进行typeof判断，如果是基础数据类型，直接返回</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#383A42;"> type;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 对于typeof返回结果是object的，再进行如下的判断，正则返回结果或者用slice(8,-1)来截取获得</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#C18401;"> Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(obj).</span><span style="color:#4078F2;">replace</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">/</span><span style="color:#A626A4;">^</span><span style="color:#0184BC;">\\[object (</span><span style="color:#986801;">\\S</span><span style="color:#0184BC;">+)\\]</span><span style="color:#A626A4;">$</span><span style="color:#0184BC;">/</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;$1&#39;</span><span style="color:#383A42;">);  </span><span style="color:#A0A1A7;font-style:italic;">// 注意正则中间有个空</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">  </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  /* 代码验证，需要注意大小写，类型首字母大写就是toString 小写就是typeof */</span><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">([])     </span><span style="color:#A0A1A7;font-style:italic;">// &quot;Array&quot; typeof []是object，因此toString返回</span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;123&#39;</span><span style="color:#383A42;">)  </span><span style="color:#A0A1A7;font-style:italic;">// &quot;string&quot; typeof 直接返回 </span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">(window) </span><span style="color:#A0A1A7;font-style:italic;">// &quot;Window&quot; toString返回</span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">)   </span><span style="color:#A0A1A7;font-style:italic;">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">(</span><span style="color:#986801;">undefined</span><span style="color:#383A42;">)   </span><span style="color:#A0A1A7;font-style:italic;">// &quot;undefined&quot; typeof 直接返回</span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">()            </span><span style="color:#A0A1A7;font-style:italic;">// &quot;undefined&quot; typeof 直接返回</span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(){}) </span><span style="color:#A0A1A7;font-style:italic;">// &quot;function&quot; typeof能判断，因此首字母小写</span></span>
<span class="line"><span style="color:#4078F2;">  getType</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">/123/</span><span style="color:#A626A4;">g</span><span style="color:#383A42;">)      </span><span style="color:#A0A1A7;font-style:italic;">//&quot;RegExp&quot; toString返回</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="object-tostring-call-检测会报错" tabindex="-1">Object.toString.call 检测会报错 <a class="header-anchor" href="#object-tostring-call-检测会报错" aria-label="Permalink to &quot;Object.toString.call 检测会报错&quot;">​</a></h3><p>如果当你使用<strong>Object.toString.call</strong> 来判断类型你会发现，会报错，其中提示内容是报错内容如下<strong>Function.prototype.toString requires that &#39;this&#39; be a Function</strong></p><p>内置的Object构造函数是一个 Function（就像所有的原生构造函数一样），所以它在它自己的原型属性之前从&#39;Function.prototype&#39;继承 <strong>Object[[Prototype]] -&gt; Function.prototype -&gt; Object.prototype -&gt; null</strong></p><p>所以实际调用的是<strong>Function.prototype.toString</strong>，可以通过查看 下面的两个链接(<a href="http://www.ecma-international.org/ecma-262/5.1/index.html#sec-15.3.4" target="_blank" rel="noreferrer">ecma-262</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/toString" target="_blank" rel="noreferrer">Mdn-toString</a> <a href="https://stackoverflow.com/questions/26333923/different-between-object-tostring-and-object-prototype-tostring" target="_blank" rel="noreferrer">阶段参考</a>)</p><p>可以知道若 &#39;this&#39; 不是 Function 对象，则 toString() 方法将抛出 TypeError (&quot;Function.prototype.toString called on incompatible object&quot;) 异常</p><p><img src="`+o+`" alt=""></p><p>在看下面的例子更好的理解,Object.toString(构造函数也是对象，虽然他的typeof 是function) 调用的是函数上toString，而真正能进行类型验证是对象上的toString。就近原则会先找函数上的现在来说</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> Object); </span><span style="color:#A0A1A7;font-style:italic;">// function</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#C18401;"> Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Object.toString.call([]) // 报错</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> a</span><span style="color:#383A42;"> () { }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Object.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(a) </span><span style="color:#A0A1A7;font-style:italic;">// 不报错因为a 是function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但如果我们此时是一个普通的对象你会发现，可以成功查询类型原因也是 a 是通过Object 创建的实列，此时a.toString 找到就是&#39;Object.prototype.toString&#39; 达到了想要的效果</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;">  a </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Object</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">a.</span><span style="color:#E45649;">toString</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// &#39;[object Number]&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="constructor" tabindex="-1">constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;constructor&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> array</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> []</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( array.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> num</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> 1</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(num.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">打印结果</span></span>
<span class="line"><span style="color:#383A42;">ƒ </span><span style="color:#4078F2;">Array</span><span style="color:#383A42;">() { [native code] }</span></span>
<span class="line"><span style="color:#383A42;">ƒ </span><span style="color:#4078F2;">Number</span><span style="color:#383A42;">() { [native code] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> [];</span></span>
<span class="line"><span style="color:#383A42;">a.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> Array;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="如何选择数据类型检测" tabindex="-1">如何选择数据类型检测 <a class="header-anchor" href="#如何选择数据类型检测" aria-label="Permalink to &quot;如何选择数据类型检测&quot;">​</a></h2><ol><li>typeof 在引用类型检测的时候不能具体，除了function 可以判断出来，剩下的引用类型和null统一都是&#39;object&#39;</li><li>instanceof 可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型；</li><li>Object.prototype.toString 万能方法最终解</li></ol>`,59),c=[t];function r(i,y,A,b,u,m){return a(),n("div",null,c)}const g=s(e,[["render",r]]);export{f as __pageData,g as default};
