import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const m=JSON.parse('{"title":"","description":"reflect-metadata","frontmatter":{"description":"reflect-metadata"},"headers":[],"relativePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/3.装饰器stage2配合设置元数据.md","filePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/3.装饰器stage2配合设置元数据.md","lastUpdated":1718985599000}'),p={name:"A.前端知识整理/4.前端ES新语法记录/4.装饰器/3.装饰器stage2配合设置元数据.md"},e=l(`<p><code>reflect-metadata</code> 是一个 JavaScript 库，用于在运行时访问和操作装饰器的元数据。它提供了一组 API，可以读取和写入装饰器相关的元数据信息。</p><p>我们可以将 类 上一些数据进行收集，收集后进行标记。让器具备模型特定自定义属性</p><ul><li>class 装饰target 是构造函数</li><li>静态属性，则为类本身；如果是实例属性，则为类的原型</li><li>如果是静态方法，则为类本身；如果是实例方法，则为类的原型</li></ul><p>下面用到 <code>Reflect.metadata</code> 他的本质其实是</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> metadata</span><span style="color:#383A42;">(metadataKey,metadataValue){</span></span>
<span class="line"><span style="color:#A626A4;">	return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(target,key){</span></span>
<span class="line"><span style="color:#383A42;">			Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(metadataKey, metadataValue, target, key);</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>正因如此 <code>Reflect.getMetadata</code> 是获取原型链上的 绑定的因此通过 对象也可以直接获取内容，相对class 装饰器则需要构造函数因为 他的target 并不是原型链</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &quot;reflect-metadata&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;class&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;classValue&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;property&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;propertyValue&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;method&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;methodValue&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#4078F2;">  getName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> classValue</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;class&quot;</span><span style="color:#383A42;">, </span><span style="color:#986801;">A</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Class metadata value: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">classValue</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> propertyValue</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;property&quot;</span><span style="color:#383A42;">, a, </span><span style="color:#50A14F;">&quot;name&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Property metadata value: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">propertyValue</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> methodValue</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;method&quot;</span><span style="color:#383A42;">, a, </span><span style="color:#50A14F;">&quot;getName&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Method metadata value: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">methodValue</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> classValue1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;class&quot;</span><span style="color:#383A42;">, a.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Class metadata value: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">classValue1</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> propertyValue1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;property&quot;</span><span style="color:#383A42;">, a, </span><span style="color:#50A14F;">&quot;name&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Property metadata value: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">propertyValue1</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> methodValue1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;method&quot;</span><span style="color:#383A42;">, a, </span><span style="color:#50A14F;">&quot;getName&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Method metadata value: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">methodValue1</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Class metadata value: classValue</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Property metadata value: propertyValue</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Method metadata value: methodValue</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Class metadata value: classValue</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Property metadata value: propertyValue</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Method metadata value: methodValue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><p>但如果都想获取原型链的可以进行适当自定义封装的装饰</p><h3 id="ts-emitdecoratormetadata" tabindex="-1">ts emitDecoratorMetadata <a class="header-anchor" href="#ts-emitdecoratormetadata" aria-label="Permalink to &quot;ts emitDecoratorMetadata&quot;">​</a></h3><p>在ts 还帮你自动收集 一些其他信息需要你开启 <code>emitDecoratorMetadata</code></p><ol><li><code>design:type</code>：用于属性的类型元数据。</li><li><code>design:paramtypes</code>：用于构造函数或方法参数的类型元数据。</li><li><code>design:returntype</code>：用于方法的返回类型元数据</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &#39;reflect-metadata&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 类装饰器</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 参数装饰器</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> paramDecorator</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, parameterIndex</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 属性装饰器</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> propDecorator</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 方法装饰器</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> methodDecorator</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecorator</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Example</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    @propDecorator</span></span>
<span class="line"><span style="color:#383A42;">    myProperty</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(@paramDecorator serviceA</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, @paramDecorator serviceB</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Example instance created&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">    @methodDecorator</span></span>
<span class="line"><span style="color:#4078F2;">    myMethod</span><span style="color:#383A42;">()</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#50A14F;"> &#39;hello&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 获取属性的类型元数据</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> propertyType</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:type&#39;</span><span style="color:#383A42;">, </span><span style="color:#C18401;">Example</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;myProperty&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Property type:&#39;</span><span style="color:#383A42;">, propertyType.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> paramTypes</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, Example);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Constructor param types:&#39;</span><span style="color:#383A42;">, paramTypes.</span><span style="color:#4078F2;">map</span><span style="color:#383A42;">((type</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> type.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> returnType</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:returntype&#39;</span><span style="color:#383A42;">, </span><span style="color:#C18401;">Example</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;myMethod&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Method return type:&#39;</span><span style="color:#383A42;">, returnType.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> formatMetadataKey</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> Symbol</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;format&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> format</span><span style="color:#383A42;">(formatString</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(formatMetadataKey, formatString);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> getFormat</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(formatMetadataKey, target, propertyKey);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Greeter</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">format</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Hello, %s&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  greeting</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(message</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">greeting</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> message;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#4078F2;">  greet</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    let</span><span style="color:#383A42;"> formatString </span><span style="color:#0184BC;">=</span><span style="color:#4078F2;"> getFormat</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;greeting&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> formatString.</span><span style="color:#4078F2;">replace</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;%s&quot;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">greeting</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> objG</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Greeter</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;world&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(objG.greet()); // &quot;Hello, world&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> objG</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Greeter</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;world&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(objG.greet());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// greet封装在外面也是一样的道理</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> greet</span><span style="color:#383A42;">(obj</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  let</span><span style="color:#383A42;"> formatString </span><span style="color:#0184BC;">=</span><span style="color:#4078F2;"> getFormat</span><span style="color:#383A42;">(obj, key);</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> formatString.</span><span style="color:#4078F2;">replace</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;%s&quot;</span><span style="color:#383A42;">, obj[key]);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> g</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> greet</span><span style="color:#383A42;">(objG, </span><span style="color:#50A14F;">&quot;greeting&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(g);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>`,14),o=[e];function t(r,c,y,i,A,u){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{m as __pageData,d as default};
