import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const p="/learning-notes-blog/images/2023-08-14-23-28-31.png",e="/learning-notes-blog/images/2023-08-15-08-08-38.png",F=JSON.parse('{"title":"","description":"检测并报告代码中的潜在问题、错误","frontmatter":{"description":"检测并报告代码中的潜在问题、错误"},"headers":[],"relativePath":"C.前端工程化/4.搭建代码规范/3.规范化标准Eslint/1.导读.md","filePath":"C.前端工程化/4.搭建代码规范/3.规范化标准Eslint/1.导读.md","lastUpdated":1692059990000}'),o={name:"C.前端工程化/4.搭建代码规范/3.规范化标准Eslint/1.导读.md"},r=l(`<p>&#39;软件开发需要多人协同&#39;、&#39;不同开发者具有不同的编码习惯和喜好&#39;、&#39;不同的喜好会增加项目的维护成本&#39;、&#39;每个项目或者团队需要明确统一的标准&#39;</p><p>因此要形成规范尤其是前端，JS 的弱类型和动态类型,JS 的变量在声明时无需指定其类型。并且在其声明之后，可以为其随便赋值不同的类型。JS 由于不需要关注变量的类型，可以使代码更加简洁，也能使开发者集中更多的精力在处理业务逻辑之上。但由于其无法保证变量类型，从而在程序运行期可能发生跟类型相关的错误。 比如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">s</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#61AFEF;">s</span><span style="color:#ABB2BF;">() </span><span style="color:#7F848E;font-style:italic;">//Uncaught TypeError: s is not a function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>而这样的错误对于 JAVA 在编译期间就会检查出来。为了可以在编写中发现问题，前端出现了很多种尝试类似&#39;TypeScript、CoffeeScript 或 Elm&#39; 辅助工具出现了&#39;Lint&#39;&#39;Lint&#39;工具最早是使用于 UNIX 系统中 C 语言的程式码静态分析工具，主要是用来标记语法结构上有可疑的、濳在的问题语法或指令,在前端类似的这种类似工具有&#39;JSLint 与 JSHint&#39;,随着时代推移&#39;ESLint&#39;由 Nicholas C. Zakas 创造，正如是为 ES 新标准语法所设计,相比其他 js 检查工具来说&#39;ESLint&#39;的功能具有</p><ul><li>有更多规则选项可以依需求或喜好设定</li><li>函式库或框架的开发者可以依需求再开发扩充</li><li>支持更高的 es 语法和实验特性和 JSX 语法</li><li>提供错误警告</li></ul><p>正是因为 ESlint （使用 Node.js 编写） 需要将源码转为 AST 的特点并且还可以扩展规则，默认的解析器也能替换，这种自由度高可插拔的形式，最后&#39;ESLint&#39; 成为现阶段&#39;js&#39; 代码质量检查的工具</p><h2 id="帮助解决问题" tabindex="-1">帮助解决问题 <a class="header-anchor" href="#帮助解决问题" aria-label="Permalink to &quot;帮助解决问题&quot;">​</a></h2><ul><li>&#39;语言语法检查&#39;：比如检查出字符串引号或者函数调用括号没有匹配等问题。</li><li>&#39;编码错误检查&#39;：比如检查出开发者在使用一个不存在的变量或者变量定义了却没有使用等问题。</li><li>&#39;代码风格检查&#39;：比如检查出开发者没有使用分号（与所选风格有关）等问题。</li></ul><p><strong>注意他不会检查你 js api 调用的是否正确，明确他能做的</strong></p><h2 id="安装使用" tabindex="-1">安装使用 <a class="header-anchor" href="#安装使用" aria-label="Permalink to &quot;安装使用&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过 npx 可以产看&#39;eslint&#39; 版本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装后开始使用：</p><p>初始化生成配置文件 <code>npx eslint --init</code> 初始化的时候会询问几个问题：</p><p>问题 1 ： 如何使用 ESLint ？ 只检查语法错误 | 检测语法错误以及问题代码 | 检测语法错误以及问题代码以及代码风格</p><p>问题 2： 你的项目模块化选择类型？ JS modules(import/export) | CommonJS(require/exports) | None of these</p><p>问题 3：项目使用框架 问题 4： 是否使用 TS 问题 5： 运行环境 Browser | Node</p><p>问题 6: 定义代码风格 主流代码风格 | 个人自定义 | 根据代码判断</p><p>问题 7：配置文件格式 JS | YARM | JSON 问题 8： 安装额外的插件 Y</p><p>安装完成后会出现<code>.eslintrc.js</code> 文件,除了 <code>.eslintrc.js</code> 配置外还有其他配置文件的声明写法</p><ul><li>&#39;JavaScript&#39; - 使用 .eslintrc.js 然后输出一个配置对象。</li><li>&#39;YAML&#39; - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</li><li>&#39;JSON&#39; - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。</li><li>&#39;package.json&#39; - 在 package.json 里创建一个 eslintConfig 属性，在那里定义你的配置。</li></ul><p><strong>优先级 &#39;.eslintrc.js&#39; &gt; &#39;.eslintrc.yaml&#39; &gt;&#39;.eslintrc.yml&#39; &gt;&#39;.eslintrc.json&#39; &gt;&#39;.eslintrc&#39;&gt; &#39;package.json&#39;</strong></p><p>也可以使用 eslintignore 忽略指定文件，对于一些公共的 js，或者测试脚本，不需要进行检测，我们可以通过在项目根目录创建一个<code>.eslintignore</code>告诉 ESLint 去忽略特定的目录或者文件</p><p>根据上面的询问选好配置后:</p><ul><li>&#39;npx eslint [文件路径]&#39; -- 检查对应文件中编码格式。路径可以使用路径通配符</li><li>&#39;npx eslint [文件路径] --fix&#39; -- 自动修正代码风格</li></ul><h3 id="eslint-检查指令-案例" tabindex="-1">eslint 检查指令 案例 <a class="header-anchor" href="#eslint-检查指令-案例" aria-label="Permalink to &quot;eslint 检查指令 案例&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># 检测单个文件</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file1.js</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">file2.js</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># 检测src和scripts目录</span></span>
<span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">eslint</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">src</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">scripts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">zz</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1000&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>检查对应文件中编码格式 给出了错误原因 <img src="`+p+`" alt=""></p><h3 id="检查并修复-fix" tabindex="-1">检查并修复 fix <a class="header-anchor" href="#检查并修复-fix" aria-label="Permalink to &quot;检查并修复 fix&quot;">​</a></h3><p><code>--fix后缀</code>，是 ESLint <strong>提供自动修复基础错误的功能，它只能修复一些基础的不影响代码逻辑的错误，比如代码末尾加上分号、表达式的空格等等</strong>。例如 <code>npx eslint src scripts --fix</code> / <code>npx eslint file1.js file2.js --fix</code></p><p>案例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">zz</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1000&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修复后</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">a</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">zz</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;1000&#39;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如图修复了格式问题 但并没有修复未引用问题</p><p><img src="`+e+`" alt=""></p><h3 id="指定文件ext" tabindex="-1">指定文件ext <a class="header-anchor" href="#指定文件ext" aria-label="Permalink to &quot;指定文件ext&quot;">​</a></h3><p>eslint 修复和检查都可以指定具体文件或者具体文件夹，<strong>例如可以指定具体文件&#39;aa.vue&#39;,&#39;aa.js&#39;,但是指定文件时候例如&#39;/src&#39; 这个文件下会有各种文件类型，但eslint 默认只会检测文件夹中的&#39;js&#39; 文件，此时需要使用&#39;ext&#39;</strong></p><p>注意只有在指定是文件夹时候使用&#39;ext&#39; 才会生效，举个例子<code>npx eslint --ext .js,.jsx,.vue src</code></p><h2 id="eslintignore-忽略指定文件" tabindex="-1">eslintignore 忽略指定文件 <a class="header-anchor" href="#eslintignore-忽略指定文件" aria-label="Permalink to &quot;eslintignore 忽略指定文件&quot;">​</a></h2><p>对于一些公共的js，或者测试脚本，不需要进行检测，我们可以通过在项目根目录创建一个<code>.eslintignore</code>告诉ESLint去忽略特定的目录或者文件</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">node_modules/</span></span>
<span class="line"><span style="color:#C678DD;">*</span><span style="color:#E06C75;">*</span><span style="color:#FFFFFF;">/*.spec.*</span></span>
<span class="line"><span style="color:#C678DD;">*</span><span style="color:#E06C75;">*</span><span style="color:#FFFFFF;">/style/</span></span>
<span class="line"><span style="color:#C678DD;">*</span><span style="color:#E06C75;">.html</span></span>
<span class="line"><span style="color:#98C379;">/components/test/*</span></span>
<span class="line"><span style="color:#98C379;">es/</span></span>
<span class="line"><span style="color:#98C379;">lib/</span></span>
<span class="line"><span style="color:#98C379;">_site/</span></span>
<span class="line"><span style="color:#98C379;">dist/</span></span>
<span class="line"><span style="color:#98C379;">components/version/version.tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="配置文件的字段说明" tabindex="-1">配置文件的字段说明 <a class="header-anchor" href="#配置文件的字段说明" aria-label="Permalink to &quot;配置文件的字段说明&quot;">​</a></h2><ul><li><p><code>parser</code>: 解析器是ESLint用于将代码转换为抽象语法树（AST）的组件。ESLint默认使用的解析器是Espree，它能够将编写的代码解析成抽象语法树的形式，以便ESLint可以根据规则对代码进行验证和分析。</p></li><li><p><code>extends</code>: <code>extends</code>字段用于递归地扩展ESLint的配置。通过指定一个配置文件或一个可共享的配置名称，可以继承和重用其他配置。这样可以方便地在项目中共享和继承一组预定义的规则和配置，提高代码的一致性和可维护性。</p></li><li><p><code>rules</code>: <code>rules</code>字段用于定义ESLint的规则，它允许您自定义代码的静态分析规则。您可以为不同的规则指定不同的错误级别（如警告或错误）或禁用特定的规则。通过配置<code>rules</code>字段，您可以覆盖继承的配置或添加自定义规则，以满足项目的特定需求。</p></li><li><p><code>parserOptions</code>: <code>parserOptions</code>字段用于配置解析器的选项。您可以在这里指定解析器的版本、支持的ECMAScript版本、启用特定的语言特性（如模块化）等。解析器选项的配置可以影响ESLint在解析和分析代码时的行为。</p></li><li><p><code>plugins</code>: <code>plugins</code>字段用于为ESLint添加额外的检查规则。ESLint的核心规则集并不包含所有可能的规则，但通过使用插件，您可以扩展ESLint并使用来自插件的规则。插件可以提供特定领域的规则（如React或Vue.js），或者是一些通用的规则扩展。</p></li><li><p><code>env</code>: <code>env</code>字段用于定义一组预定义的全局变量，表示代码运行的环境。例如，如果您的代码将在浏览器环境中执行，您可以将<code>env</code>字段设置为<code>{ &quot;browser&quot;: true }</code>，以便ESLint知道在分析代码时应该考虑浏览器全局变量。通过配置<code>env</code>字段，可以避免对未声明的变量和全局对象的使用进行警告或错误的检查。</p></li></ul><h3 id="parser-解析器" tabindex="-1">parser -- 解析器 <a class="header-anchor" href="#parser-解析器" aria-label="Permalink to &quot;parser -- 解析器&quot;">​</a></h3><p>想成为eslint 的parser解析器需要满足两点</p><ul><li>它必须是一个 Node 模块，应该使用 npm 单独安装解析器包.</li><li>它必须符合 <a href="https://eslint.bootcss.com/docs/developer-guide/working-with-plugins#working-with-custom-parsers" target="_blank" rel="noreferrer">parser interface</a></li></ul><p>其他解析器：</p><ul><li><code>esprima</code>: ESLint最初使用的解析器，但后来不再维护。</li><li><code>espree</code>: ESLint基于esprima v1.2.2开发的解析器，成为ESLint的默认解析器。</li><li><code>babel-eslint</code>: 是对Babel解析器的封装，使其与ESLint兼容。</li><li><code>@babel/eslint-parser</code>: 从v11.xx版本开始，<code>babel-eslint</code>不再维护和更新，取而代之的是<code>@babel/eslint-parser</code>。</li><li><code>@typescript-eslint/parser</code>: 将TypeScript代码转换为与estree兼容的形式，以便在ESLint中使用。</li></ul><p>解析器的选择：</p><ul><li>如果使用TypeScript，应选择<code>@typescript-eslint/parser</code>作为解析器。</li><li>如果使用ES中的实验性属性，可以使用<code>babel</code>提供的解析器。</li><li>若要支持最新的ES标准语法，可以使用ESLint默认的解析器。</li></ul><p>解析器配置示例：</p><ul><li><p>配置示例（包含TypeScript解析器）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">parser</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;@typescript-eslint/parser&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 其他配置项...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>配置示例（使用babel解析器）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">parser</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;babel-eslint&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 其他配置项...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>配置示例（不指定解析器，默认使用espree）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 其他配置项...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>针对Vue.js和TypeScript的配置：</p><ul><li>在Vue.js项目中结合TypeScript时，可以使用<code>@vue/eslint-config-typescript</code>扩展配置，它已经包含了TypeScript解析器和相关规则。</li><li>可以参考以下示例配置：<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">root</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&#39;extends&#39;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;plugin:vue/vue3-essential&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;eslint:recommended&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;@vue/eslint-config-typescript&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;@vue/eslint-config-prettier/skip-formatting&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  ],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">parserOptions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">ecmaVersion</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;latest&#39;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">// 其他配置项...</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><p><strong>根据具体需求和项目配置，选择合适的解析器和配置，以正确解析和检查代码。</strong> <a href="https://tjaddison.com/blog/2021/03/updating-babel-eslint-to-babeleslint-parser-for-react-apps/" target="_blank" rel="noreferrer">你使用@babel/eslint-parser 遇到了麻烦参考 Updating babel-eslint to @babel/eslint-parser for React apps</a></p><h3 id="parseroptions-解析器选项" tabindex="-1">parserOptions -- 解析器选项 <a class="header-anchor" href="#parseroptions-解析器选项" aria-label="Permalink to &quot;parserOptions -- 解析器选项&quot;">​</a></h3><p>解析器选项用于配置解析器的行为，以便正确解析和分析代码。解析器选项的配置可以影响ESLint在解析和分析代码时的行为。</p><p>可以使用解析器选项覆盖该设置以启用对其他 ECMAScript 版本以及 JSX 的支持。简单理解配合你的解析器，之前说过默认的解析器是&#39;espree&#39;去gitub 搜索你可以发现当传入不同参数的时候配置器将会有不同的结果返回。</p><p>如果你正在尝试新的一些&#39;ES&#39;语法中的实验属性使用&#39;babel&#39; 提供的解析，当然如果你仅仅是想支持最新的最终 ES 标准可以使用eslint 默认以目前写文章的节点装饰器为例属于一个实验属性，在使用默认的eslint的解析器 是不行的，你需要使用&#39;babel&#39;</p><p>需要安装 解释一下&#39;decorators&#39; 装饰器目前在第二阶段因此需要下载&#39;babel&#39; 插件,关于配置</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@babel/core</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@babel/eslint-parser</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@babel/plugin-proposal-decorators</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;parser&quot;</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;@babel/eslint-parser&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;env&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;browser&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;es2021&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#98C379;">&quot;node&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;extends&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;eslint:recommended&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 相当于配置@babel/eslint-parser 解析器的配置</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E06C75;">parserOptions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 如果你 没有写 类似.babelrc 将需要requireConfigFile设置fasle</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 表示不使用配置文件</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">requireConfigFile</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#7F848E;font-style:italic;">// 因为没有配置类似.babelrc 所以需要配置babelOptions声明使用的插件</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E06C75;">babelOptions</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [[</span><span style="color:#98C379;">&quot;@babel/plugin-proposal-decorators&quot;</span><span style="color:#ABB2BF;">,{</span><span style="color:#98C379;">&quot;legacy&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">}]],</span></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"><span style="color:#ABB2BF;">        },</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;rules&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#ABB2BF;">    };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这个案例中如果你配置了类似&#39;.babelrc&#39; 文件那么你就可以不用配置&#39;parserOptions&#39; 这个参数</p><h3 id="plugins-插件" tabindex="-1">plugins -- 插件 <a class="header-anchor" href="#plugins-插件" aria-label="Permalink to &quot;plugins -- 插件&quot;">​</a></h3><p>plugin插件主要是为eslint新增一些检查规则,ESLint 虽然可以定义很多的 rules，只是检查 JS 语法。如果需要检查 Vue 中的 template 或者 React 中的 jsx，就束手无策了。引入插件的目的就是为了增强 ESLint 的检查能力和范围简单的说像vue react 这类新的框架会有自己的规则，这类规则需要去安装额外的插件</p><p>在使用插件的用法上 插件名称可以省略 &#39;eslint-plugin- 前缀&#39;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;plugins&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;plugin1&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// eslint-plugin-plugin1的简写</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&quot;eslint-plugin-plugin2&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,70),t=[r];function c(i,B,y,d,b,u){return n(),a("div",null,t)}const A=s(o,[["render",c]]);export{F as __pageData,A as default};
