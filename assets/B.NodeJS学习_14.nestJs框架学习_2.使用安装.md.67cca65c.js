import{_ as s,o as n,c as a,V as p}from"./chunks/framework.96db2af4.js";const A=JSON.parse('{"title":"","description":"安装","frontmatter":{"description":"安装","tags":["服务端","nestjs"]},"headers":[],"relativePath":"B.NodeJS学习/14.nestJs框架学习/2.使用安装.md","filePath":"B.NodeJS学习/14.nestJs框架学习/2.使用安装.md","lastUpdated":1716119491000}'),l={name:"B.NodeJS学习/14.nestJs框架学习/2.使用安装.md"},o=p(`<ol><li>安装使用 Nest 提供的交手架进行安装使用，可以使用 npx 进行安装</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>也可以将脚手架安装到全局后，执行交手架指令</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>全局安装的问题是当前哪一刻的最新安装指令，如果 Nest 更新了需要执行更新全局脚手架</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">update</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>项目创建后会让选择使用的安装包工具 ，也可以在使用指令的时候直接确定创建的 包管理工具</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>也可以设置使用编写语言 <code>--language</code> 可以指定 typescript 和 javascript</li></ol><h2 id="项目目录了解" tabindex="-1">项目目录了解 <a class="header-anchor" href="#项目目录了解" aria-label="Permalink to &quot;项目目录了解&quot;">​</a></h2><p>项目创建后生成了项目目录</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">src</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.controller.spec.ts</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.controller.ts</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.module.ts</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.service.ts</span></span>
<span class="line"><span style="color:#abb2bf;"> └── main.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table><thead><tr><th><strong>文件</strong></th><th><strong>作用</strong></th><th><strong>与其他文件的关系</strong></th></tr></thead><tbody><tr><td><code>app.controller.ts</code></td><td>定义控制器，处理传入的HTTP请求并返回响应。定义路由和端点。</td><td>- 被 <code>app.module.ts</code> 注册为控制器。- 依赖于 <code>app.service.ts</code>，通过构造函数注入服务来调用业务逻辑方法。</td></tr><tr><td><code>app.module.ts</code></td><td>定义应用的根模块，是应用的起始点。导入其他模块，注册控制器和服务。</td><td>- 注册 <code>app.controller.ts</code> 为控制器。- 注册 <code>app.service.ts</code> 为提供者。- 被 <code>main.ts</code> 引导。</td></tr><tr><td><code>app.service.ts</code></td><td>定义包含业务逻辑的服务类。服务类中的方法可以被控制器调用，用于处理请求。</td><td>- 被 <code>app.controller.ts</code> 通过依赖注入使用。- 被 <code>app.module.ts</code> 注册为提供者。</td></tr><tr><td><code>main.ts</code></td><td>应用的入口点。初始化 NestJS 应用，创建应用实例并启动服务器。</td><td>- 引导 <code>app.module.ts</code> 作为根模块。</td></tr></tbody></table><ol><li><p><strong><code>main.ts</code></strong> 文件是应用的入口点，用于引导 <code>app.module.ts</code> 模块。它初始化 NestJS 应用，创建应用实例并启动服务器。</p></li><li><p><strong><code>app.module.ts</code></strong> 文件是应用的根模块，用于组织和注册其他模块、控制器和提供者。它注册 <code>app.controller.ts</code> 为控制器，并注册 <code>app.service.ts</code> 为提供者。</p></li><li><p><strong><code>app.controller.ts</code></strong> 文件定义了控制器，负责处理传入的 HTTP 请求并返回响应。控制器包含路由和端点，通过构造函数注入 <code>app.service.ts</code> 中的服务来调用业务逻辑方法。</p></li><li><p><strong><code>app.service.ts</code></strong> 文件定义了服务类，包含具体的业务逻辑。服务类的方法可以被控制器调用，用于处理请求。服务被 <code>app.controller.ts</code> 通过依赖注入使用，并被 <code>app.module.ts</code> 注册为提供者。</p></li></ol><ul><li><p><strong><code>main.ts</code></strong>：</p><ul><li><strong>作用</strong>：引导应用，初始化并启动服务器。</li><li><strong>关系</strong>：引导 <code>AppModule</code> 作为根模块。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/core&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><strong><code>app.module.ts</code></strong>：</p><ul><li><strong>作用</strong>：定义应用的根模块，组织控制器和提供者。</li><li><strong>关系</strong>：导入并注册 <code>AppController</code> 和 <code>AppService</code>。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.controller&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">imports</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><strong><code>app.controller.ts</code></strong>：</p><ul><li><strong>作用</strong>：处理 HTTP 请求，定义路由和端点。</li><li><strong>关系</strong>：通过构造函数注入 <code>AppService</code>。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">appService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p><strong><code>app.service.ts</code></strong>：</p><ul><li><strong>作用</strong>：定义业务逻辑，提供给控制器使用。</li><li><strong>关系</strong>：被 <code>AppController</code> 通过依赖注入使用。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello World!&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><pre><code>https://docs.nestjs.cn/10/firststeps


https://www.bilibili.com/video/BV1NW421c7kz/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=1e4d2f8cd0a4f142adfbc4bf47b6c113


https://juejin.cn/post/7078847428455530526#heading-3

https://3rcd.com/wiki/nestjs-practise/chapter1


https://www.bilibili.com/video/BV1yt421w7vW?p=2&amp;vd_source=1e4d2f8cd0a4f142adfbc4bf47b6c113
</code></pre></li></ul>`,17),e=[o];function r(c,t,B,i,y,d){return n(),a("div",null,e)}const F=s(l,[["render",r]]);export{A as __pageData,F as default};
