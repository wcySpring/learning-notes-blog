import{_ as s,c as n,o as a,a8 as l,ak as p,al as o,am as e,an as r}from"./chunks/framework.6k5lawSO.js";const C=JSON.parse('{"title":"","description":"js继承","frontmatter":{"description":"js继承"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/5.面向对象/6.js继承.md","filePath":"A.前端知识整理/2.JS基础/5.面向对象/6.js继承.md","lastUpdated":1718635980000}'),c={name:"A.前端知识整理/2.JS基础/5.面向对象/6.js继承.md"},t=l('<ol><li>在 JavaScript 中，是通过<strong>遍历原型链</strong>的方式，<strong>来访问对象的方法和属性</strong>,简单的说就是<strong>我自身没有我就通过&#39;<strong>proto</strong>&#39; 找到我的构造函数的&#39;prototype&#39;上</strong>，构造函数原型对象没有他就去找<strong>构造函数上&#39;<strong>proto</strong>&#39; 链接的原型对象</strong>一直都没找到的情况下，最后找到<strong>null 终止</strong></li><li>在原型链上查找属性<strong>比较耗时</strong>，<strong>对性能有副作用</strong>，这在性能要求苛刻的情况下很重要。另外试图访问<strong>不存在</strong>的属性时<strong>会遍历整个原型链</strong>。 <img src="'+p+`" alt=""></li><li><strong>js属性遮蔽</strong>可以理解成就近原则</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;"> (name) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#C18401;">A</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;原型对象上的name 属性&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;w&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// w</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>会找离自身最近属性对应值</li></ul><p><img src="`+o+`" alt=""></p><p><code>hasOwnProperty</code> -- 属性是否是原型对象上,证明打印是自己的而不是原型对象<strong>prototype</strong>上的，使用<strong>hasOwnProperty</strong>返回的是<strong>true</strong> 则使用的是实例对象自己的，<strong>false</strong>怎相反</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 每一个函数都有一个原型属性prototype</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 他们都会指向实例对象因此在Person这个</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 构造函数的prototype加属性即可创建的对象共享</span></span>
<span class="line"><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;wang&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 当前的name 到底是p1的还是 Person的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p1.</span><span style="color:#4078F2;">hasOwnProperty</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;name&#39;</span><span style="color:#383A42;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">p2.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;p2&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 当前的name 到底是p1的还是 Person的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p2.</span><span style="color:#4078F2;">hasOwnProperty</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;name&#39;</span><span style="color:#383A42;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">打印结果：</span></span>
<span class="line"><span style="color:#986801;">false</span></span>
<span class="line"><span style="color:#986801;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="继承的几种方式" tabindex="-1">继承的几种方式 <a class="header-anchor" href="#继承的几种方式" aria-label="Permalink to &quot;继承的几种方式&quot;">​</a></h3><h4 id="原型链继承" tabindex="-1">原型链继承 <a class="header-anchor" href="#原型链继承" aria-label="Permalink to &quot;原型链继承&quot;">​</a></h4><ol><li>新实例无法向<strong>父类构造函数传参</strong>。</li><li>所有新实例共享父类实例的属性，导致两个实例使用<strong>同一个原型对象</strong>，如果属性是<strong>引用类型</strong>，当一个实例修改属性时，另一个实例也会受到影响。</li><li>通过直接打印对象看不到共享的属性，因为这些属性被挂载在原型链上，调用时如果实例自身没有这些属性，会访问原型链上的属性。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 第一种 原型链继承</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Parent</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;parent&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">play</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">];</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">type</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;child&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Child</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Parent</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> child1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> child2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">child1.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(</span><span style="color:#986801;">12345</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(child1.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">, child2.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [1, 2, 3, 12345] [1, 2, 3, 12345]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="构造函数继承" tabindex="-1">构造函数继承 <a class="header-anchor" href="#构造函数继承" aria-label="Permalink to &quot;构造函数继承&quot;">​</a></h4><ol><li>通过 <strong>apply() 和 call()</strong> 方法改变函数执行时 <code>this</code> 指向，只有当 <code>new Child</code> 时才执行，给当前 <code>this</code> 调用了一个赋值属性的封装方法。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Parent</span><span style="color:#383A42;">(age) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;parent&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> age;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">play</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">];</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Parent</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">(age) {</span></span>
<span class="line"><span style="color:#383A42;">    Parent.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, age);</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">type</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;child&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> child1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> child2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">child1.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(</span><span style="color:#986801;">12345</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(child1.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">, child2.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [1, 2, 3, 12345] [1, 2, 3]</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 报错</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(child1.getName());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="组合继承" tabindex="-1">组合继承 <a class="header-anchor" href="#组合继承" aria-label="Permalink to &quot;组合继承&quot;">​</a></h4><ol><li>结合原型链继承和构造函数继承，将二者优点结合，但会导致 <code>Parent</code> 执行两次，一次在创建子类原型时，一次在子类构造函数内部。</li><li><strong>所有子类实例会拥有两份父类的属性</strong>，一份在实例自身，另一份在子类原型对象中。访问属性时优先访问实例自身的属性。</li></ol><p><img src="`+e+`" alt=""></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Parent</span><span style="color:#383A42;">(age) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;parent&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> age;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">play</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">];</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Parent</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">(age) {</span></span>
<span class="line"><span style="color:#383A42;">    Parent.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, age);</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">type</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;child&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行一次 Parent 构造函数</span></span>
<span class="line"><span style="color:#C18401;">Child</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Parent</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 手动挂上构造器，指向自己的构造函数</span></span>
<span class="line"><span style="color:#C18401;">Child</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Child;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> child1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 触发函数执行第二次 Parent.call(this, age)</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> child2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">child1.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(</span><span style="color:#986801;">12345</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(child1.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">, child2.</span><span style="color:#E45649;">play</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [1, 2, 3, 12345] [1, 2, 3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="原型继承" tabindex="-1">原型继承 <a class="header-anchor" href="#原型继承" aria-label="Permalink to &quot;原型继承&quot;">​</a></h4><p><strong>道格拉斯·克罗克福德</strong>提出的一种实现继承的方法，不使用严格意义上的构造函数，通过 <code>Object.create</code> 方法基于已有对象创建新对象。 <strong>这种方法并没有使用严格意义上的构造函数</strong>。它的想法<strong>是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型</strong>。为了达到这个目的，他给出了如下函数。 <strong>先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例</strong>。<strong>从本质上讲，object()对传入其中的对象执行了一次浅复制</strong>。 克罗克福德主张的<strong>这种原型式继承</strong>，<strong>要求你必须有一个对象可以作为另一个对象的基础</strong></p><p>这类思想就是脱离之前构造函数的想法，而是直接给对象做继承，虽然每次伪造了一个 构造函数但对其包装并未暴露，相当于都挂载到原型了导致数据共享问题，无法实现复用，属于自己的属性需要给create 第二个方法传参</p><p><img src="`+r+`" alt=""></p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> object</span><span style="color:#383A42;">(o) {</span></span>
<span class="line"><span style="color:#A626A4;">    function</span><span style="color:#4078F2;"> F</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#C18401;">    F</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> o;</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> F</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> parent4</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;parent4&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    friends</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;p1&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;p2&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;p3&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#4078F2;">    getName</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> person4</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(parent4);</span></span>
<span class="line"><span style="color:#383A42;">person4.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;tom&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">person4.</span><span style="color:#E45649;">friends</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;jerry&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> person5</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(parent4);</span></span>
<span class="line"><span style="color:#383A42;">person5.</span><span style="color:#E45649;">friends</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;lucy&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person4.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// tom</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person4.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">() </span><span style="color:#0184BC;">===</span><span style="color:#383A42;"> person4.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person5.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// parent4</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person4.</span><span style="color:#E45649;">friends</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;p1&#39;, &#39;p2&#39;, &#39;p3&#39;, &#39;jerry&#39;, &#39;lucy&#39; ]</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person5.</span><span style="color:#E45649;">friends</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;p1&#39;, &#39;p2&#39;, &#39;p3&#39;, &#39;jerry&#39;, &#39;lucy&#39; ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h4 id="寄生式继承" tabindex="-1">寄生式继承 <a class="header-anchor" href="#寄生式继承" aria-label="Permalink to &quot;寄生式继承&quot;">​</a></h4><p><strong>寄生式继承</strong>是与原型继承相关的一种思想，通过<strong>工厂模式</strong>添加当前实例的属性和方法。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> parent5</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;parent5&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    friends</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;p1&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;p2&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;p3&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#4078F2;">    getName</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> clone</span><span style="color:#383A42;">(original) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> clone</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(original);</span></span>
<span class="line"><span style="color:#383A42;">    clone.</span><span style="color:#4078F2;">getFriends</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">friends</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> clone;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> person5</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> clone</span><span style="color:#383A42;">(parent5);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person5.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// parent5</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person5.</span><span style="color:#4078F2;">getFriends</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;p1&#39;, &#39;p2&#39;, &#39;p3&#39; ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="寄生组合继承" tabindex="-1">寄生组合继承 <a class="header-anchor" href="#寄生组合继承" aria-label="Permalink to &quot;寄生组合继承&quot;">​</a></h4><ol><li>组合继承的优化方案，避免构造函数执行两次的问题。</li><li>利用 <code>Object.create</code> 挂载原型，减少一次父类实例创建，在子类构造函数使用 <code>call</code> 继承父类属性。</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> clone</span><span style="color:#383A42;">(parent, child) {</span></span>
<span class="line"><span style="color:#C18401;">    child</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(</span><span style="color:#C18401;">parent</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#C18401;">    child</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> child;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Parent6</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;parent6&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">play</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">];</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Parent6</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Child6</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    Parent6.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">friends</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;child6&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">clone</span><span style="color:#383A42;">(Parent6, Child6);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Child6</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getFriends</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">friends</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> person6</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Child6</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person6); </span><span style="color:#A0A1A7;font-style:italic;">// Child6 { name: &#39;parent6&#39;, play: [ 1, 2, 3 ], friends: &#39;child6&#39; }</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person6.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// parent6</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(person6.</span><span style="color:#4078F2;">getFriends</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// child6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,28),y=[t];function i(A,b,u,m,d,h){return a(),n("div",null,y)}const F=s(c,[["render",i]]);export{C as __pageData,F as default};
