import{_ as s,o as t,c as a,V as n}from"./chunks/framework.96db2af4.js";const e="/learning-notes-blog/images/2023-07-23-12-42-31.png",g=JSON.parse('{"title":"","description":"好的代码习惯带来更好的编程规范","frontmatter":{"description":"好的代码习惯带来更好的编程规范"},"headers":[],"relativePath":"G.设计模式/3.代码编写/1.代码编程规范-命名.md","filePath":"G.设计模式/3.代码编写/1.代码编程规范-命名.md","lastUpdated":1690164340000}'),l={name:"G.设计模式/3.代码编写/1.代码编程规范-命名.md"},o=n('<p>在编程中，命名是非常重要的，因为它可以使代码更易于理解和维护，大到项目名、模块名、包名、对外暴露的接口，小到类名、函数名、变量名、参数名，只要是做开发，我们就逃不过“起名字”这一关。命名的好坏，对于代码的可读性来说非常重要，甚至可以说是起决定性作用的</p><h2 id="命名的形式" tabindex="-1">命名的形式 <a class="header-anchor" href="#命名的形式" aria-label="Permalink to &quot;命名的形式&quot;">​</a></h2><p><strong>驼峰命名</strong>法（CamelCase）指的是使用大小写混合的格式，单词之间不使用空格隔开或者连接字符连接的命名方式。它有两种格式：大驼峰命名法（UpperCamelCase）和小驼峰命名法（lowerCamelCase）。</p><p>大驼峰命名法的第一个单词以大写字母开始，其余的和小驼峰命名法相同。 比如：LastName, InputStream。</p><p>小驼峰命名法的第一个单词以小写字母开始，其他单词以大写字母开始，其余字母使用小写字母。 比如：firstName, toString</p><p>在驼峰命名法中，如果一个单词是缩写的话，可以将其视为一个单词处理。对于一个单词都是大写的缩写单词，可以将其视为一个单词，只需将其首字母大写即可。例如 my IP 使用小驼峰命名法，将其命名为 &quot;myIp&quot;</p><p>下面的表格列出了不同例子的正确转换形式，和容易出错的转换形式 （出自“Google Java Style Guide”）</p><p><img src="'+e+`" alt=""></p><p><strong>蛇形命名法（snake_case）</strong>，单词之间通过下划线“_”连接，比如“out_of_range”</p><p><strong>串式命名法（kebab-case）</strong>，单词之间通过连字符“-”连接，比如“background-color”</p><p><strong>匈牙利命名法</strong>（Hungarian notation）是一种命名规则，它在变量名前面加上一个或多个小写字母前缀，用于表示变量的数据类型或其他属性。这种命名规则最初由微软公司的程序员Charles Simonyi在20世纪80年代提出，因为他来自匈牙利，所以这种命名规则被称为匈牙利命名法。</p><p>匈牙利命名法的前缀通常是一个或多个小写字母，后面跟着一个大写字母，用于表示变量的数据类型或其他属性。例如，&quot;iCount&quot;表示一个整数类型的计数器，&quot;strName&quot;表示一个字符串类型的名称，&quot;bEnabled&quot;表示一个布尔类型的开关。</p><p>然而，随着编程语言和开发工具的发展，匈牙利命名法已经不再被广泛使用，因为现代的编程语言和开发工具已经提供了更好的类型检查和自动补全功能，使得使用这种命名规则变得不再必要。</p><h2 id="取好名字" tabindex="-1">取好名字 <a class="header-anchor" href="#取好名字" aria-label="Permalink to &quot;取好名字&quot;">​</a></h2><ol><li><strong>精准的命名</strong>，命名不要过于宽泛，不能精准描述，这是很多代码在命名上存在的严重问题，也是代码难以理解的根源所在。data、info、flag、process、handle、build、maintain、manage、modify 等等。这些名字都属于典型的过于宽泛的名字，当这些名字出现在你的代码里，多半是写代码的人当时没有想好用什么名字，<strong>命名要能够描述出这段代码在做的事情，一个好的名字应该描述意图，而非细节</strong>，下面有个例子</li></ol><p>函数的名字叫 processChapter（处理章节），这个函数确实是在处理章节，但是，这个名字太过宽泛，这段代码是做什么的。你就需要调动全部注意力，去认真阅读这段代码，找出其中的逻辑。经过阅读我们发现，这段代码做的就是把一个章节的翻译状态改成翻译中。除了翻译对章节增删改都可以理解为处理章节</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">void</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">processChapter</span><span style="color:#E06C75;">(</span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> chapterId) {</span></span>
<span class="line"><span style="color:#E06C75;">　　  </span><span style="color:#E5C07B;">Chapter</span><span style="color:#E06C75;"> chapter </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">repository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">findByChapterId</span><span style="color:#ABB2BF;">(chapterId);</span></span>
<span class="line"><span style="color:#E06C75;">　　  </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (chapter </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">null</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">　　    </span><span style="color:#C678DD;">throw</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">IllegalArgumentException</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;Unknown chapter [&quot;</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> chapterId </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&quot;]&quot;</span><span style="color:#E06C75;">)</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">　　  }</span></span>
<span class="line"><span style="color:#E06C75;">　　  </span><span style="color:#E5C07B;">chapter</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setTranslationState</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">TranslationState</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">TRANSLATING</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">　　  </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">repository</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">save</span><span style="color:#ABB2BF;">(chapter);</span></span>
<span class="line"><span style="color:#E06C75;">　　}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>修改后 可以叫做 setChapterTranslationStateToTranslating 或 updateChapterTranslationStateToTranslating，这样可以更准确地描述这个方法的作用，也更容易让其他开发者理解这段代码的意图</p><p><strong>关于细节上如果命名暴露的细节过多，只要代码稍微有所改动，就可能需要改动命名，才能匹配实现</strong>所以最后也可以命名为 startTranslation 所以，<strong>一个好的名字应该描述意图，而非细节</strong>。</p><ol start="2"><li><p><strong>命名长度上</strong>，在足够表达其含义的情况下，命名当然是越短越好。但是，大部分情况下，短的命名都没有长的命名更能达意，对于一些默认的、大家都比较熟知的词，推荐用缩写。这样一方面能让命名短一些，另一方面又不影响阅读理解，比如，sec 表示 second、str 表示 string、num 表示 number、doc 表示 document</p></li><li><p><strong>用技术术语命名</strong>，例如 bookLs Ls 表示是一个list 这种技术命名，其实可以使用books 这种通俗命名</p></li><li><p><strong>利用上下文简化命名</strong>，下面例子中，在 User 类这样一个上下文中，我们没有在成员变量的命名中重复添加“user”这样一个前缀单词，而是直接命名为 name、password、avatarUrl。在使用这些属性时候，我们能借助对象这样一个上下文，表意也足够明确，因此可以完全不用加上前缀</p></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> userName</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> userPassword</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> userAvatarUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="5"><li><p><strong>对于接口的命名</strong>，一般有两种比较常见的方式。一种是加前缀“I”，表示一个 Interface。<strong>比如 IUserService，对应的实现类命名为 UserService</strong>。另一种是<strong>不加前缀，比如 UserService，对应的实现类加后缀“Impl”，比如 UserServiceImpl。</strong></p></li><li><p><strong>对于抽象类的命名</strong>，也有两种方式，<strong>一种是带上前缀“Abstract”，比如 AbstractConfiguration</strong>；<strong>另一种是不带前缀“Abstract”</strong>。实际上，对于接口和抽象类，选择哪种命名方式都是可以的，只要项目里能够统一就行。</p></li><li><p><strong>对于常量</strong>，可以使用全大写字母和下划线命名法 MAX_VALUE</p></li><li><p><strong>枚举的命名</strong>应该使用大写字母和下划线命名，枚举值的名称应该是一个名词或名词短语，描述枚举值的含义</p></li></ol><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">enum</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ColorEnum</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#D19A66;">RED</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#D19A66;">GREEN</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#D19A66;">BLUE</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="9"><li><p><strong>类名是一个名词，表示一个对象</strong></p></li><li><p><strong>方法名则是一个动词，或者是动宾短语，表示一个动作</strong></p></li></ol><ul><li>若方法返回boolean类型，可以推荐使用如下的格式。</li></ul><table><thead><tr><th>操作类型</th><th>前缀词</th><th>描述</th><th>例子</th><th>返回类型</th></tr></thead><tbody><tr><td>检查对象状态</td><td>is</td><td>对象是否符合期待的状态</td><td>isValidUser(user)</td><td>boolean</td></tr><tr><td>检查对象能力</td><td>can</td><td>对象能否执行所期待的动作</td><td>canUserRemove(user)</td><td>boolean</td></tr><tr><td>检查对象推荐性</td><td>should</td><td>调用方执行某个命令或方法是好还是不好应不应该，或者说推荐还是不推荐</td><td>shouldUserMigrate(user)</td><td>boolean</td></tr><tr><td>检查对象持有性</td><td>has</td><td>对象/集合是否持有所期待的数据和属性</td><td>hasUserObservers(user)</td><td>boolean</td></tr><tr><td>检查对象存在性</td><td>exists</td><td>对象/集合是否存在所期待的数据和属性</td><td>existsUserObservers(user)</td><td>boolean</td></tr><tr><td>检查对象包含性</td><td>contains</td><td>判断集合是否保存某个元素</td><td>containsUser(userList, user)</td><td>boolean</td></tr><tr><td>检查对象需求性</td><td>needs</td><td>调用方是否需要执行某个命令或方法</td><td>needsUserMigrate(user)</td><td>boolean</td></tr></tbody></table><p>对 should 解释，下面代码为例子的&quot;should&quot;并不表示用户必须升级，而是表示根据一些内部逻辑和数据，我们推荐用户升级。最终决定权仍然在于调用该方法的代码。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">shouldUpgrade</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">User</span><span style="color:#E06C75;"> user) {</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// 检查用户是否满足升级条件</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getLevel</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> MAX_LEVEL </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPaymentHistory</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">hasGoodStanding</span><span style="color:#ABB2BF;">()</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">else</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>与数据相关的方法</li></ul><table><thead><tr><th>操作类型</th><th>前缀词</th><th>描述</th><th>例子</th><th>返回类型</th></tr></thead><tbody><tr><td>查询单个对象</td><td>find</td><td>查找单个对象，如果找到则返回该对象，否则返回 null</td><td>findUserById(id)</td><td>User/null</td></tr><tr><td>查询单个对象</td><td>get</td><td>查找单个对象，如果找到则返回该对象，否则抛出异常</td><td>getUserById(id)</td><td>User/Exception</td></tr><tr><td>查询多个对象</td><td>query</td><td>查找多个对象，返回一个集合</td><td>queryUsersByName(name)</td><td><code>List&lt;User&gt;</code></td></tr><tr><td>查询多个对象</td><td>list</td><td>查找多个对象，返回一个集合</td><td>listAllUsers()</td><td><code>List&lt;User&gt;</code></td></tr><tr><td>统计对象数量</td><td>count</td><td>统计符合条件的对象数量</td><td>countUsersByAge(age)</td><td>int</td></tr><tr><td>添加对象</td><td>add</td><td>添加一个新的对象</td><td>addUser(user)</td><td>void/User</td></tr><tr><td>更新对象</td><td>update</td><td>更新一个已存在的对象</td><td>updateUser(user)</td><td>void/User</td></tr><tr><td>删除对象</td><td>delete</td><td>删除一个已存在的对象</td><td>deleteUserById(id)</td><td>void</td></tr><tr><td>删除所有对象</td><td>deleteAll</td><td>删除所有符合条件的对象</td><td>deleteAllUsers()</td><td>void</td></tr><tr><td>保存对象</td><td>save</td><td>保存一个对象，如果对象已存在则更新，否则添加</td><td>saveUser(user)</td><td>User</td></tr><tr><td>保存多个对象</td><td>saveAll</td><td>保存多个对象，如果对象已存在则更新，否则添加</td><td>saveAllUsers(users)</td><td><code>List&lt;User&gt;</code></td></tr></tbody></table><ul><li>介词</li></ul><table><thead><tr><th>操作类型</th><th>前缀词</th><th>描述</th><th>例子</th><th>返回类型</th></tr></thead><tbody><tr><td>创建对象</td><td>from</td><td>从...创建</td><td>createUserFromConfig(config)</td><td>User</td></tr><tr><td>转化对象</td><td>to</td><td>转化</td><td>toString(user)</td><td>String</td></tr><tr><td>获取属性</td><td>of</td><td>从...中获取</td><td>pathOfUser(user)</td><td>String</td></tr><tr><td>使用特定工具进行操作</td><td>with</td><td>和</td><td>writeUserWithMessageConverters(user, converters)</td><td>void</td></tr><tr><td>通过特定方式获取对象</td><td>by</td><td>通过</td><td>getUserById(id)</td><td>User</td></tr><tr><td>检查对象在集合中的存在性</td><td>in</td><td>在...in</td><td>isUserNameInUse(name)</td><td>boolean</td></tr><tr><td>为特定对象获取特定属性</td><td>for</td><td>为了</td><td>getMappingForMethod(method)</td><td>Mapping</td></tr><tr><td>在特定范围内获取属性</td><td>within</td><td>在...内</td><td>getPathWithinApplication(app)</td><td>String</td></tr><tr><td>转化对象</td><td>as</td><td>作为</td><td>getUserValuesAsList(user)</td><td>List</td></tr></tbody></table><p>&quot;for&quot;在方法名中通常用于表示该方法是为了某个特定对象或目的而设计的，例如，假设我们有一个学生类（Student），并且我们想要获取学生的成绩（Grade）。我们可以创建一个名为&quot;getGradeForStudent&quot;的方法。这个方法的目的就是为了获取特定学生的成绩</p><h2 id="实际开发" tabindex="-1">实际开发 <a class="header-anchor" href="#实际开发" aria-label="Permalink to &quot;实际开发&quot;">​</a></h2><p>实际开发业务的时候同事们可以整理建立词汇表，般情况下，我们都可以去和业务方谈，共同确定一个词汇表，包含业务术语的中英文表达。这样在写代码的时候，你就可以参考这个词汇表给变量和函数命名。</p><p>实在想不到好名字的时候，可以去 GitHub 上用相关的关键词联想搜索一下，看看类似的代码是怎么命名的。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://time.geekbang.org/column/article/188622" target="_blank" rel="noreferrer">31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）</a></p>`,38),p=[o];function r(d,c,i,y,u,C){return t(),a("div",null,p)}const h=s(l,[["render",r]]);export{g as __pageData,h as default};
