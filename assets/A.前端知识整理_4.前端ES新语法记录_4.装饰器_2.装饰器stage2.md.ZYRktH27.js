import{_ as s,c as n,o as a,a8 as l,bG as p}from"./chunks/framework.6k5lawSO.js";const d=JSON.parse('{"title":"","description":"js 装饰器第二提案","frontmatter":{"description":"js 装饰器第二提案"},"headers":[],"relativePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/2.装饰器stage2.md","filePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/2.装饰器stage2.md","lastUpdated":1718985599000}'),o={name:"A.前端知识整理/4.前端ES新语法记录/4.装饰器/2.装饰器stage2.md"},e=l(`<p>在JS中，装饰器是一个函数。（装饰器是要参与运行的）ts 和 js 装饰器本质是一样因此这里采用ts 作为说明案例</p><p>装饰器可以修饰：</p><ul><li>类</li><li>成员（属性+方法+访问器装饰器）</li><li>参数</li></ul><table tabindex="0"><thead><tr><th>装饰器名称</th><th>装饰器描述</th><th>装饰器的参数说明</th></tr></thead><tbody><tr><td>类装饰器（Class Decorators）</td><td>应用于类构造函数，可以用于修改类的定义。</td><td><code>constructor: Function</code></td></tr><tr><td>方法装饰器（Method Decorators）</td><td>应用于方法，可以用于修改方法的行为。</td><td><code>target: Object, propertyKey: string, descriptor: PropertyDescriptor</code></td></tr><tr><td>访问器装饰器（Accessor Decorators）</td><td>应用于类的访问器属性（getter 或 setter）。</td><td><code>target: Object, propertyKey: string, descriptor: PropertyDescriptor</code></td></tr><tr><td>属性装饰器（Property Decorators）</td><td>应用于类的属性。</td><td><code>target: Object, propertyKey: string</code></td></tr><tr><td>参数装饰器（Parameter Decorators）</td><td>应用于方法参数。</td><td><code>target: Object, propertyKey: string, parameterIndex: number</code></td></tr></tbody></table><h2 id="所有案例的tsconfig-配置" tabindex="-1">所有案例的tsconfig 配置 <a class="header-anchor" href="#所有案例的tsconfig-配置" aria-label="Permalink to &quot;所有案例的tsconfig 配置&quot;">​</a></h2><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">  &quot;compilerOptions&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">    &quot;target&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;esnext&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;experimentalDecorators&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;moduleResolution&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;NodeNext&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;module&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;NodeNext&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;outDir&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;dist&quot;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="类装饰器" tabindex="-1">类装饰器 <a class="header-anchor" href="#类装饰器" aria-label="Permalink to &quot;类装饰器&quot;">​</a></h2><p>类装饰器本质是一个函数，该函数接收一个参数，表示类本身（构造函数本身），允许你修改类的行为或添加新的行为，而无需直接修改类的源代码。通过使用类装饰器，使用装饰器 @ 得到一个函数</p><p>通过下面案例可以发现装饰器函数有一个参数，这个参数 target 因此知道target 是谁就可以确定给所加的元数据针对。 下面代码运行结果可以发现其实就是<strong>构造函数</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> o</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecoration</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  o </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> target;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@classDecoration</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(o </span><span style="color:#0184BC;">===</span><span style="color:#986801;"> A</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(o </span><span style="color:#0184BC;">===</span><span style="color:#383A42;"> a.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(o </span><span style="color:#0184BC;">===</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">(a).</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>知道了target 其实就是构造函数那么ts 类型这里就不能是 any 应该是表示类本身（构造函数本身），在TS中，构造函数的表示</p><ul><li><code>Function</code></li><li><code>new (...args:any[]) =&gt; any</code></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 定义为Function</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecoration</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">) { </span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;classDecoration&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecoration</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> { }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 定义为构造函数</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecoration</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;classDecoration&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecoration</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> { }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>进一步可以通过泛型约束 来进一步完善 ts 写装饰器</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 泛型类型别名</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecoration</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;classDecoration&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecoration</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> { }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>具体约束</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> User</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  id</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span></span>
<span class="line"><span style="color:#383A42;">  name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span></span>
<span class="line"><span style="color:#4078F2;">  info</span><span style="color:#383A42;">()</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecoration</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">User</span><span style="color:#383A42;">&gt;&gt;(target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;classDecoration&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecoration</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> { </span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">public</span><span style="color:#383A42;"> id</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">, </span><span style="color:#A626A4;">public</span><span style="color:#383A42;"> name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) { }</span></span>
<span class="line"><span style="color:#4078F2;">  info</span><span style="color:#383A42;">(){}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="运行时机" tabindex="-1">运行时机 <a class="header-anchor" href="#运行时机" aria-label="Permalink to &quot;运行时机&quot;">​</a></h3><p>类装饰器的运行时机是在定义这个类的时候，就会运行。而不是必须要等到你 new 对象的时候才会执行，可以看一下 ts 编译后js 的文件</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#50A14F;">&quot;use strict&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> __decorate </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">this</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">__decorate</span><span style="color:#383A42;">) </span><span style="color:#0184BC;">||</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (decorators, target, key, desc) {</span></span>
<span class="line"><span style="color:#A626A4;">    var</span><span style="color:#383A42;"> c </span><span style="color:#0184BC;">=</span><span style="color:#E45649;"> arguments</span><span style="color:#383A42;">.</span><span style="color:#E45649;">length</span><span style="color:#383A42;">, r </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> c </span><span style="color:#0184BC;">&lt;</span><span style="color:#986801;"> 3</span><span style="color:#0184BC;"> ?</span><span style="color:#383A42;"> target </span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> desc </span><span style="color:#0184BC;">===</span><span style="color:#986801;"> null</span><span style="color:#0184BC;"> ?</span><span style="color:#383A42;"> desc </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(target, key) </span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> desc, d;</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> Reflect </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &quot;object&quot;</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#0184BC;"> typeof</span><span style="color:#383A42;"> Reflect.</span><span style="color:#E45649;">decorate</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;function&quot;</span><span style="color:#383A42;">) r </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">decorate</span><span style="color:#383A42;">(decorators, target, key, desc);</span></span>
<span class="line"><span style="color:#A626A4;">    else</span><span style="color:#A626A4;"> for</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">var</span><span style="color:#383A42;"> i </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> decorators.</span><span style="color:#E45649;">length</span><span style="color:#0184BC;"> -</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">; i </span><span style="color:#0184BC;">&gt;=</span><span style="color:#986801;"> 0</span><span style="color:#383A42;">; i</span><span style="color:#0184BC;">--</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (d </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> decorators[i]) r </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> (c </span><span style="color:#0184BC;">&lt;</span><span style="color:#986801;"> 3</span><span style="color:#0184BC;"> ?</span><span style="color:#4078F2;"> d</span><span style="color:#383A42;">(r) </span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> c </span><span style="color:#0184BC;">&gt;</span><span style="color:#986801;"> 3</span><span style="color:#0184BC;"> ?</span><span style="color:#4078F2;"> d</span><span style="color:#383A42;">(target, key, r) </span><span style="color:#0184BC;">:</span><span style="color:#4078F2;"> d</span><span style="color:#383A42;">(target, key)) </span><span style="color:#0184BC;">||</span><span style="color:#383A42;"> r;</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> c </span><span style="color:#0184BC;">&gt;</span><span style="color:#986801;"> 3</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> r </span><span style="color:#0184BC;">&amp;&amp;</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(target, key, r), r;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecoration</span><span style="color:#383A42;">(target) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;classDecoration&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#986801;"> A</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 其实通过编译之后的代码，就可以看到，直接运行了__decorate函数</span></span>
<span class="line"><span style="color:#986801;">A</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> __decorate</span><span style="color:#383A42;">([</span></span>
<span class="line"><span style="color:#383A42;">    classDecoration</span></span>
<span class="line"><span style="color:#383A42;">], </span><span style="color:#986801;">A</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h3><p>类装饰器可以具有的返回值：</p><ul><li>void：仅运行函数</li><li>返回一个新的类：会将新的类替换掉装饰目标</li></ul><h4 id="属性和方面的绑定" tabindex="-1">属性和方面的绑定 <a class="header-anchor" href="#属性和方面的绑定" aria-label="Permalink to &quot;属性和方面的绑定&quot;">​</a></h4><p>如果我们想通过传入一些参数这里 就需要使用 工厂模式的效果进行，只要最后返回一个装饰器函数即可</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&gt;(str</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;普通方法的参数:&quot;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> str);</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) { </span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;类装饰器&quot;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> str)  </span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDecorator</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;hello&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> { </span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>因为 target 是一个构造函数，因此你可以绑定静态属性或者静态方法(也就是类属性类方法)，也可以通过 prototype上进行 装饰器给实例添加属性和方法,注意属性绑定在原型链上会污染的不建议将属性绑定在原型链上</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&gt;(obj</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Record</span><span style="color:#383A42;">&lt;string, any&gt;) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    Reflect.</span><span style="color:#4078F2;">ownKeys</span><span style="color:#383A42;">(obj).</span><span style="color:#4078F2;">forEach</span><span style="color:#383A42;">((key) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // 绑在类属性和类方法上</span></span>
<span class="line"><span style="color:#383A42;">      Reflect.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(target, key, Reflect.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&quot;key&quot;</span><span style="color:#383A42;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // 绑在原型链上</span></span>
<span class="line"><span style="color:#383A42;">      Reflect.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(</span><span style="color:#C18401;">target</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, key, Reflect.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&quot;key&quot;</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#383A42;">    });</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDecorator</span><span style="color:#383A42;">({</span></span>
<span class="line"><span style="color:#E45649;">  age</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;222&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#4078F2;">  getName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#383A42;">})</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">A</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><img src="`+p+`" alt=""></p><ul><li>混入多个对象</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&gt;(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">list</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Record</span><span style="color:#383A42;">&lt;string, any&gt;[]) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 利用装饰混入多个属性案例</span></span>
<span class="line"><span style="color:#383A42;">    Object.</span><span style="color:#4078F2;">assign</span><span style="color:#383A42;">(</span><span style="color:#C18401;">target</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">list);</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDecorator</span><span style="color:#383A42;">({</span></span>
<span class="line"><span style="color:#4078F2;">  getName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#383A42;">})</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">A</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="实现继承" tabindex="-1">实现继承 <a class="header-anchor" href="#实现继承" aria-label="Permalink to &quot;实现继承&quot;">​</a></h4><p>如果装饰返回的是一个class 则变相继承，也就是装饰器返回的类替换了被装饰的类，并且在ts 这些不会进行类型推导会导致说返回的新的类，并不知道有新加的内容</p><p>案例中很明显发现 对象实例构造函数不是 A 而是 <code>[class (anonymous) extends A]</code></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&gt;(target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> class</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> target</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#383A42;"> newProperty </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;new property&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#383A42;"> hello </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;override&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#4078F2;">    info</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;this is info&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecorator</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#383A42;"> hello </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;hello world&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> objA</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(objA.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [class (anonymous) extends A]</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(objA.</span><span style="color:#E45649;">hello</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// override</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((objA as </span><span style="color:#0184BC;">any</span><span style="color:#383A42;">).</span><span style="color:#E45649;">newProperty</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//   new property 很明显，没有类型使用any</span></span>
<span class="line"><span style="color:#383A42;">(objA as </span><span style="color:#0184BC;">any</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">info</span><span style="color:#383A42;">(); </span><span style="color:#A0A1A7;font-style:italic;">// this is info</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> replaceConstructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#383A42;"> { </span><span style="color:#A626A4;">new</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> any[])</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {} }&gt;(constructor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> class</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">        constructor</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#E45649;">            super</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args);</span></span>
<span class="line"><span style="color:#383A42;">            console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Instance created&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@replaceConstructor</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">public</span><span style="color:#383A42;"> name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> user</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> User</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Alice&quot;</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="没有返回继承" tabindex="-1">没有返回继承 <a class="header-anchor" href="#没有返回继承" aria-label="Permalink to &quot;没有返回继承&quot;">​</a></h4><p>如果在构造函数的时候没有去继承 target 而是直接去返回class 则装饰器的 class 会覆盖被装饰器修饰的class 本身</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> any&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&gt;(target</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> class</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#383A42;"> hello </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;override&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">@classDecorator</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#383A42;"> hello </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;hello world&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> objA</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(objA.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [class (anonymous)]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(objA.</span><span style="color:#E45649;">hello</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// override</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>要注意的是多个装饰器修饰后使用工厂函数传参他们执行顺序<strong>从下到上</strong>，但是 被修饰装饰器是从下到上</li></ul><h2 id="成员装饰器-属性和方法装饰器" tabindex="-1">成员装饰器（属性和方法装饰器） <a class="header-anchor" href="#成员装饰器-属性和方法装饰器" aria-label="Permalink to &quot;成员装饰器（属性和方法装饰器）&quot;">​</a></h2><ul><li>属性</li></ul><p>属性装饰器也是一个函数，该函数需要两个参数：</p><ol><li>如果是静态属性，则为类本身；如果是实例属性，则为类的原型；</li><li>固定为一个字符串，表示属性名</li></ol><ul><li>方法（获取当前实例this 参考日志的案例中this指向）</li></ul><p>方法装饰器也是一个函数，该函数需要三个参数：</p><ol><li>如果是静态方法，则为类本身；如果是实例方法，则为类的原型；</li><li>固定为一个字符串，表示方法名</li><li>属性描述对象 ( <code>configurable</code>, <code>enumerable</code> , <code>value</code> , <code>writable</code> , <code>get</code> , <code>set</code> )</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> params</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target, key);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> fun</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, des</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target, key, des);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @params</span></span>
<span class="line"><span style="color:#A626A4;">  static</span><span style="color:#383A42;"> age</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @params</span></span>
<span class="line"><span style="color:#383A42;">  name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @fun</span></span>
<span class="line"><span style="color:#A626A4;">  static</span><span style="color:#4078F2;"> getAge</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#986801;"> A</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @fun</span></span>
<span class="line"><span style="color:#4078F2;">  getName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 说明一下 {} 其实就是原型对象 既 A.prototype</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {} name</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {} getName {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   value: [Function: getName],</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   writable: true,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   enumerable: false,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   configurable: true</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// [class A] age</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// [class A] getAge {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   value: [Function: getAge],</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   writable: true,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   enumerable: false,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   configurable: true</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="使用案例-1" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例-1" aria-label="Permalink to &quot;使用案例&quot;">​</a></h3><p>这说明一下 js 属性装饰器其实有第三个参数 属性描述对象 但是不能去修改他的value，在ts 中是没有的</p><h4 id="给方法在执行前后做拦截" tabindex="-1">给方法在执行前后做拦截 <a class="header-anchor" href="#给方法在执行前后做拦截" aria-label="Permalink to &quot;给方法在执行前后做拦截&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> enumerable</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target, key, descriptor)</span></span>
<span class="line"><span style="color:#383A42;">    descriptor.</span><span style="color:#E45649;">enumerable</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 被废弃的方法</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> noUse</span><span style="color:#383A42;">() { </span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    descriptor.</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () { </span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;被废弃的方法&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> interceptor</span><span style="color:#383A42;">(str</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) { </span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> temp</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">value</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    descriptor.</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) { </span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;前置拦截---&quot;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> str);</span></span>
<span class="line"><span style="color:#383A42;">      temp.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;后置拦截---&quot;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> str);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  prop1</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  prop2</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">enumerable</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#4078F2;">  method1</span><span style="color:#383A42;">() { }</span></span>
<span class="line"><span style="color:#383A42;">  </span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">enumerable</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">noUse</span><span style="color:#383A42;">()  </span></span>
<span class="line"><span style="color:#4078F2;">  method2</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;正常执行......&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">enumerable</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">interceptor</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;interceptor&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#4078F2;">  method3</span><span style="color:#383A42;">(str</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;正在执行 method3:&quot;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> str)</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> objA</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">for</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">let</span><span style="color:#383A42;"> prop </span><span style="color:#A626A4;">in</span><span style="color:#383A42;"> objA){</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(prop)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行被废弃的方法</span></span>
<span class="line"><span style="color:#383A42;">objA.</span><span style="color:#4078F2;">method2</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 拦截</span></span>
<span class="line"><span style="color:#383A42;">objA.</span><span style="color:#4078F2;">method3</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;hello world&quot;</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h4 id="做一些数据缓存" tabindex="-1">做一些数据缓存 <a class="header-anchor" href="#做一些数据缓存" aria-label="Permalink to &quot;做一些数据缓存&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> cache</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> original</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">value</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> cacheMap</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Map</span><span style="color:#383A42;">&lt;string, any&gt;();</span></span>
<span class="line"><span style="color:#383A42;">  descriptor.</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> key</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> JSON</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">stringify</span><span style="color:#383A42;">(args);</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (cacheMap.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(key)) {</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#383A42;"> cacheMap.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(key);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`==阶乘: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">args</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> original.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">    cacheMap.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(key, result);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> result;</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MathOperations</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @cache</span></span>
<span class="line"><span style="color:#4078F2;">  factorial</span><span style="color:#383A42;">(n</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (n </span><span style="color:#0184BC;">&lt;=</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">return</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> n </span><span style="color:#0184BC;">*</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">factorial</span><span style="color:#383A42;">(n </span><span style="color:#0184BC;">-</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h4 id="给方法加日志" tabindex="-1">给方法加日志 <a class="header-anchor" href="#给方法加日志" aria-label="Permalink to &quot;给方法加日志&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#E45649;font-style:italic;"> target</span><span style="color:#A0A1A7;font-style:italic;"> 如果是类的静态方法，target就是类本身; 如果是实例对象，则target是实例</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#E45649;font-style:italic;"> propKey</span><span style="color:#A0A1A7;font-style:italic;"> 装饰的成员名称</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#E45649;font-style:italic;"> descriptor</span><span style="color:#A0A1A7;font-style:italic;"> 成员的属性喵舒服</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> log</span><span style="color:#383A42;">(target, propKey, descriptor) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> originalMethod</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">value</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  descriptor.</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Calling </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">propKey</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;"> with arguments: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">args</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> originalMethod.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Result: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">result</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> result;</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Calculator</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @log</span></span>
<span class="line"><span style="color:#4078F2;">  add</span><span style="color:#383A42;">(a</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">, b</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">+</span><span style="color:#383A42;"> b;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> c1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Calculator</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(c1.</span><span style="color:#4078F2;">add</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">6</span><span style="color:#383A42;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Calling add with arguments: 1,6</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Result: 7</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h4 id="权限配置" tabindex="-1">权限配置 <a class="header-anchor" href="#权限配置" aria-label="Permalink to &quot;权限配置&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> users </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;001&quot;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">roles</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">] },</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;002&quot;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">roles</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;member&quot;</span><span style="color:#383A42;">] },</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;003&quot;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">roles</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">] },</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> authorize</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  propKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> original</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">value</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  descriptor.</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#A626A4;">    let</span><span style="color:#383A42;"> user </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> users[args[</span><span style="color:#986801;">0</span><span style="color:#383A42;">]];</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (user </span><span style="color:#0184BC;">&amp;&amp;</span><span style="color:#383A42;"> user.</span><span style="color:#E45649;">roles</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">includes</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">)) {</span></span>
<span class="line"><span style="color:#383A42;">      original.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">    } </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">      throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;User is not authorized&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> AdminPanel</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @authorize</span></span>
<span class="line"><span style="color:#4078F2;">  deleteUser</span><span style="color:#383A42;">(userId</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`user </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">userId</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;"> is deleted\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> adminPanel</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> AdminPanel</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">adminPanel.</span><span style="color:#4078F2;">deleteUser</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;002&quot;</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// throw error</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h4 id="设置描述符" tabindex="-1">设置描述符 <a class="header-anchor" href="#设置描述符" aria-label="Permalink to &quot;设置描述符&quot;">​</a></h4><p>可以直接返回一个描述符对象</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> authorize</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  propKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 直接放回一个描述符的对象</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    value</span><span style="color:#383A42;">(params) {</span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(params, </span><span style="color:#986801;">122</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#50A14F;"> &quot;我被装饰了&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 如果不配置下面三个项走他们的默认值</span></span>
<span class="line"><span style="color:#E45649;">    writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> AdminPanel</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @authorize</span></span>
<span class="line"><span style="color:#4078F2;">  deleteUser</span><span style="color:#383A42;">(userId</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> isEnumerable</span><span style="color:#383A42;">(params) {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> (target, name, descriptor)</span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#383A42;">        descriptor.</span><span style="color:#E45649;">enumerable</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> params</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(descriptor)</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> descriptor</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">isEnumerable</span><span style="color:#383A42;">(</span><span style="color:#986801;">true</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#4078F2;">    speak</span><span style="color:#383A42;">(params){</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#50A14F;"> &#39;我瞎说&#39;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> person</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">for</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">let</span><span style="color:#383A42;"> i </span><span style="color:#A626A4;">in</span><span style="color:#383A42;"> person){</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(i) </span><span style="color:#A0A1A7;font-style:italic;">// speak</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="访问器属性装饰器" tabindex="-1">访问器属性装饰器 <a class="header-anchor" href="#访问器属性装饰器" aria-label="Permalink to &quot;访问器属性装饰器&quot;">​</a></h2><p>访问器饰器也是一个函数，该函数需要三个参数：</p><ol><li>类的原型；</li><li>固定为一个字符串，表示方法名</li><li>属性描述对象 ( <code>configurable</code>, <code>enumerable</code> , <code>writable</code> , <code>get</code> , <code>set</code> )</li></ol><p>可以获取到this，其实只要给get 或 set 任意加上装饰器就可以进行拦截</p><h3 id="使用案例-2" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例-2" aria-label="Permalink to &quot;使用案例&quot;">​</a></h3><h3 id="基础案例" tabindex="-1">基础案例 <a class="header-anchor" href="#基础案例" aria-label="Permalink to &quot;基础案例&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> d</span><span style="color:#383A42;">(str</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> d</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(</span></span>
<span class="line"><span style="color:#383A42;">    target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">    key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">    descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> TypedPropertyDescriptor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">  ) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target, key);</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> temp</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">set</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    descriptor.</span><span style="color:#4078F2;">set</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;前置&quot;</span><span style="color:#383A42;">, str);</span></span>
<span class="line"><span style="color:#383A42;">      temp.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, value);</span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;后置&quot;</span><span style="color:#383A42;">, str);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#383A42;"> id</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#383A42;"> name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">  private</span><span style="color:#383A42;"> _age</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">d</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;hello&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#0184BC;">  set</span><span style="color:#4078F2;"> age</span><span style="color:#383A42;">(v</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;set&quot;</span><span style="color:#383A42;">, v);</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> v;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> u</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> User</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">u.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> 10</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {} age</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 前置 hello</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// set 10</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 后置 hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="日志案例拦截判断get-还是set" tabindex="-1">日志案例拦截判断get 还是set <a class="header-anchor" href="#日志案例拦截判断get-还是set" aria-label="Permalink to &quot;日志案例拦截判断get 还是set&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> log</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> originalGet</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">get</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> originalSet</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">set</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (originalGet) {</span></span>
<span class="line"><span style="color:#383A42;">        descriptor.</span><span style="color:#4078F2;">get</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">            const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> originalGet.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">            console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Getting value of </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">propertyKey</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">result</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#383A42;"> result;</span></span>
<span class="line"><span style="color:#383A42;">        };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (originalSet) {</span></span>
<span class="line"><span style="color:#383A42;">        descriptor.</span><span style="color:#4078F2;">set</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">            console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Setting value of </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">propertyKey</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;"> to: </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">value</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">            originalSet.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, [value]);</span></span>
<span class="line"><span style="color:#383A42;">        };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> descriptor;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#383A42;"> _name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">    @log</span></span>
<span class="line"><span style="color:#0184BC;">    get</span><span style="color:#4078F2;"> name</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#0184BC;">    set</span><span style="color:#4078F2;"> name</span><span style="color:#383A42;">(value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> value;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> user</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> User</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Alice&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(user.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// Getting value of name: Alice</span></span>
<span class="line"><span style="color:#383A42;">user.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;Bob&quot;</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// Setting value of name to: Bob</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(user.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// Getting value of name: Bob</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h4 id="设置权限" tabindex="-1">设置权限 <a class="header-anchor" href="#设置权限" aria-label="Permalink to &quot;设置权限&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> adminOnly</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> originalGet</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> descriptor.</span><span style="color:#E45649;">get</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  descriptor.</span><span style="color:#4078F2;">get</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> user</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">role</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;user&quot;</span><span style="color:#383A42;"> }; </span><span style="color:#A0A1A7;font-style:italic;">// 示例用户对象</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (user.</span><span style="color:#E45649;">role</span><span style="color:#0184BC;"> !==</span><span style="color:#50A14F;"> &quot;admin&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">      throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Access denied&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> originalGet.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> descriptor;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> SecureData</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  private</span><span style="color:#383A42;"> _secret</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;top secret&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  @adminOnly</span></span>
<span class="line"><span style="color:#0184BC;">  get</span><span style="color:#4078F2;"> secret</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_secret</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> data</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> SecureData</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">try</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(data.</span><span style="color:#E45649;">secret</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 抛出错误: Access denied</span></span>
<span class="line"><span style="color:#383A42;">} </span><span style="color:#A626A4;">catch</span><span style="color:#383A42;"> (error) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(error.</span><span style="color:#E45649;">message</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="方法参数装饰器" tabindex="-1">方法参数装饰器 <a class="header-anchor" href="#方法参数装饰器" aria-label="Permalink to &quot;方法参数装饰器&quot;">​</a></h2><p>方法参数几乎和属性装饰器一致，只是多了一个属性</p><ol><li><p>如果是静态属性，为类本身；如果是实例属性，为类的原型</p></li><li><p>字符串，表示方法名</p></li><li><p>表示参数顺序</p></li></ol><h3 id="使用案例-3" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例-3" aria-label="Permalink to &quot;使用案例&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> paramDecorator</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, index</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(target, key, index);</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  method1</span><span style="color:#383A42;">(@</span><span style="color:#4078F2;">paramDecorator</span><span style="color:#383A42;">() id</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">, @</span><span style="color:#4078F2;">paramDecorator</span><span style="color:#383A42;">() name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;---&quot;</span><span style="color:#383A42;">, id, name);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> objA</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">objA.</span><span style="color:#4078F2;">method1</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;hello&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {} method1 1</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {} method1 0</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// --- 1 hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="技巧" tabindex="-1">技巧 <a class="header-anchor" href="#技巧" aria-label="Permalink to &quot;技巧&quot;">​</a></h2><p>装饰器来看无论哪一种装饰器都不会获取实例对象，这是因为 装饰器在创建过程就生效。而不是在 new 创建实例时候才生效</p><p>需要确保装饰器在每个类实例创建时为实例属性赋值这通常是通过在构造函数中设置这些属性来完成的，但是由于装饰器不能直接访问类的构造函数，我们可以使用一点策略来解决</p><p>可以先挂载然后在创建实例时候去执行</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> d</span><span style="color:#383A42;">(value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;"> return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">   if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">target.</span><span style="color:#E45649;">__initProperties</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">     target.</span><span style="color:#4078F2;">__initProperties</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">       for</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">let</span><span style="color:#383A42;"> prop </span><span style="color:#A626A4;">in</span><span style="color:#383A42;"> target.</span><span style="color:#E45649;">__props</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">         this</span><span style="color:#383A42;">[prop] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> target.</span><span style="color:#E45649;">__props</span><span style="color:#383A42;">[prop];</span></span>
<span class="line"><span style="color:#383A42;">       }</span></span>
<span class="line"><span style="color:#383A42;">     };</span></span>
<span class="line"><span style="color:#383A42;">     target.</span><span style="color:#E45649;">__props</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {};</span></span>
<span class="line"><span style="color:#383A42;">   }</span></span>
<span class="line"><span style="color:#383A42;">   target.</span><span style="color:#E45649;">__props</span><span style="color:#383A42;">[key] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> value;</span></span>
<span class="line"><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;"> @</span><span style="color:#4078F2;">d</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;hello&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;"> prop1</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;"> @</span><span style="color:#4078F2;">d</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;world&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;"> prop2</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;"> constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">   if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">[</span><span style="color:#50A14F;">&quot;__initProperties&quot;</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &quot;function&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">     this</span><span style="color:#383A42;">[</span><span style="color:#50A14F;">&quot;__initProperties&quot;</span><span style="color:#383A42;">]();</span></span>
<span class="line"><span style="color:#383A42;">   }</span></span>
<span class="line"><span style="color:#383A42;"> }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">prop1</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// Output: &quot;hello&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">prop2</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// Output: &quot;world&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li>改变类实例在构造函数时候声明</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> defaultValues</span><span style="color:#383A42;">(defaults</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { [key</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">]</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;"> }) {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> &lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#383A42;"> { </span><span style="color:#A626A4;">new</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> any[])</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {} }&gt;(constructor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#A626A4;"> class</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">        constructor</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#E45649;">          super</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args);</span></span>
<span class="line"><span style="color:#383A42;">          Object.</span><span style="color:#4078F2;">keys</span><span style="color:#383A42;">(defaults).</span><span style="color:#4078F2;">forEach</span><span style="color:#383A42;">(key </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">this</span><span style="color:#383A42;">[key] </span><span style="color:#0184BC;">===</span><span style="color:#986801;"> undefined</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">              this</span><span style="color:#383A42;">[key] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> defaults[key];</span></span>
<span class="line"><span style="color:#383A42;">            }</span></span>
<span class="line"><span style="color:#383A42;">          });</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">      }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">  </span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">defaultValues</span><span style="color:#383A42;">({</span></span>
<span class="line"><span style="color:#E45649;">    theme</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;dark&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  })</span></span>
<span class="line"><span style="color:#A626A4;">  class</span><span style="color:#C18401;"> Settings</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    theme</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">  </span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> s1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Settings</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(s1.</span><span style="color:#E45649;">theme</span><span style="color:#383A42;">);  </span><span style="color:#A0A1A7;font-style:italic;">// 输出应该是 &quot;dark&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这里有个小冲突 <code>&quot;target&quot;: &quot;esnext&quot;</code> 如果你配置的是 <code>&quot;target&quot;: &quot;es2015&quot;</code> 你完全可以使用 get set 进行拦截也就是这样是生效的，但是这样的代码在 <code>&quot;target&quot;: &quot;esnext&quot;</code> 不生效的，但这种在原型链上的绑定属于污染 也不建议这么写</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">//属性访问控制</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//还可以实现用属性装饰器来进行访问控制或者设置初始设置</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> defaultValue</span><span style="color:#383A42;">(value</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;">,propertyKey</span><span style="color:#0184BC;">:string</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">        let</span><span style="color:#383A42;"> val </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> value;</span></span>
<span class="line"><span style="color:#A626A4;">        const</span><span style="color:#4078F2;"> getter</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#383A42;"> val;</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#A626A4;">        const</span><span style="color:#4078F2;"> setter</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(newValue){</span></span>
<span class="line"><span style="color:#383A42;">            val </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> newValue</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">        //在类的原型上定义了一个属性</span></span>
<span class="line"><span style="color:#383A42;">        Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(target,propertyKey,{</span></span>
<span class="line"><span style="color:#E45649;">            enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;">true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">            configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;">true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">            get</span><span style="color:#0184BC;">:</span><span style="color:#383A42;">getter,</span></span>
<span class="line"><span style="color:#E45649;">            set</span><span style="color:#0184BC;">:</span><span style="color:#383A42;">setter</span></span>
<span class="line"><span style="color:#383A42;">        });</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Settings</span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">defaultValue</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;dark&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    theme</span><span style="color:#0184BC;">:string</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> settings</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Settings</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(settings.</span><span style="color:#E45649;">theme</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="执行顺序" tabindex="-1">执行顺序 <a class="header-anchor" href="#执行顺序" aria-label="Permalink to &quot;执行顺序&quot;">​</a></h2><ol><li>属性装饰器（Property Decorators）和方法装饰器（Method Decorators）以及访问器装饰器（Accessor Decorators）</li></ol><ul><li>按照它们在类中出现的顺序，从上到下依次执行。</li></ul><ol start="2"><li>参数装饰器（Parameter Decorators）</li></ol><ul><li>在执行方法装饰器之前执行，按照参数的位置从左到右依次执行。</li></ul><ol start="3"><li>类装饰器（Class Decorators）</li></ol><ul><li>最后执行。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDecorator</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#4078F2;">constructor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Class decorator&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> methodDecorator</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Method decorator&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> accessorDecorator</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, descriptor</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> PropertyDescriptor</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Accessor decorator&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> propertyDecorator</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Property decorator&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> parameterDecorator</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, parameterIndex</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Parameter decorator&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDecorator</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Example</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">propertyDecorator</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">    prop</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">accessorDecorator</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#0184BC;">    get</span><span style="color:#4078F2;"> myProp</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prop</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">methodDecorator</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#4078F2;">    method</span><span style="color:#383A42;">(@</span><span style="color:#4078F2;">parameterDecorator</span><span style="color:#383A42;">() param</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Method execution&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Property decorator</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Accessor decorator</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Parameter decorator</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Method decorator</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Class decorator</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://wangdoc.com/typescript/decorator-legacy" target="_blank" rel="noreferrer">网道 / WangDoc.com</a></p>`,98),r=[e];function c(t,y,i,A,b,u){return a(),n("div",null,r)}const C=s(o,[["render",c]]);export{d as __pageData,C as default};
