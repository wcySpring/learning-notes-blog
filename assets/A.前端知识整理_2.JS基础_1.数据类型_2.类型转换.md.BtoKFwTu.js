import{_ as s,c as n,o as a,a8 as l,a9 as p}from"./chunks/framework.6k5lawSO.js";const d=JSON.parse('{"title":"","description":"原始类型的包装类","frontmatter":{"description":"原始类型的包装类"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/1.数据类型/2.类型转换.md","filePath":"A.前端知识整理/2.JS基础/1.数据类型/2.类型转换.md","lastUpdated":1689587902000}'),o={name:"A.前端知识整理/2.JS基础/1.数据类型/2.类型转换.md"},e=l(`<p>按照正常理解来说<strong>原始类型并非对象类型</strong>，所以从理论上来说，它们是<strong>没有办法获取属性或者调用方法</strong></p><p>下面案例name 是一个字符串类型，但是可以像对象一样使用调用length 方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;">  name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;Hello World&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(name.</span><span style="color:#E45649;">length</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这就涉及到了类型转换</p><h2 id="装箱转换" tabindex="-1">装箱转换 <a class="header-anchor" href="#装箱转换" aria-label="Permalink to &quot;装箱转换&quot;">​</a></h2><p>上面是因为JavaScript为了可以使其可以获取属性和调用方法，对其封装了对应的包装类型，常见的包装类型有：String、Number、Boolean、Symbol、BigInt类型</p><p>每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象</p><p>抛开symbol 看其他类型的装箱转换</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Number</span></span>
<span class="line"><span style="color:#986801;">1</span></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Number</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// String</span></span>
<span class="line"><span style="color:#50A14F;">&#39;aaa&#39;</span></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> String</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;aaa&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Boolean</span></span>
<span class="line"><span style="color:#986801;">true</span></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Boolean</span><span style="color:#383A42;">(</span><span style="color:#986801;">true</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>特殊的Symbol</strong> 由于Symbol 类型是不支持new 来调用的，因此转换我们可以使用一个call来帮助 <code>var symbolObject = (function(){ return this; }).call(Symbol(&quot;a&quot;));</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> symbolObject); </span><span style="color:#A0A1A7;font-style:italic;">//object</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(symbolObject </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> Symbol</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(symbolObject.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> ==</span><span style="color:#383A42;"> Symbol); </span><span style="color:#A0A1A7;font-style:italic;">//true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当调用一个原始类型的属性或者方法时，会进行如下操作:</p><ol><li>根据原始值，创建一个原始类型对应的包装类型对象</li><li>调用对应的属性或者方法，返回一个新的值</li><li>创建的包装类对象被销毁</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// var name = &quot;Hello World&quot;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(name.length)</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> name </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> String</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Hello World&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(name.</span><span style="color:#E45649;">length</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注：JavaScript引擎会进行很多的优化，它可以跳过创建包装类的过程在内部直接完成属性的获取或者方法的调用，null、undefined没有任何的方法，也没有对应的对象包装类</p><h2 id="拆箱转换" tabindex="-1">拆箱转换 <a class="header-anchor" href="#拆箱转换" aria-label="Permalink to &quot;拆箱转换&quot;">​</a></h2><p>拆箱转换指的是将包装对象转换成对应的基本数据类型的过程</p><ul><li>在 JavaScript 标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换（即，拆箱转换）。</li><li>拆箱转换会尝试调用 valueOf 和 toString 来获得拆箱后的基本类型。如果 valueOf 和 toString 都不存在，或者没有返回基本类型，则会产生类型错误 TypeError。</li></ul><p>以数字的拆箱转换，将定义的对象 进行拆箱变为基本类型</p><ol><li>当执行o*2 时候由于2 是数字因此先调用valueOf,没有值 就调用toString，也没值就报错</li><li>如果是 o+&#39;&#39; 就会先调用toString没值，调用valueOf 没值就报错</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> o </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    valueOf</span><span style="color:#0184BC;"> :</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;valueOf&quot;</span><span style="color:#383A42;">); </span><span style="color:#A626A4;">return</span><span style="color:#383A42;"> {}},</span></span>
<span class="line"><span style="color:#4078F2;">    toString</span><span style="color:#0184BC;"> :</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;toString&quot;</span><span style="color:#383A42;">); </span><span style="color:#A626A4;">return</span><span style="color:#383A42;"> {}}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">o </span><span style="color:#0184BC;">*</span><span style="color:#986801;"> 2</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// valueOf</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// toString</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// TypeError</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在 es6 开始允许对象通过显式指定 <strong>@@toPrimitive Symbol</strong> 来覆盖原有的行为，因此整个过程变成了先 <strong>@@toPrimitive Symbol</strong> =》valueOf 或者 toString <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive" target="_blank" rel="noreferrer">toPrimitive </a></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> o </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    valueOf</span><span style="color:#0184BC;"> :</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;valueOf&quot;</span><span style="color:#383A42;">); </span><span style="color:#A626A4;">return</span><span style="color:#383A42;"> {}},</span></span>
<span class="line"><span style="color:#4078F2;">    toString</span><span style="color:#0184BC;"> :</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;toString&quot;</span><span style="color:#383A42;">); </span><span style="color:#A626A4;">return</span><span style="color:#383A42;"> {}}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">o[Symbol.</span><span style="color:#C18401;">toPrimitive</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;toPrimitive&quot;</span><span style="color:#383A42;">); </span><span style="color:#A626A4;">return</span><span style="color:#50A14F;"> &quot;hello&quot;</span><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(o </span><span style="color:#0184BC;">+</span><span style="color:#50A14F;"> &quot;&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// toPrimitive</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// hello</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="类型转换可以总结为下表" tabindex="-1">类型转换可以总结为下表 <a class="header-anchor" href="#类型转换可以总结为下表" aria-label="Permalink to &quot;类型转换可以总结为下表&quot;">​</a></h2><p><img src="`+p+`" alt="图 0"></p><p>里面有些小细节除了上面整体按照 拆箱和 装箱的 逻辑外，在一些特殊情况略有不同</p><ul><li>需要注意：当 Number 绝对值较大或者较小时，字符串表示则是使用科学计数法表示的</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">String</span><span style="color:#383A42;">(</span><span style="color:#986801;">1000000000000000000000000000000000000000</span><span style="color:#383A42;">))</span></span>
<span class="line"><span style="color:#383A42;">打印结果：</span></span>
<span class="line"><span style="color:#986801;">1e+39</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="触发类型转换的一些操作" tabindex="-1">触发类型转换的一些操作 <a class="header-anchor" href="#触发类型转换的一些操作" aria-label="Permalink to &quot;触发类型转换的一些操作&quot;">​</a></h2><ol><li>运算相关的操作符包括 <code>+、-、+=、++、* 、/、%、&lt;&lt;、&amp;</code> 等。</li><li>数据比较相关的操作符包括 <code>&gt;、&lt;、== 、&lt;=、&gt;=、===</code>。</li><li>逻辑判断相关的操作符包括 <code>&amp;&amp;、!、||、三目运算符</code>。</li></ol><h3 id="号类型转换" tabindex="-1">+ 号类型转换 <a class="header-anchor" href="#号类型转换" aria-label="Permalink to &quot;+ 号类型转换&quot;">​</a></h3><ol><li>&#39;+&#39; 可表示数字计算，字符串拼接 <ul><li>当加号两边一边是字符串时候为字符串拼接</li><li>当加号两边为数字时候是数字计算</li><li>加号两边有一边是对象的时候先调用 <code>obj[Symbol.toPrimitive](&#39;default&#39;)&quot;</code> =&gt; 没有这个属性，<code>则再次valueOf</code>=&gt; <code>valueOf获取的不是原始值，则继续toString，此时获取的结果是字符串</code>，+就变为字符串拼接了&#39; ,说明原始值像<code>const a = {}</code>; <strong>a.valueOf() 得到的是{ } 就是非基本类型原始值，则会继续调用toString</strong></li></ul></li><li>&#39;+&#39; 只有一边 ，一般都是转换为数字，举个例子 +true 则为 1</li></ol><p>更多的 <code>Symbol.toPrimitive</code> 案例说明</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#383A42;"> console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> [</span><span style="color:#986801;">10</span><span style="color:#383A42;">]);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 没有Symbol.toPrimitive -&gt; valueOf获取的也不是原始值 -&gt; 调用toString &quot;10&quot;  =&gt; &quot;1010&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> {});</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 没有Symbol.toPrimitive -&gt; valueOf获取的也不是原始值 -&gt; 调用toString  &quot;[object Object]&quot;  =&gt; &quot;10[object Object]&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#0184BC;"> +</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">());</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 调用日期的Symbol.toPrimitive(&#39;default&#39;) =&gt; &quot;10Sun Jul 25 2021 11:28:37 GMT+0800 (中国标准时间)&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#0184BC;"> +</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Number</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 没有Symbol.toPrimitive -&gt; valueOf 10 =&gt; 20</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#0184BC;"> +</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> String</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;10&#39;</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 没有Symbol.toPrimitive -&gt; valueOf &quot;10&quot; =&gt; &quot;1010&quot; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// --------------------</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注意案例 <strong>{}+1 直接在浏览器输入显示结果 为 1 原因是 此时{} 不代表对象而是&#39;块&#39; ，也就是只有 +1有自己含义，即为1</strong></p><h3 id="和" tabindex="-1">&#39;==&#39; 和 &#39;===&#39; <a class="header-anchor" href="#和" aria-label="Permalink to &quot;&#39;==&#39; 和 &#39;===&#39;&quot;">​</a></h3><ol><li><p>&#39;==&#39;相等，两边数据类型不同，需要先转为相同类型，然后再进行比较</p><ul><li>对象==字符串 对象转字符串 <strong>「Symbol.toPrimitive -&gt; valueOf -&gt; toString」</strong></li><li>null==undefined -&gt; true null/undefined和其他任何值都不相等</li><li>对象==对象 比较的是堆内存地址，地址相同则相等</li><li>NaN!==NaN</li><li>除了以上情况，只要两边类型不一致，剩下的都是转换为数字，然后再进行比较的</li></ul></li><li><p>&#39;===&#39;绝对相等，如果两边类型不同，则直接是false，不会转换数据类型「推荐」</p></li></ol><h3 id="求a-满足a-1-a-2-a-3" tabindex="-1">求a 满足a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 <a class="header-anchor" href="#求a-满足a-1-a-2-a-3" aria-label="Permalink to &quot;求a 满足a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3&quot;">​</a></h3><ol><li><p>首先明确问题 即问题中使用的是双等,当双等时在和数字比较时候需要转换为数字，转换数字的过程会依次调用，即对这三种方法任意一种重写即可</p><ul><li>Symbol.toPrimitive</li><li>valueOf 获取的非原始值则继续向下找</li><li>toString</li></ul></li><li><p>利用对象基于数据劫持完成对应的操作，基于 var/function 声明的变量，其实可以看做 var a=? ==&gt; window.a=?，即只要劫持window 对象中的a 即可，使用劫持&#39;proxy&#39; 或者&#39;Object.defineProperty&#39;</p></li><li><p>总结一个误区，比较时候调用是内部机制默认触发其对应方法行为，在这期间我错误思路记录我想让a 通过闭包连续调用则出现下面代码</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> i </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// a 已经执行完了 固定是1</span></span>
<span class="line"><span style="color:#383A42;">window.</span><span style="color:#E45649;">a</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#0184BC;"> ++</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">i</span></span>
<span class="line"><span style="color:#383A42;">})()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 1</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 2</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;OK&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 解决方案一：利用 == 比较的时候，会把对象转换为数字 Number(a)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   + Symbol.toPrimitive</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   + valueOf 获取的非原始值则继续向下找</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   + toString</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   + 把字符串变为数字</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    i</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 0</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">a[Symbol.</span><span style="color:#C18401;">toPrimitive</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> toPrimitive</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // this -&gt; a</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#0184BC;"> ++</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">i</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 1</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 2</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;OK&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">a.</span><span style="color:#E45649;">toString</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> a.</span><span style="color:#E45649;">shift</span></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 1</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 2</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;OK&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 解决方案二：在全局上下文中，基于 var/function 声明的变量，并不是给VO(G)设置的全局变量「基于let/const声明的变量才是」，而是给GO(window)全局对象设置的属性      var a=?  ==&gt; window.a=?</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 我们基于数据劫持完成对应的操作</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> i </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 0</span></span>
<span class="line"><span style="color:#383A42;">Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(window, </span><span style="color:#50A14F;">&#39;a&#39;</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:#4078F2;">    get</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#0184BC;"> ++</span><span style="color:#383A42;">i</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#383A42;">})</span></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 1</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 2</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">==</span><span style="color:#986801;"> 3</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;OK&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>`,41),r=[e];function t(c,i,y,A,b,u){return a(),n("div",null,r)}const g=s(o,[["render",t]]);export{d as __pageData,g as default};
