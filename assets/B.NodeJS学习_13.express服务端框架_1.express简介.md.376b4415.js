import{_ as s,o as a,c as p,O as e}from"./chunks/framework.ab95ac3d.js";const u=JSON.parse('{"title":"","description":"了解Express.js框架的基本概念,搭建一个最小可能用应用程序","frontmatter":{"description":"了解Express.js框架的基本概念,搭建一个最小可能用应用程序","tags":["服务端","express"]},"headers":[],"relativePath":"B.NodeJS学习/13.express服务端框架/1.express简介.md","filePath":"B.NodeJS学习/13.express服务端框架/1.express简介.md","lastUpdated":1686039772000}'),n={name:"B.NodeJS学习/13.express服务端框架/1.express简介.md"},l=e(`<p>Express.js是一个基于Node.js的轻量级、灵活的Web应用框架，它提供了一系列强大的功能，用于构建单页、多页以及混合Web应用。Express.js的设计思路主要是简洁、快速、易于扩展，它通过中间件的方式集成了许许多多的外部插件来处理 HTTP 请求。让开发者能够快速搭建Web应用并进行定制。这种灵活简单的形式也存在缺点在于虽然有一些中间件包可以解决几乎所有问题或需求，但需要自己去跳转</p><p>Express 不对 Node.js 已有的特性进行二次抽象，只是在它之上扩展了 web 应用所需的基本功能。</p><p>有很多流行框架基于 Express</p><ul><li>LoopBack：高度可扩展的开源 Node.js 框架，用于快速创建动态的端到端 REST API。</li><li>Sails：用于Node.js的 MVC 框架，用于构建实用的，可用于生产的应用程序。</li><li>NestJs：一个渐进式的 Node.js 框架，用于在 TypeScript 和 JavaScript（ES6，ES7，ES8）之上构建高效，可扩展的企业级服务器端应用程序</li></ul><p><a href="https://github.com/tj" target="_blank" rel="noreferrer">TJ</a> 是express 的作者，首次发行的版本 0.12.0，依据 Express.js 的 GitHub 仓库，是在 2010 年 5 月 22 日，在 2014 年 6 月，StrongLoop 获得了项目的管理权。StrongLoop 在 2015 年 9 月被IBM并购。在 2016 年 1 月，IBM 宣布将Express.j s置于Node.js基金会孵化器的管理之下。</p><h2 id="帮助到网站" tabindex="-1">帮助到网站 <a class="header-anchor" href="#帮助到网站" aria-label="Permalink to &quot;帮助到网站&quot;">​</a></h2><ul><li><a href="http://expressjs.com/" target="_blank" rel="noreferrer">Express 官网</a></li><li><a href="https://github.com/expressjs/express" target="_blank" rel="noreferrer">Express GitHub 仓库</a></li><li><a href="https://www.expressjs.com.cn/" target="_blank" rel="noreferrer">Express 中文文档（非官方）</a></li><li><a href="https://github.com/rajikaimal/awesome-express" target="_blank" rel="noreferrer">Awesome Express是一个收集了许多与Node.js框架Express相关的资源和工具的GitHub仓库</a></li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ol><li><p>中间件：Express.js使用中间件的概念来处理HTTP请求。中间件是一种可以访问请求对象、响应对象和应用程序请求-响应周期中的下一个中间件函数的函数。可以在处理前、处理中、处理后等不同的阶段执行不同的中间件函数，从而实现各种功能，如身份验证、请求日志记录、错误处理等。</p></li><li><p>路由：Express.js 提供了路由功能，可以根据不同的 URL 请求，将请求分发到不同的处理函数中。</p></li><li><p>模板引擎：Express.js支持多种模板引擎，如EJS、Pug、Handlebars等。模板引擎允许开发者将数据与HTML模板结合，从而生成动态的HTML页面。这使得开发者可以轻松地构建具有动态内容的Web应用。</p></li><li><p>静态文件服务：Express.js内置了一个静态文件服务器，可以方便地为Web应用提供静态资源（如CSS、JavaScript、图片等）。这使得开发者无需额外配置，即可快速搭建Web应用。</p></li><li><p>错误处理：Express.js提供了一个简单的错误处理机制，允许开发者为应用程序定义自定义错误处理程序。这使得开发者可以轻松地处理错误，并向用户提供友好的错误信息。</p></li><li><p>易于扩展：Express.js 的模块化设计具有很好的扩展性，可以通过安装第三方中间件或编写自定义中间件来增强其功能。这使得开发者可以根据项目需求，轻松地为Express.js添加新功能。</p></li></ol><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><ol><li><p>express：Express.js的主要模块，用于创建Express.js应用程序实例。</p></li><li><p>application：Express.js应用程序实例，用于定义路由、中间件和其他应用程序级别的设置。</p></li><li><p>router：Express.js路由实例，用于定义应用程序的路由。</p></li><li><p>request：Express.js请求对象，包含HTTP请求的信息和数据。</p></li><li><p>response：Express.js响应对象，用于向客户端发送HTTP响应。</p></li><li><p>middleware：Express.js中间件，用于处理HTTP请求和响应。Express.js内置了一些常用的中间件，如body-parser（解析请求体）、cookie-parser（解析Cookie）等，同时也支持第三方和自定义中间件。</p></li><li><p>view：Express.js视图系统，用于渲染动态HTML页面。Express.js支持多种模板引擎，如EJS、Pug、Handlebars等。</p></li></ol><h2 id="简单使用" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用" aria-label="Permalink to &quot;简单使用&quot;">​</a></h2><p>首先，我们需要创建一个新的文件夹来存放我们的项目文件：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">mkdir</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">my-express-app</span></span>
<span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">my-express-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>接下来，我们使用npm初始化项目，并安装Express.js：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">init</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-y</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">express</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>编写应用代码</p><p>在项目文件夹中，创建一个名为app.js的文件，然后打开文件并输入以下代码：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">express</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;express&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">express</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">port</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">get</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;/&#39;</span><span style="color:#ABB2BF;">, (</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;font-style:italic;">res</span><span style="color:#ABB2BF;">) </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">res</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">send</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Hello World!&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">port</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">\`Example app listening at http://localhost:</span><span style="color:#C678DD;">\${</span><span style="color:#E06C75;">port</span><span style="color:#C678DD;">}</span><span style="color:#98C379;">\`</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这段代码首先引入了Express.js模块，并创建了一个Express.js应用实例。然后，我们定义了一个简单的路由，当用户访问应用的根路径（/）时，返回“Hello World!”。最后，我们让应用监听在3000端口，并在控制台输出一条提示信息。</p><p>运行</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">node app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>打开浏览器并访问<a href="http://localhost:3000" target="_blank" rel="noreferrer">http://localhost:3000</a>，你将看到页面上显示“Hello World!”，</p>`,23),r=[l];function o(t,c,i,B,y,d){return a(),p("div",null,r)}const x=s(n,[["render",o]]);export{u as __pageData,x as default};
