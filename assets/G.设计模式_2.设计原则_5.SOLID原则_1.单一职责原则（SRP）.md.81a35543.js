import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const p="/learning-notes-blog/images/2023-07-19-15-03-09.png",o="/learning-notes-blog/images/2023-07-19-15-04-13.png",u=JSON.parse('{"title":"","description":"单一职责原则，一个类只负责一项职责，降低类的复杂度，提高类的可维护性、可重用性和可扩展性。","frontmatter":{"description":"单一职责原则，一个类只负责一项职责，降低类的复杂度，提高类的可维护性、可重用性和可扩展性。"},"headers":[],"relativePath":"G.设计模式/2.设计原则/5.SOLID原则/1.单一职责原则（SRP）.md","filePath":"G.设计模式/2.设计原则/5.SOLID原则/1.单一职责原则（SRP）.md","lastUpdated":1690365650000}'),e={name:"G.设计模式/2.设计原则/5.SOLID原则/1.单一职责原则（SRP）.md"},r=l('<p>单一职责原则的英文是 <code>Single Responsibility Principle</code>，原则的英文描述是这样的：<code>A class or module should have a single responsibility</code>中文意思<strong>一个类或者模块只负责完成一个职责（或者功能）</strong> 更通俗意思 <strong>在定义类、接口、方法后，不能多于一个动机去改变这个类、接口、方法。</strong> 是指一个类或者模块应该只有一个职责，即只有一个引起它变化的原因。换句话说，一个类或者模块只负责一项职责，不要承担过多的职责，避免出现“大而全”的类或者模块。</p><p>在《敏捷软件开发：原则、模式与实践》这本书中，把<strong>职责</strong>定义为<strong>变化的原因</strong>。如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责</p><p>一个类只负责完成一个职责或者功能。也就是说，不要设计大而全的类，要设计<strong>粒度小、功能单一</strong>的类</p><p>一个类包含了<strong>两个或者两个以上业务不相干的功能</strong>，那我们就说它职责不够单一，应该将它拆分成多个功能更加单</p><p><strong>总结</strong>:一个类只负责完成一个职责或者功能。不要设计大而全的类，要设计粒度小、功能单一的类。单一职责原则是为了实现代码高内聚、低耦合，提高代码的复用性、可读性、可维护性</p><p>举个例子，一个汽车类，它的职责包括启动、加速、刹车、转弯等，这些职责都是围绕着汽车这个对象进行设计的。如果将这些职责都放在一个类中，就会出现一个“大而全”的类，这样会导致代码的复杂度和维护成本增加。因此，应该将这些职责分别放在不同的类中，每个类只负责一项职责，这样可以降低类之间的耦合度，提高代码的可维护性、可重用性和可扩展性。</p><p>例如，在转账的情况下，它应该只负责传入转账，而不是同时负责传出、传入和国际转账。此外，在这个特定的例子中，我们的类设计必须足够灵活，不需要在数据库架构更新后进行更改</p><h3 id="为什么要做职责分离" tabindex="-1">为什么要做职责分离 <a class="header-anchor" href="#为什么要做职责分离" aria-label="Permalink to &quot;为什么要做职责分离&quot;">​</a></h3><p><img src="'+p+'" alt=""></p><p>上图中，<code>我的模块</code>作为一个单独模块内部包含了<code>模块 A、B、C</code>，但包含的<code>模块 A、B、C</code>之间没有相互关联，外界的其他八个模块都和<code>我的模块</code>有关联，此时如果修改<code>A</code>变相的<code>我的模块</code>也被改动，那么其余八个模块都有需要重新测试风险，或者其他未来业务需要和<code>模块 A、B、C</code>中单独任意一个模块通信都需要和<code>我的模块</code>整体通信</p><ul><li>提高内聚 划分清除职责 <img src="'+o+`" alt=""></li></ul><p>上图中讲我的模块去掉依赖模块直接找到彼此需要的对接，各个模块专注于自己最重要的某个职责，并建立起与其他模块之间清晰的界限,职责分离可以将一个复杂的系统分解成多个简单的模块，每个模块只负责一项职责，这样可以降低模块之间的耦合度，提高代码的可维护性、可重用性和可扩展性，降低代码的复杂度和维护成本。</p><ul><li>总结：<strong>内聚本质上表示的是系统内部的各个部分对同一个问题的专注程度，以及这些部分彼此之间联系的紧密性</strong>，对同一个问题的专注程度才是判断内聚高低的标准，而职责分离只是实现高内聚的一种方法而已带来了</li></ul><ol><li><p>降低代码的复杂度：将一个复杂的系统分解成多个简单的模块，每个模块只负责一项职责，可以降低代码的复杂度，使得代码更加易于理解和维护。</p></li><li><p>提高代码的可维护性：职责分离可以使得代码更加模块化，每个模块只负责一项职责，这样可以降低模块之间的耦合度，使得代码更加易于维护。</p></li><li><p>提高代码的可重用性：职责分离可以使得代码更加模块化，每个模块只负责一项职责，这样可以提高代码的可重用性，使得代码更加易于复用。</p></li><li><p>提高代码的可扩展性：职责分离可以使得代码更加模块化，每个模块只负责一项职责，这样可以提高代码的可扩展性，使得代码更加易于扩展。</p></li></ol><p><strong>职责分离的重要性</strong></p><ul><li><strong>直接对问题进行对象建模，方便厘清构建逻辑</strong></li><li><strong>将问题分解为各种职责，更有利于系统的测试、调试和维护</strong></li><li><strong>提高系统的可扩展性</strong></li></ul><h3 id="从场景出发来看单一职责" tabindex="-1">从场景出发来看单一职责 <a class="header-anchor" href="#从场景出发来看单一职责" aria-label="Permalink to &quot;从场景出发来看单一职责&quot;">​</a></h3><p>并不是任何情况都要做到单一职责,</p><ul><li><strong>场景一</strong> 类 T 只负责一个职责P，这样设计是符合单一职责原则的。后来由于某种原因，也许是需求变更了，也许是程序的设计者境界提高了，需要将职责 P 细分为粒度更细的职责 P1，P2，这时如果要使程序遵循单一职责原则，需要将类T也分解为两个类 T1 和 T2，分别负责 P1、P2 两个职责。但是在程序已经写好的情况下，这样做简直太费时间了。所以，简单的修改类 T，用它来负责两个职责是一个比较不错的选择，虽然这样做有悖于单一职责原则。（这样做的风险在于职责扩散的不确定性，因为我们不会想到这个职责P，在未来可能会扩散为P1，P2，P3，P4……Pn。所以记住，在职责扩散到我们无法控制的程度之前，立刻对代码进行重构。）</li></ul><p>可以理解为，当一个类只负责一个职责时，符合单一职责原则。但是，如果后来由于某种原因，需要将这个职责细分为更细的职责，这时如果要遵循单一职责原则，就需要将这个类也分解为多个类，每个类只负责一个职责。但是，如果程序已经写好了，这样做会非常耗费时间。因此，可以简单地修改原来的类，让它负责多个职责，虽然这样做有悖于单一职责原则。但是，需要注意的是，这样做的风险在于职责扩散的不确定性，因为我们不知道这个职责会扩散为多少个职责。因此，如果职责扩散到我们无法控制的程度之前，应该立即对代码进行重构。</p><ul><li><strong>场景二</strong></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserInfo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> userId</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> username</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> email</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> telephone</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> createTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> lastLoginTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> avatarUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> provinceOfAddress</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 省</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> cityOfAddress</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 市</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> regionOfAddress</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 区 </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> detailedAddress</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 详细地址</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// ...省略其他属性和方法...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>UserInfo 类包含的都是跟用户相关的信息，所有的属性和方法都隶属于用户这样一个业务模型，满足单一职责原则；另一种观点是，地址信息在 UserInfo 类中，所占的比重比较高，可以继续拆分成独立的 UserAddress 类，UserInfo 只保留除 Address 之外的其他信息，拆分之后的两个类的职责更加单一,这要根据场景具体分析是否适合，如果后期公司发展增加了地址维护等一些场景那将地址抽离为类效果更好</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserInfo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> userId</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> username</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> email</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> telephone</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> createTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> lastLoginTime</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> avatarUrl</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserAddress</span><span style="color:#E06C75;"> userAddress</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// ...省略其他属性和方法...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserAddress</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> province</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 省</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> city</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 市</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> region</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 区 </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> detailedAddress</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 详细地址</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// ...省略其他属性和方法...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这样，UserInfo 类只负责用户信息的相关属性和方法，而 UserAddress 类只负责地址信息的相关属性和方法，两个类的职责更加单一，代码更加易于维护和扩展。</p><ul><li><strong>场景三</strong> 接收命令行的任意字符串参数，然后反转每个字符，并检查反转后的字符是否为“hello world”，如果是，则打印一条信息</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Application</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> process</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">words</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">words</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">arg</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> words[i].</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">(); j </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; j--) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                arg</span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;">words[i].</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(j</span><span style="color:#56B6C2;">-</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">,j);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(arg);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">words</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (words[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> words[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">)){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;...bingo&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[]{</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;is&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;mighty,hahaah,world&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[]{</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>上面代码中<code>process()</code> 直接看名字并不能很好理解这个方法打算做什么，如果纯根据我们需求去起这个变量名，可能名字叫<code>reverseCharactersAndTestHelloWorld()</code>(反转字符和测试helloword)，确实比之前可以通过方法名大概知道方法部分功能实现，但是命名太过于笼统的通常就是内聚性较差的信号</p><ul><li><strong>分离后效果</strong></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ApplicationOpt</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> process</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">words</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">words</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;">; i++) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#61AFEF;">reversecharacters</span><span style="color:#ABB2BF;">(words[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(words[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#61AFEF;">isHelloWorld</span><span style="color:#ABB2BF;">(words)) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;...bingo&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> reversecharacters</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">forward</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">reverse</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">j</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">forward</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">(); j </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; j--) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            reverse </span><span style="color:#56B6C2;">+=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">forward</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">substring</span><span style="color:#ABB2BF;">(j </span><span style="color:#56B6C2;">-</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">, j);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> reverse;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> isHelloWorld</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">names</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">names</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (names[</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                    </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> names[</span><span style="color:#D19A66;">1</span><span style="color:#ABB2BF;">].</span><span style="color:#61AFEF;">toLowerCase</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">)){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">ApplicationOpt</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">myApp</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ApplicationOpt</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">myApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[]{</span><span style="color:#98C379;">&quot;test&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;is&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;a&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;mighty,hahaah,world&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">myApp</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">process</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[]{</span><span style="color:#98C379;">&quot;hello&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#98C379;">&quot;world&quot;</span><span style="color:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p>分离后，<strong>每个步骤都由一个方法来实现，你也能很快区分每个方法具体负责的职责是什么</strong></p><ul><li><strong>案例四</strong></li></ul><p>假设有一个书籍类，保存书籍的名称、作者、内容，提供文字修订服务和查询服务</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Book</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> author</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">//constructor, getters and setters</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> replaceWordInText</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">word</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">text</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">replaceAll</span><span style="color:#ABB2BF;">(word, text);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> isWordInText</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">word</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">text</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">contains</span><span style="color:#ABB2BF;">(word);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>后来为了方便，将打印阅读这里功能添加到了 Book 类中，这样就违反了单一职责原则。如果打印服务需要针对不同的客服端进行适配时，书籍类就需要多次反复地进行修改，那么不同的类实例需要修改的地方就会越来越多，系统明显变得更加脆弱。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Book</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">//打印服务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> printText</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//具体实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">//阅读服务</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> getToRead</span><span style="color:#ABB2BF;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">//具体实现</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>为了遵循单一职责原则，可以将打印阅读这里功能拆分成一个独立的类，比如 BookPrinter 类和 BookReader 类，这样可以让 Book 类的职责更加单一。这种拆分的方式要根据具体的场景来分析是否适合，如果后期需要增加更多的功能，可以将它们拆分成独立的类，每个类只负责一项职责，这样可以提高代码的可维护性、可重用性和可扩展性</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Book</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> author</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> text</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// ...省略其他属性和方法...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> getAuthor</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> author;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> getText</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> text;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">BookPrinter</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> print</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Book</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">book</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 具体实现</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">BookReader</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> read</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Book</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">book</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 具体实现</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="考虑职责分离的时机" tabindex="-1">考虑职责分离的时机 <a class="header-anchor" href="#考虑职责分离的时机" aria-label="Permalink to &quot;考虑职责分离的时机&quot;">​</a></h2><p><strong>职责是否具有唯一性</strong>。当你有多个动机来改变一个类时，那么职责就多于一个，也就违反了 SRP。</p><p><strong>从不同的业务层面去看待同一个类的设计，对类是否职责单一，也会有不同的认识</strong>，<strong><a href="https://time.geekbang.org/column/article/171771" target="_blank" rel="noreferrer">设计模式之美</a></strong> 王争老师给了几条判断原则，比起很主观地去思考类是否职责单一，要更有指导意义、更具有可执行性</p><ol><li>类中的代码行数、函数或属性过多，会影响代码的可读性和可维护性，我们就需要考虑对类进行拆分；</li><li>类依赖的其他类过多，或者依赖类的其他类过多，不符合高内聚、低耦合的设计思想，我们就需要考虑对类进行拆分；</li><li>私有方法过多，我们就要考虑能否将私有方法独立到新的类中，设置为 public 方法，供更多的类使用，从而提高代码的复用性</li><li>比较难给类起一个合适名字，很难用一个业务名词概括，或者只能用一些笼统的 Manager、Context 之类的词语来命名，这就说明类的职责定义得可能不够清晰</li><li>类中大量的方法都是集中操作类中的某几个属性，比如，在 UserInfo 例子中，如果一半的方法都是在操作 address 信息，那就可以考虑将这几个属性和对应的方法拆分出来</li></ol><h2 id="单一职责原则优点" tabindex="-1">单一职责原则优点 <a class="header-anchor" href="#单一职责原则优点" aria-label="Permalink to &quot;单一职责原则优点&quot;">​</a></h2><ul><li>可以降低类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单的多，但职责不一定只有一个类或方法，还可能有多个类或方法，比如，上传文件是单一职责，而上传方法、增删改查 URL 方法、校验方法都服务于上传文件</li><li>提高类的可读性，提高系统的可维护性</li><li>变更引起的风险降低，变更是必然的，如果单一职责原则遵守的好，当修改一个功能时，可以显著降低对其他功能的影响</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p><strong>评价一个类的职责是否足够单一，我们并没有一个非常明确的、可以量化的标准</strong>,<strong>可以先写一个粗粒度的类，满足业务需求。随着业务的发展，如果粗粒度的类越来越庞大，代码越来越多，这个时候，我们就可以将这个粗粒度的类，拆分成几个更细粒度的类。这就是所谓的持续重构</strong> 关于代码行数也给建议 <strong>,如果你是没有太多项目经验的编程初学者，实际上，我也可以给你一个凑活能用、比较宽泛的、可量化的标准，那就是一个类的代码行数最好不能超过 200 行，函数个数及属性个数都最好不要超过 10 个。</strong></p><ul><li>单一职责原则通过避免设计大而全的类，避免将不相关的功能耦合在一起，来提高类的内聚性。同时，类职责单一，类依赖的和被依赖的其他类也会变少，减少了代码的耦合性，以此来实现代码的高内聚、低耦合。但是，如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性。</li></ul><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://time.geekbang.org/column/article/171771" target="_blank" rel="noreferrer">设计模式之美</a></p><p><a href="https://geek-docs.com/design-pattern/design-principle/single-responsibility-principle.html" target="_blank" rel="noreferrer">单一职责原则SRP</a></p><p><a href="https://www.jdon.com/57486" target="_blank" rel="noreferrer">单一职责原则：软件世界中最重要的规则 - DZone</a></p><p><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=710#/detail/pc?id=6872" target="_blank" rel="noreferrer"># 职责原则：如何在代码设计中实现职责分离？</a></p>`,52),c=[r];function t(B,i,y,b,F,C){return n(),a("div",null,c)}const E=s(e,[["render",t]]);export{u as __pageData,E as default};
