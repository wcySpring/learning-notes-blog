import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const d=JSON.parse('{"title":"","description":"匿名函数","frontmatter":{"description":"匿名函数"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/4.函数知识/3.匿名函数.md","filePath":"A.前端知识整理/2.JS基础/4.函数知识/3.匿名函数.md","lastUpdated":1689666565000}'),p={name:"A.前端知识整理/2.JS基础/4.函数知识/3.匿名函数.md"},e=l(`<p>如果在传入一个函数时，<strong>我们没有指定这个函数的名词或者通过函数表达式指定函数对应的变量，那么这个函数称之为匿名</strong></p><ol><li>箭头函数是匿名函数「无法设置名字，变量接收可以理解为是它的名字」</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#4078F2;"> fn</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>函数表达式一般是匿名函数</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#4078F2;"> fn</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {};</span></span>
<span class="line"><span style="color:#383A42;">document.</span><span style="color:#4078F2;">onclick</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {};</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> fn</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {};</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="3"><li>回调函数一般也是匿名函数</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#4078F2;">setTimeout</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {}, </span><span style="color:#986801;">1000</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#4078F2;">fn</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="4"><li>自执行函数一般也是匿名函数</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(fn) {</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;立即执行函数被调用&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="使用技巧" tabindex="-1">使用技巧 <a class="header-anchor" href="#使用技巧" aria-label="Permalink to &quot;使用技巧&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> fn</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> sum</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(sum); </span><span style="color:#A0A1A7;font-style:italic;">//具名化的名字可以在函数内部上下文中使用，代表当前函数本身</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(sum); //Uncaught ReferenceError: sum is not defined  匿名函数具名化后的这个名字，在所处上下文中未被声明过</span></span>
<span class="line"><span style="color:#4078F2;">fn</span><span style="color:#383A42;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> sum</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    sum </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(sum); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;打印还是函数  具名化的名字在函数内部是不允许被修改值的</span></span>
<span class="line"><span style="color:#383A42;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> sum</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 具名化的名字权重比较低，但凡当前私有上下文中存在一个同名的私有变量，都以私有变量为主，不再是这个函数</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(sum); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;Uncaught ReferenceError: Cannot access &#39;sum&#39; before initialization</span></span>
<span class="line"><span style="color:#A626A4;">    let</span><span style="color:#383A42;"> sum </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(sum); </span><span style="color:#A0A1A7;font-style:italic;">//=&gt;1</span></span>
<span class="line"><span style="color:#383A42;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 作用：方便匿名函数递归处理，而且更符合规范</span></span>
<span class="line"><span style="color:#50A14F;"> &quot;use strict&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">.</span><span style="color:#E45649;">callee</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">//获取的是当前函数本身，但是在JS严格模式下，不允许使用callee「Uncaught TypeError: &#39;caller&#39;, &#39;callee&#39;, and &#39;arguments&#39; properties may not be accessed on strict mode functions or the arguments objects for calls to them」</span></span>
<span class="line"><span style="color:#383A42;">})(); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#50A14F;"> &quot;use strict&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> i </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 0</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> sum</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    i</span><span style="color:#0184BC;">++</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(i);</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (i </span><span style="color:#0184BC;">&lt;</span><span style="color:#986801;"> 2</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#4078F2;">        sum</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,14),o=[e];function c(r,t,i,y,u,b){return a(),n("div",null,o)}const m=s(p,[["render",c]]);export{d as __pageData,m as default};
