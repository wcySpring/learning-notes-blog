import{_ as t,o,c as l,O as a}from"./chunks/framework.ab95ac3d.js";const e="/learning-notes-blog/images/前端工程化_先行版本.png",_=JSON.parse('{"title":"","description":"关于包版本规范说明","frontmatter":{"description":"关于包版本规范说明","tags":["工程化","版本"]},"headers":[],"relativePath":"C.前端工程化/1.前端包版本规范.md","filePath":"C.前端工程化/1.前端包版本规范.md","lastUpdated":1684680743000}'),u={name:"C.前端工程化/1.前端包版本规范.md"},i=a('<p>前端包版本管理采用了<strong>semver规范作为依赖版本管理方案</strong>,<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">semver</a>的约定 <strong>主版本号.次版本号.修订号（x.y.z)</strong></p><ul><li><p><strong>主版本号（也叫大版本，major version）</strong> , 大版本的改动很可能是一次颠覆性的改动，也就意味着可能存在与低版本不兼容的API或者用法（比如 vue 2 =&gt; 3 )。做了不兼容的 API 修改（可能不兼容之前的版本）</p></li><li><p><strong>次版本号（也叫小版本，minor version）</strong>,小版本的改动应当兼容同一个大版本内的API和用法，因此应该让开发者无感。所以我们通常只说大版本号，很少会精确到小版本号。做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）</p></li><li><p><strong>修订号（也叫补丁，patch）</strong>,一般用于修复bug或者很细微的变更，也需要保持向前兼容,做了向下兼容的问题修正（没有新功能，修复了之前版本的bug）</p></li></ul><p>在包还没有发布时候也会存在 <strong>先行版本</strong>，当某个版本改动比较大、并非稳定而且可能无法满足预期的兼容性需求时，你可能要先发布一个先行版本。先行版本号可以加到主版本号.次版本号.修订号的后面，先加上一个连接号再加上一连串以句点分隔的标识符和版本编译信息。内部版本(alpha)、公测版本(beta)、正式版本的候选版本rc: 即 Release candiate</p><ul><li>alpha(α)：预览版，或者叫内部测试版；一般不向外部发布，会有很多bug；一般只有测试人员使用。</li><li>beta(β)：测试版，或者叫公开测试版；这个阶段的版本会一直加入新的功能；在alpha版之后推出。</li><li>rc(release candidate)：最终测试版本；可能成为最终产品的候选版本，如果未出现问题则可发布成为正式版本。</li></ul><p>参考vue3在发布时候的<strong>先行版本</strong></p><p><img src="'+e+'" alt=""></p><h2 id="注意说明" tabindex="-1">注意说明 <a class="header-anchor" href="#注意说明" aria-label="Permalink to &quot;注意说明&quot;">​</a></h2><p>semver作为包版本管理规范。此规范规定软件版本由三个部分组成</p><ul><li>主版本号做了不兼容的重大变更</li><li>次版本号做了向下兼容的功能添加</li><li>补丁版本号做了向下兼容的bug修复</li></ul><p><strong>如果大版本号是 0 的话，表示软件处于开发初始阶段，一切都可能随时被改变</strong>，可能每个小版本之间也会存在不兼容性。所以在选择依赖时，尽量避开大版本号是 0 的包。</p><p><strong>1.0.0 的版本号用于界定公共 API。当你的软件发布到了正式环境，或者有稳定的API时，就可以发布1.0.0版本了</strong>。所以，当你决定对外部发布一个正式版本的npm包时，把它的版本标为1.0.0。</p><h2 id="版本符号说明" tabindex="-1">版本符号说明 <a class="header-anchor" href="#版本符号说明" aria-label="Permalink to &quot;版本符号说明&quot;">​</a></h2><ol><li>~: 当安装依赖时获取到有新版本时，安装到 x.y.z 中 z 的最新的版本。即保持主版本号、次版本号不变的情况下，保持修订号的最新版本。</li><li>^: 当安装依赖时获取到有新版本时，安装到 x.y.z 中 y 和 z 都为最新版本。 即保持主版本号不变的情况下，保持次版本号、修订版本号为最新版本。</li><li>&#39;*&#39; 、&quot;x&quot; 或者 （空） 表示可以匹配任何版本。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当主版本号为 0 的情况，会被认为是一个不稳定版本,主版本号和次版本号都为 0: ^0.0.z、~0.0.z 都被当作固定版本，安装依赖时均不会发生变化。主版本号为 0: ^0.y.z 表现和 ~0.y.z 相同，只保持修订号为最新版本。</p></div><h3 id="案例说明" tabindex="-1">案例说明 <a class="header-anchor" href="#案例说明" aria-label="Permalink to &quot;案例说明&quot;">​</a></h3><ol><li><code>&quot;signale&quot;: &quot;1.4.0&quot;</code>: 固定版本号</li><li><code>&quot;figlet&quot;: &quot;*&quot;</code>: 任意版本（&gt;=0.0.0）</li><li><code>&quot;react&quot;: &quot;16.x&quot;</code>: 匹配主要版本（&gt;=16.0.0 &lt;17.0.0）</li><li><code>&quot;react&quot;: &quot;16.3.x&quot;</code>: 匹配主要版本和次要版本（&gt;=16.3.0 &lt;16.4.0）</li><li><code>&quot;^xxx&quot;</code>: 最左侧非0版本号不变，不小于xxx</li></ol><ul><li>^1.2.3 等同于 &gt;=1.2.3 &lt;2.0.0 主版本号不变</li><li>^0.1.2 等同于 &gt;=0.1.2 &lt;0.2.0 主、次版本号不变</li><li>^0.0.2 等同于 0.0.2 主、次、补丁版本号都不变</li></ul><ol start="6"><li><code>&quot;~xxx&quot;</code>:如果列出了次版本号，则次版本号不变，如果没有列出次版本号，则主版本号不变，均不小于xxx</li></ol><ul><li>~1.2.3 等同于 &gt;=1.2.3 &lt;1.3.0 主、次版本号不变</li><li>~1 等同于 &gt;=1.0.0 &lt;2.0.0 主版本号不变</li></ul><h2 id="预发布版本" tabindex="-1">预发布版本 <a class="header-anchor" href="#预发布版本" aria-label="Permalink to &quot;预发布版本&quot;">​</a></h2><p>以包开发者的角度来考虑这个问题：假设当前线上版本是 &quot;1.2.3&quot;，如果我作了一些改动需要发布版本 &quot;1.2.4&quot;，但我不想直接上线（因为使用 &quot;~1.2.3&quot; 或者 &quot;^1.2.3&quot; 的用户都会直接静默更新），这就需要使用预发布功能。因此我可能会发布 &quot;1.2.4-alpha.1&quot; 或者 &quot;1.2.4-beta.1&quot; 等等。</p><ul><li><p>&quot;&gt;1.2.4-alpha.1&quot;表示接受 &quot;1.2.4-alpha&quot; 版本下所有大于 1 的预发布版本。因此 &quot;1.2.4-alpha.7&quot; 是符合要求的，但 &quot;1.2.4-beta.1&quot; 和 &quot;1.2.5-alpha.2&quot; 都不符合。此外如果是正式版本（不带预发布关键词），只要版本号符合要求即可，不检查预发布版本号，例如 &quot;1.2.5&quot;, &quot;1.3.0&quot; 都是认可的。</p></li><li><p>&quot;~1.2.4-alpha.1&quot; 表示 &quot;&gt;=1.2.4-alpha.1 &lt; 1.3.0&quot;。这样 &quot;1.2.5&quot;, &quot;1.2.4-alpha.2&quot; 都符合条件，而 &quot;1.2.5-alpha.1&quot;, &quot;1.3.0&quot; 不符合。</p></li><li><p>&quot;^1.2.4-alpha.1&quot; 表示 &quot;&gt;=1.2.4-alpha.1 &lt; 2.0.0&quot;。这样 &quot;1.2.5&quot;, &quot;1.2.4-alpha.2&quot;, &quot;1.3.0&quot;符合条件，而 &quot;1.2.5-alpha.1&quot;, &quot;2.0.0&quot; 不符合。</p></li></ul>',22),r=[i];function q(s,p,n,c,h,d){return o(),l("div",null,r)}const m=t(u,[["render",q]]);export{_ as __pageData,m as default};
