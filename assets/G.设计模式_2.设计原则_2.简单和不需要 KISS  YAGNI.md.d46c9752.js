import{_ as t,o as e,c as o,V as r}from"./chunks/framework.96db2af4.js";const h=JSON.parse('{"title":"参考","description":"简单和不需要 KISS  YAGNI","frontmatter":{"description":"简单和不需要 KISS  YAGNI"},"headers":[],"relativePath":"G.设计模式/2.设计原则/2.简单和不需要 KISS  YAGNI.md","filePath":"G.设计模式/2.设计原则/2.简单和不需要 KISS  YAGNI.md","lastUpdated":1690115031000}'),a={name:"G.设计模式/2.设计原则/2.简单和不需要 KISS  YAGNI.md"},n=r(`<p>KISS (Keep It Simple, Stupid) 和 YAGNI (You Ain&#39;t Gonna Need It) 是两个常见的设计原则，它们都强调简单性和避免过度设计。</p><h2 id="kiss-原则" tabindex="-1">KISS 原则 <a class="header-anchor" href="#kiss-原则" aria-label="Permalink to &quot;KISS 原则&quot;">​</a></h2><p>KISS 原则（<code>Keep It Simple and Stupid</code>），翻译过来就是：<code>保持简单，保持愚蠢</code>,也有人称<strong>懒人原则</strong></p><p>这个原则应用不仅仅是代码编程在各行各业都可以遵循</p><ul><li><strong>广告创意</strong>必须简单明了、纯真质朴、切中主题，才能使人过目不忘，印象深刻</li><li><strong>产品设计</strong>产品中的零件数量越多，产品制造和装配就越复杂和越困难，产品制造费用和装配费越高，产品开发周期也就越长，同时产品发生制造和装配质量问题的可能性越高。在确保实现产品功能和质量前提下，简化的设计、更少的零件数量能够降低产品成本，缩短产品开发周期，提高产品开发质量</li><li><strong>代码设计</strong>,保持代码可读和可维护,代码足够简单，也就意味着很容易读懂，bug 比较难隐藏。即便出现 bug，修复起来也比较简单可维护性较好</li></ul><h3 id="简单代码" tabindex="-1">简单代码 <a class="header-anchor" href="#简单代码" aria-label="Permalink to &quot;简单代码&quot;">​</a></h3><p>并不是<strong>代码行数越少就越简单</strong>，还要考虑逻辑<strong>复杂度、实现难度、代码的可读性</strong>，但如果问题本身就复杂的问题，用复杂的方法解决，并不违背 KISS 原则 * <strong>防止代码腐坏</strong>,当越来的多人进入项目中，开发和维护随着逻辑越来越复杂，代码逻辑开始变得渐渐难以维护，保持KISS 原则可以防止代码腐坏</p><pre><code>* **减少时间成本的投入**，维护代码必然需要花时间修改、调试、理解内在逻辑并让代码正常运行，一旦代码非常复杂，势必会增加时间成本，保持KISS原则可以减少相应的时间成本
</code></pre><p><strong>简单≠简单设计或简单编程</strong>，为了完成进度而做简单设计甚至不设计，认为只要后期有需要时再重构就行，编码时也就采用简单编程，并美其名曰迭代敏捷开发。但实际上，项目到后期几乎没有时间重构，并频繁出现问题（定位时间变长、逻辑嵌套过深、不断打补丁等），最后项目往往以失败告终。</p><p><strong>简单应该是让别人理解代码逻辑时更简单</strong></p><h3 id="编写简单代码" tabindex="-1">编写简单代码 <a class="header-anchor" href="#编写简单代码" aria-label="Permalink to &quot;编写简单代码&quot;">​</a></h3><ul><li><strong>不要炫耀编程技巧</strong>，不要使用同事可能不懂的技术来实现代码</li><li><strong>不要长期进行打补丁式的编码</strong></li><li><strong>不要重复造轮子，要善于使用已经有的工具类库</strong></li><li><strong>不要简单编程。</strong> 硬编码、一次性编码、复制粘贴编码、面向搜索编程都是简单编程，如果一直习惯性地简单编程，那么带来的可能就是更复杂、更高成本的重构和重写。这不仅不能提升代码扩展性，还会使得代码在后期无法被维护和重构。局部的简单导致整体的更加复杂，这是现在公认的一种得不偿失的做法。</li></ul><h2 id="yagni-原则" tabindex="-1">YAGNI 原则 <a class="header-anchor" href="#yagni-原则" aria-label="Permalink to &quot;YAGNI 原则&quot;">​</a></h2><p><strong>YAGNI</strong> 原则的英文全称是：<code>You Ain’t Gonna Need It</code>。直译就是：你不会需要它。这条原则也算是万金油了。当用在软件开发中的时候，它的意思是：不要去设计当前用不到的功能；不要去编写当前用不到的代码。实际上，这条原则的核心思想就是：<strong>不要做过度设计</strong>,<strong>在确定真的有必要的时候再写代码，那时再重构仍然来得及</strong></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>虽然 KISS 和 YAGNI 原则都强调简单性和避免过度设计，但它们的重点略有不同。KISS 原则强调保持代码简单易懂，而 YAGNI 原则强调只添加必要的功能，避免不必要的复杂性。简而言之，KISS 原则关注代码的可读性和可维护性，而 YAGNI 原则关注代码的精简和功能的必要性</p><p><strong>写了好多的注释解释代码的执行逻辑，后续修改的这个方法的时候可能，忘记修改注释，造成对代码理解的困难。实际应用应该使用KISS原则，将方法写的见名知意，尽量容易阅读。注释不必过多。</strong></p><blockquote class="success"><h1>参考</h1></blockquote><p><a href="https://time.geekbang.org/column/article/171771" target="_blank" rel="noreferrer">设计模式之美</a><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=710#/detail/pc?id=6869" target="_blank" rel="noreferrer">趣学设计模式</a></p>`,19),s=[n];function i(l,c,d,g,p,S){return e(),o("div",null,s)}const I=t(a,[["render",i]]);export{h as __pageData,I as default};
