import{_ as s,c as n,o as a,a8 as l,bH as p}from"./chunks/framework.6k5lawSO.js";const d=JSON.parse('{"title":"","description":"js 使用序列化  class-transforme","frontmatter":{"description":"js 使用序列化  class-transforme","tags":["前端工具库"]},"headers":[],"relativePath":"A.前端知识整理/5.前端杂七杂八/1.使用序列化.md","filePath":"A.前端知识整理/5.前端杂七杂八/1.使用序列化.md","lastUpdated":1687659923000}'),e={name:"A.前端知识整理/5.前端杂七杂八/1.使用序列化.md"},o=l(`<p><strong>序列化</strong>是将对象转换为<strong>可供传输或存储使用</strong>的格式的过程，序列化经常用于将对象转换为诸如 JSON、XML 或二进制格式之类的格式。在序列化过程中，对象的状态被转换为可以被传输或存储的格式，如字符串或字节序列。序列化的最终目的是将对象在网络中传输或存储到磁盘中。这个过程编码(Encode)</p><p><strong>反序列化</strong>是将序列化后的<strong>数据重新转换为原始对象</strong>的过程。反序列化通常会分析序列化数据并尝试还原它所表示的对象状态。反序列化是序列化的逆过程。这个过程解码(Decode)</p><p><strong>举个例子</strong>：两个服务之间要传输一个数据对象，对象不能直接在网络传输，需提前转成可传输的二进制，且要求可逆，就需要将对象转换成二进制流，通过网络传输到对方服务，再转换成对象，供服务方法调用。这个编码和解码的过程称之为序列化和反序列化</p><p><strong>使用序列化和反序列化可以将对象转换为不同的格式进行存储和传输，以在不同语言、平台、系统或环境之间共享</strong></p><h2 id="几种常见的序列化和反序列化协议" tabindex="-1">几种常见的序列化和反序列化协议 <a class="header-anchor" href="#几种常见的序列化和反序列化协议" aria-label="Permalink to &quot;几种常见的序列化和反序列化协议&quot;">​</a></h2><p>在各种编程语言中，有许多序列化和反序列化协议可供选择。以下是几种常见的序列化和反序列化协议：</p><ol><li><p><strong>JSON（JavaScript Object Notation）</strong> ：一种轻量级的数据交换格式，易于人类阅读和编写，并且易于机器解析和生成。JSON主要用于前后端之间的数据传输。</p></li><li><p><strong>XML（Extensible Markup Language）</strong> ：一种标记语言，可以描述复杂的数据结构，并且可以通过DTD、XSD和XPath等技术进行有效验证。XML主要用于Web服务中的数据交换，也可以用于一些传统企业应用中。</p></li><li><p><strong>Protocol Buffers</strong> ：是谷歌开源的一种轻量级数据交换格式，以二进制形式压缩数据。Protocol Buffers的优点在于其尺寸小、性能高和跨平台支持程度高，适用于高性能的分布式系统。</p></li><li><p><strong>MessagePack</strong> ：一种二进制序列化格式，可以将结构化数据打包为更小、更快、更简单的二进制格式。MessagePack的优点在于其尺寸小、性能高和跨平台支持程度高，适用于高性能系统。</p></li><li><p><strong>Thrift</strong> ：是一种可伸缩的分布式系统框架，提供RPC（远程过程调用）框架、序列化和反序列化支持等。Thrift支持多种语言，可以处理高并发场景。</p></li></ol><h2 id="前端-json-序列化和反序列" tabindex="-1">前端 JSON 序列化和反序列 <a class="header-anchor" href="#前端-json-序列化和反序列" aria-label="Permalink to &quot;前端 JSON 序列化和反序列&quot;">​</a></h2><p>在 JavaScript 中，可以使用内置的JSON对象来进行序列化和反序列化操作。JSON对象提供了两个核心方法：JSON.stringify()和JSON.parse()。</p><p>序列化 JSON.stringify()方法将任意JavaScript对象序列化为一个JSON字符串。</p><p>反序列化 JSON.parse()方法将一个JSON字符串解析为一个JavaScript对象。</p><p>其他语言中也有类似的</p><ul><li><p><strong>Java</strong>：使用Jackson、Gson等第三方库的fromJson方法或JSON库自带的JSONObject.parseObject方法实现JSON字符串转对象。</p></li><li><p><strong>Python</strong>：使用内置的json库的loads方法实现JSON字符串转对象。</p></li><li><p><strong>PHP</strong>：使用内置的json_decode函数实现JSON字符串转对象。</p></li></ul><p>前端也有第三方库 <code>class-transformer</code>，<code>class-transformer</code> 的实现原理是基于 <code>TypeScript</code> 的装饰器和反射机制。它可以将 <code>JavaScript</code> 对象序列化为 <code>JSON</code> 字符串，也可以将 <code>JSON</code> 字符串反序列化为 <code>TypeScript</code> 类的实例对象。</p><h2 id="实现一个用js-序列化和反序列化" tabindex="-1">实现一个用js 序列化和反序列化 <a class="header-anchor" href="#实现一个用js-序列化和反序列化" aria-label="Permalink to &quot;实现一个用js 序列化和反序列化&quot;">​</a></h2><p>当有一组数据格式如下，我们想让 <code>personLs</code> 中数组对象 反序列化为他所在映射 class 对象，让他具备class 所给予的行为不在是一个单独 反序列化的样子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// ----------测试数据------------</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> api</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    newName</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;api&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    personLs</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [{ </span><span style="color:#E45649;">name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;api&#39;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">info</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [{ </span><span style="color:#E45649;">newInfoName</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;api&#39;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">age</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 15</span><span style="color:#383A42;"> }] }],</span></span>
<span class="line"><span style="color:#E45649;">    newEXTEND</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;api&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    newFORMATTER</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;api&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>例如 定义了一个 class Person 赋予了他play 的动作如果是简单的反序列化使用JSON，是达不到这种效果的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;">  {</span></span>
<span class="line"><span style="color:#383A42;">    name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;json&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">    info </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 行为可以玩</span></span>
<span class="line"><span style="color:#4078F2;">		play</span><span style="color:#383A42;">(){</span></span>
<span class="line"><span style="color:#383A42;">			console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;我的动作是玩&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Info</span><span style="color:#383A42;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>我想将这类数据格式进行序列化到类中，让其可以具备类的本身特有的属性和方法，例如将数据注入，让字段知道属于那个要映射的类</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 指定字段映射对应类</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Info</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    @SerializeUtils.</span><span style="color:#4078F2;">jsonField</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;newInfoName&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    infoName </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;infoName&#39;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> FormBase</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;json&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">    @SerializeUtils.</span><span style="color:#4078F2;">jsonType</span><span style="color:#383A42;">(Info)</span></span>
<span class="line"><span style="color:#383A42;">    info </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> []</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> FormBase</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    @SerializeUtils.</span><span style="color:#4078F2;">jsonField</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;newName&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;123&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">    @SerializeUtils.</span><span style="color:#4078F2;">jsonType</span><span style="color:#383A42;">(Person)</span></span>
<span class="line"><span style="color:#383A42;">    personLs </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 输出时候key 不变</span></span>
<span class="line"><span style="color:#383A42;">    @SerializeUtils.</span><span style="color:#4078F2;">jsonField</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;newFORMATTER&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">false</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    FORMATTER </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;2&#39;</span></span>
<span class="line"><span style="color:#383A42;">    _zz </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;转换后将不输出&#39;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">().</span><span style="color:#4078F2;">init</span><span style="color:#383A42;">(api)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>这样数据重新注入到实际初始化对应的类中，让对象可以更灵活的具备 class 中定义的一些属性和行为，要想做到这样，整体设计思路如下</p><ul><li><p>要将字段和类形成映射关系 例如 <code>@SerializeUtils.jsonType(Person) personLs = []</code> { 当前构造函数：{当前构造函数字段：映射的构造函数 } } , 因为如果仅仅以字段为 映射的话，可能有不同构造函数中 同名字段问题，因此要具体到 那个函数下 那个字段 和谁形成映射</p></li><li><p>字段重新映射 这种情况经常发生在，某一端修改了代码字段，但另一端完全不想修改 例如 <code>@SerializeUtils.jsonField(&#39;newFORMATTER&#39;, false) FORMATTER = &#39;2&#39;</code>这种数据结构设计 为 { 当前构造函数：{当前构造函数字段：{ 映射的重新命名,isOutput :Boolean} } } , 当前构造函数 下的 当前构造函数字段 要对应重新命名后的字段名</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#383A42;font-style:italic;">    @</span><span style="color:#A626A4;font-style:italic;">class</span><span style="color:#A0A1A7;font-style:italic;"> 进行装饰器 和序列化的工具类，可以基于此类进继承扩展</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> default</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> SerializeUtils</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 字段映射的装饰器的存储{ 当前构造函数：{当前构造函数字段：映射的构造函数 } }</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#383A42;"> jsonTypeWeakMap </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> WeakMap</span><span style="color:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 字段重新映射{ 当前构造函数：{当前构造函数字段：映射的构造函数:{isOutput :Boolean} } }</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#383A42;"> jsonFieldWeakMap </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> WeakMap</span><span style="color:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * 描述 字段类型映射的装饰器</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">date</span><span style="color:#A0A1A7;font-style:italic;"> 2021-08-18</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {Object}</span><span style="color:#E45649;font-style:italic;"> cls</span><span style="color:#A0A1A7;font-style:italic;"> 定义类s</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">returns</span><span style="color:#C18401;font-style:italic;"> {Function}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">example</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * 当数据api格式{personLs:[{name:11},{name:11}]},将数组中的对象提取出成类</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * class A {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *   @jsonType(映射类)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *   personLs = []</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#4078F2;"> jsonType</span><span style="color:#383A42;">(cls) {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> (target, name, descriptor) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 存储格式{ 当前构造函数：{当前构造函数字段：映射的构造函数 } }</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">SerializeUtils.</span><span style="color:#E45649;">jsonTypeWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(target.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">)) SerializeUtils.</span><span style="color:#E45649;">jsonTypeWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(target.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">, {})</span></span>
<span class="line"><span style="color:#A626A4;">            const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#E45649;">jsonTypeWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(target.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#E45649;">            obj</span><span style="color:#383A42;">[</span><span style="color:#E45649;">name</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#E45649;"> cls</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#E45649;"> descriptor</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * 描述  字段类型重命名的装饰器</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">date</span><span style="color:#A0A1A7;font-style:italic;"> 2021-08-19</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {string}</span><span style="color:#E45649;font-style:italic;"> rename</span><span style="color:#A0A1A7;font-style:italic;"> -- 新对象对应key</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {Boolean}</span><span style="color:#E45649;font-style:italic;"> isOutput</span><span style="color:#A0A1A7;font-style:italic;">  输出字段是否重置翻译</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">returns</span><span style="color:#C18401;font-style:italic;"> {any}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#4078F2;"> jsonField</span><span style="color:#383A42;">(rename, isOutput </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> true</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> (target, name, descriptor) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 检差映射名字是否已经在当前对象存在</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (Reflect.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(</span><span style="color:#E45649;">target</span><span style="color:#383A42;">, </span><span style="color:#E45649;">rename</span><span style="color:#383A42;">)) </span><span style="color:#A626A4;">throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Field already exists&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 存储格式{ 当前构造函数：{当前构造函数字段：映射的构造函数:{isOutput:Boolean} } }</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">SerializeUtils.</span><span style="color:#E45649;">jsonFieldWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(target.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">)) SerializeUtils.</span><span style="color:#E45649;">jsonFieldWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(target.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">, {})</span></span>
<span class="line"><span style="color:#A626A4;">            const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#E45649;">jsonFieldWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(target.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#E45649;">            obj</span><span style="color:#383A42;">[</span><span style="color:#E45649;">name</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">rename</span><span style="color:#383A42;">, </span><span style="color:#E45649;">isOutput</span><span style="color:#383A42;"> }</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#E45649;"> descriptor</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * 描述</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">date</span><span style="color:#A0A1A7;font-style:italic;"> 2021-08-20</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {Object}</span><span style="color:#E45649;font-style:italic;"> obj</span><span style="color:#A0A1A7;font-style:italic;"> 转换对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {String}</span><span style="color:#E45649;font-style:italic;"> oldKey</span><span style="color:#A0A1A7;font-style:italic;"> 转换对象当前key</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">returns</span><span style="color:#C18401;font-style:italic;"> {Object}</span><span style="color:#A0A1A7;font-style:italic;"> {key:string,isOutput:Boolean}返回对应映射key</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#4078F2;"> oldKeyToNewKey</span><span style="color:#383A42;">(obj, oldKey) {</span></span>
<span class="line"><span style="color:#A626A4;">        let</span><span style="color:#E45649;"> Cls</span><span style="color:#383A42;">, </span><span style="color:#E45649;">fieldsObj</span></span>
<span class="line"><span style="color:#E45649;">        Cls</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> obj.</span><span style="color:#E45649;">constructor</span></span>
<span class="line"><span style="color:#E45649;">        fieldsObj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#E45649;">jsonFieldWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(</span><span style="color:#E45649;">Cls</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">newKey</span><span style="color:#0184BC;">:</span><span style="color:#E45649;"> fieldsObj</span><span style="color:#383A42;">?.[</span><span style="color:#E45649;">oldKey</span><span style="color:#383A42;">]?.</span><span style="color:#E45649;">rename</span><span style="color:#0184BC;"> ||</span><span style="color:#E45649;"> oldKey</span><span style="color:#383A42;">, </span><span style="color:#E45649;">isOutput</span><span style="color:#0184BC;">:</span><span style="color:#E45649;"> fieldsObj</span><span style="color:#383A42;">?.[</span><span style="color:#E45649;">oldKey</span><span style="color:#383A42;">]?.</span><span style="color:#E45649;">isOutput</span><span style="color:#0184BC;"> ??</span><span style="color:#986801;"> true</span><span style="color:#383A42;"> }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * 描述 对象合并</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">date</span><span style="color:#A0A1A7;font-style:italic;"> 2021-08-18</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {Object}</span><span style="color:#E45649;font-style:italic;"> target</span><span style="color:#A0A1A7;font-style:italic;"> 合并的目标对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {any}</span><span style="color:#E45649;font-style:italic;"> copy</span><span style="color:#A0A1A7;font-style:italic;"> 被合并的对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> { Object }</span><span style="color:#E45649;font-style:italic;"> [deep</span><span style="color:#0184BC;font-style:italic;">=</span><span style="color:#E45649;font-style:italic;">true]</span><span style="color:#A0A1A7;font-style:italic;"> 是否深递归</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">returns</span><span style="color:#C18401;font-style:italic;"> {any}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">example</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * const a = {name:12,age:456}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * const b = {name:1299,age:45633,zz:456}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * SerializeUtils.objExtend(a,b)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * a:{name:1299,age:45633}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * b:{name:1299,age:45633,zz:456}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#4078F2;"> objExtend</span><span style="color:#383A42;">(target, copy, deep </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> true</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">        let</span><span style="color:#E45649;"> targetVal</span><span style="color:#383A42;">, </span><span style="color:#E45649;">copyVal</span><span style="color:#383A42;">, </span><span style="color:#E45649;">Cls</span><span style="color:#383A42;">, </span><span style="color:#E45649;">fieldsObj</span><span style="color:#383A42;">, </span><span style="color:#E45649;">rsArr</span><span style="color:#383A42;">, </span><span style="color:#E45649;">arrItem</span><span style="color:#383A42;">, </span><span style="color:#E45649;">shallowCopy</span><span style="color:#383A42;">, </span><span style="color:#E45649;">oldKey</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">        for</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">let</span><span style="color:#E45649;"> key</span><span style="color:#A626A4;"> in</span><span style="color:#E45649;"> target</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">            oldKey</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> key</span></span>
<span class="line"><span style="color:#A626A4;">            let</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">newKey</span><span style="color:#383A42;">, </span><span style="color:#E45649;">isOutput</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">oldKeyToNewKey</span><span style="color:#383A42;">(</span><span style="color:#E45649;">target</span><span style="color:#383A42;">, </span><span style="color:#E45649;">key</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#E45649;">            targetVal</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> target</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#E45649;">            copyVal</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> copy</span><span style="color:#383A42;">[</span><span style="color:#E45649;">newKey</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(</span><span style="color:#E45649;">copy</span><span style="color:#383A42;">, </span><span style="color:#E45649;">newKey</span><span style="color:#383A42;">)) </span><span style="color:#A626A4;">continue</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 浅copy</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#E45649;">deep</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">                if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#E45649;"> copyVal</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &#39;object&#39;</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#E45649;"> copyVal</span><span style="color:#0184BC;"> !==</span><span style="color:#986801;"> null</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">                    shallowCopy</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Array.</span><span style="color:#4078F2;">isArray</span><span style="color:#383A42;">(</span><span style="color:#E45649;">copyVal</span><span style="color:#383A42;">) </span><span style="color:#0184BC;">?</span><span style="color:#383A42;"> [</span><span style="color:#0184BC;">...</span><span style="color:#E45649;">copyVal</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#0184BC;">...</span><span style="color:#E45649;">copyVal</span><span style="color:#383A42;"> }</span></span>
<span class="line"><span style="color:#383A42;">                } </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">                    shallowCopy</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> copyVal</span></span>
<span class="line"><span style="color:#383A42;">                }</span></span>
<span class="line"><span style="color:#E45649;">                target</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#E45649;"> shallowCopy</span></span>
<span class="line"><span style="color:#A626A4;">                continue</span></span>
<span class="line"><span style="color:#383A42;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 深copy</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#E45649;"> copyVal</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &#39;object&#39;</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#E45649;"> copyVal</span><span style="color:#0184BC;"> !==</span><span style="color:#986801;"> null</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">                if</span><span style="color:#383A42;"> (Array.</span><span style="color:#4078F2;">isArray</span><span style="color:#383A42;">(</span><span style="color:#E45649;">copyVal</span><span style="color:#383A42;">)) {</span></span>
<span class="line"><span style="color:#E45649;">                    rsArr</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> []</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">                    // 处理映射类字段 当使用jsonType映射的字段实例化自己的对应类</span></span>
<span class="line"><span style="color:#E45649;">                    Cls</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> target.</span><span style="color:#E45649;">constructor</span></span>
<span class="line"><span style="color:#E45649;">                    fieldsObj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#E45649;">jsonTypeWeakMap</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(</span><span style="color:#E45649;">Cls</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">                    // fieldsObj &amp;&amp; fieldsObj[key]</span></span>
<span class="line"><span style="color:#A626A4;">                    if</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">fieldsObj</span><span style="color:#383A42;">?.[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">]) </span><span style="color:#E45649;">arrItem</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#E45649;"> fieldsObj</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">]()</span></span>
<span class="line"><span style="color:#383A42;">                    copyVal.</span><span style="color:#4078F2;">forEach</span><span style="color:#383A42;">((it, itKey) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">                        if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#E45649;">fieldsObj</span><span style="color:#383A42;">?.[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">]) </span><span style="color:#E45649;">arrItem</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> targetVal</span><span style="color:#383A42;">[</span><span style="color:#E45649;">itKey</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#0184BC;">                        typeof</span><span style="color:#E45649;"> it</span><span style="color:#0184BC;"> !==</span><span style="color:#50A14F;"> &#39;object&#39;</span><span style="color:#0184BC;"> ||</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">it</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">objExtend</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arrItem</span><span style="color:#383A42;">, </span><span style="color:#E45649;">it</span><span style="color:#383A42;">, </span><span style="color:#E45649;">deep</span><span style="color:#383A42;">))</span></span>
<span class="line"><span style="color:#383A42;">                        rsArr.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(</span><span style="color:#E45649;">it</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">                    })</span></span>
<span class="line"><span style="color:#E45649;">                    target</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#E45649;"> rsArr</span></span>
<span class="line"><span style="color:#383A42;">                } </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">                    target</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">objExtend</span><span style="color:#383A42;">(</span><span style="color:#E45649;">targetVal</span><span style="color:#383A42;">, </span><span style="color:#E45649;">copyVal</span><span style="color:#383A42;">, </span><span style="color:#E45649;">deep</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">                }</span></span>
<span class="line"><span style="color:#383A42;">            } </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">                target</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#E45649;"> copyVal</span></span>
<span class="line"><span style="color:#383A42;">            }</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> target</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * 描述 去除特殊标记字段</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">date</span><span style="color:#A0A1A7;font-style:italic;"> 2021-08-19</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {Object}</span><span style="color:#E45649;font-style:italic;"> obj</span><span style="color:#A0A1A7;font-style:italic;"> 去除对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#C18401;font-style:italic;"> {string}</span><span style="color:#E45649;font-style:italic;"> startSymbol</span><span style="color:#A0A1A7;font-style:italic;"> 特殊符号标记对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">returns</span><span style="color:#C18401;font-style:italic;"> {any}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">example</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * const a = {name:12,_age:456}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * SerializeUtils.formatter(a,&#39;_&#39;)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * a:{name:1299}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * class A{</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *    @SerializeUtils.jsonField(&#39;newnew&#39;)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     *    obj1 = {ls:[1,3]}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * const a = new A()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     * a:{newnew:[1,3]}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A626A4;">    static</span><span style="color:#4078F2;"> formatter</span><span style="color:#383A42;">(obj, startSymbol) {</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">obj</span><span style="color:#0184BC;"> ===</span><span style="color:#986801;"> null</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">return</span><span style="color:#986801;"> null</span></span>
<span class="line"><span style="color:#A626A4;">        let</span><span style="color:#E45649;"> clone</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {}</span></span>
<span class="line"><span style="color:#A626A4;">        for</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">let</span><span style="color:#E45649;"> key</span><span style="color:#A626A4;"> in</span><span style="color:#E45649;"> obj</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (key.</span><span style="color:#4078F2;">startsWith</span><span style="color:#383A42;">(</span><span style="color:#E45649;">startSymbol</span><span style="color:#383A42;">)) </span><span style="color:#A626A4;">continue</span></span>
<span class="line"><span style="color:#A626A4;">            let</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">newKey</span><span style="color:#383A42;">, </span><span style="color:#E45649;">isOutput</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">oldKeyToNewKey</span><span style="color:#383A42;">(</span><span style="color:#E45649;">obj</span><span style="color:#383A42;">, </span><span style="color:#E45649;">key</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">            if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#E45649;">isOutput</span><span style="color:#383A42;">) </span><span style="color:#E45649;">newKey</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> key</span></span>
<span class="line"><span style="color:#E45649;">            clone</span><span style="color:#383A42;">[</span><span style="color:#E45649;">newKey</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#0184BC;"> typeof</span><span style="color:#E45649;"> obj</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;object&#39;</span><span style="color:#0184BC;"> ?</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">formatter</span><span style="color:#383A42;">(</span><span style="color:#E45649;">obj</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">], </span><span style="color:#E45649;">startSymbol</span><span style="color:#383A42;">) </span><span style="color:#0184BC;">:</span><span style="color:#E45649;"> obj</span><span style="color:#383A42;">[</span><span style="color:#E45649;">key</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (Array.</span><span style="color:#4078F2;">isArray</span><span style="color:#383A42;">(</span><span style="color:#E45649;">obj</span><span style="color:#383A42;">)) {</span></span>
<span class="line"><span style="color:#383A42;">            clone.</span><span style="color:#E45649;">length</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> obj.</span><span style="color:#E45649;">length</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#383A42;"> Array.</span><span style="color:#4078F2;">from</span><span style="color:#383A42;">(</span><span style="color:#E45649;">clone</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> clone</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br></div></div><ul><li>使用的时候定义基本类</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> SerializeUtils</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;./SerializeUtils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> default</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> FormBase</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    init</span><span style="color:#383A42;">(data) {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">objExtend</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, </span><span style="color:#E45649;">data</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    shallowInit</span><span style="color:#383A42;">(data) {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">objExtend</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, </span><span style="color:#E45649;">data</span><span style="color:#383A42;">, </span><span style="color:#986801;">false</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    formateObj</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> SerializeUtils.</span><span style="color:#4078F2;">formatter</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;_&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><a href="https://github.com/cyyspring/FormInit" target="_blank" rel="noreferrer">代码参考地址</a></p><h2 id="class-transformer" tabindex="-1">class-transformer <a class="header-anchor" href="#class-transformer" aria-label="Permalink to &quot;class-transformer&quot;">​</a></h2><p>社区中已经 存在了类似上面我们构想的库，把普通对象转换成已有的ES6类实例。举个例子，如果你从后端、一些api或者一个json文件加载了一个json，在经过 JSON.parse 之后，你拥有了一个普通的js对象，而不是已有类的实例，例如下面的案例</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">  &quot;id&quot;</span><span style="color:#383A42;">: </span><span style="color:#986801;">3</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">  &quot;firstName&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;Luke&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">  &quot;lastName&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;Dacascos&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">  &quot;age&quot;</span><span style="color:#383A42;">: </span><span style="color:#986801;">12</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我们有一个 User 类</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">export</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    id</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    firstName</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    lastName</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    age</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    getName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">firstName</span><span style="color:#0184BC;"> +</span><span style="color:#50A14F;"> &quot; &quot;</span><span style="color:#0184BC;"> +</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">lastName</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    isAdult</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> &gt;</span><span style="color:#986801;"> 36</span><span style="color:#0184BC;"> &amp;&amp;</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> &lt;</span><span style="color:#986801;"> 60</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>实际如果是通过 JSON 方法直接将 转换对象，这个 对象并不能使用上我们 在类上定义的行为，但是如果 一个字段赋值到我们的类也是一个重复的工程 ，这时候就可以使用使用 class-transformer。 该库的目的是帮助您映射普通的 js对象 指向您所拥有的 类的实例</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><p><strong>Node.js</strong> 上使用：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> class-transformer</span><span style="color:#986801;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> reflect-metadata</span><span style="color:#986801;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>并且确保在一个全局的地方引入它，例如 app.ts</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &quot;reflect-metadata&quot;</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于使用ES6的新特性，所以如果你正在使用旧版本的 nodejs，你可能还需要安装 es6-shim es6-shim:</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> es6-shim</span><span style="color:#986801;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>并且确保在一个全局的地方引入它，例如 app.ts</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &quot;es6-shim&quot;</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>Browser 浏览器</strong> 上使用：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> class-transformer</span><span style="color:#986801;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> reflect-metadata</span><span style="color:#986801;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在你的index.html中添加 reflect-metadata 的标签</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">&lt;</span><span style="color:#E45649;">html</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">   &lt;</span><span style="color:#E45649;">head</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">       &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#383A42;">       &lt;</span><span style="color:#E45649;">script</span><span style="color:#986801;"> src</span><span style="color:#383A42;">=</span><span style="color:#50A14F;">&quot;node_modules/reflect-metadata/Reflect.js&quot;</span><span style="color:#383A42;">&gt;&lt;/</span><span style="color:#E45649;">script</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#383A42;">   &lt;/</span><span style="color:#E45649;">head</span><span style="color:#383A42;">&gt;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">   &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#383A42;">&lt;/</span><span style="color:#E45649;">html</span><span style="color:#383A42;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果你是工程化的项目也可以直接导入</p><p>如果你正在使用 system.js，你可能需要添加 map and package 配置</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">    &quot;map&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">        &quot;class-transformer&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;node_modules/class-transformer&quot;</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#E45649;">    &quot;packages&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">        &quot;class-transformer&quot;</span><span style="color:#383A42;">: { </span><span style="color:#E45649;">&quot;main&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;index.js&quot;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">&quot;defaultExtension&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;js&quot;</span><span style="color:#383A42;"> }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="弊端" tabindex="-1">弊端 <a class="header-anchor" href="#弊端" aria-label="Permalink to &quot;弊端&quot;">​</a></h3><p>装饰器 语法 ？？？！！！</p><h4 id="关于-reflect-metadata" tabindex="-1">关于 reflect-metadata <a class="header-anchor" href="#关于-reflect-metadata" aria-label="Permalink to &quot;关于 reflect-metadata&quot;">​</a></h4><p>想做到通过修饰符通过声明性语法添加了在定义类时增加类及其成员的能力，将注释附加到类的静态属性，像 C # (这样的语言。NET) ，Java 支持向类型添加元数据的属性或注释，以及用于读取元数据的反射 API</p><p>reflect-metadata 是一个 TypeScript 库，可以在运行时向 TypeScript 类、属性、方法和参数添加和读取元数据，简化了元数据解析的流程，是一个方便实用的工具。Reflect metadata 主要用于在代码声明时添加/读取某个对象的元数据(metadata)</p><p>Reflect Metadata 是一个广泛使用的第三方npm package，同时该 package 的作者Ron Buckton也是Typescript的核心开发者(core contributor) 他于 2015 年提交了将 metadata 纳入 Typescript 官方的提案(ES7)，但目前为止他手上还有太多其他工作没有完成, 所以并没有提上议程。感兴趣的可以去以下链接查看具体信息:</p><ul><li>Metadata Proposal - ECMAScript: <a href="https://rbuckton.github.io/reflect-metadata/" target="_blank" rel="noreferrer">https://rbuckton.github.io/reflect-metadata/</a></li><li>Ron Buckton在 github 的回应: <a href="https://github.com/rbuckton/reflect-metadata/issues/9" target="_blank" rel="noreferrer">https://github.com/rbuckton/reflect-metadata/issues/9</a></li></ul><div class="tip custom-block"><p class="custom-block-title">元数据</p><p>当我们在开发程序的时候，通常需要在代码中定义很多类、属性、方法和参数等元素。这些元素的信息可以被认为是数据的一部分。而元数据，就是描述这些元素的信息的数据。比如，对于一个类，它的元数据可以包含类的名称、继承关系、成员方法和属性等信息。而在程序运行时，我们可以使用元数据来读取和处理这些元素，以实现一些功能</p><p>在某种程度上，可以认为属性就是元数据，因为它们都是用来描述数据的。但是，在编程中，元数据更多地是用于描述代码中的元素，包括类、属性、方法和参数等。属性是具体的数据值，而元数据是描述这些值的信息。比如，对于一个类，它的属性是类中存储的具体数据，而元数据则是描述这个类的名称、继承关系、成员方法和属性等信息的数据。在 reflect-metadata 中，我们可以将元数据添加到类的属性、方法和参数等位置，以便于在运行时处理这些元素。</p></div><p>使用方法：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> i</span><span style="color:#50A14F;"> reflect-metadata</span><span style="color:#986801;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果你是 ts 开发你需要 在 tsconfig.json 里配置 <code>emitDecoratorMetadata</code> 选项为 <code>true</code>, 并在 入口文件位置导入 <code>import &#39;reflect-metadata&#39;</code></p><p>一个案例</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &#39;reflect-metadata&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Post</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> metadataClass</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, Post);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> metadataObj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Post</span><span style="color:#383A42;">(), </span><span style="color:#50A14F;">&quot;name&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(metadataClass); </span><span style="color:#A0A1A7;font-style:italic;">// admin</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(metadataObj); </span><span style="color:#A0A1A7;font-style:italic;">// admin</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Post1</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @Reflect.</span><span style="color:#4078F2;">metadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;admin&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  name2 </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> metadataClass1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, Post1);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> metadataObj1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;role&quot;</span><span style="color:#383A42;">, </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Post1</span><span style="color:#383A42;">(), </span><span style="color:#50A14F;">&quot;name&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(metadataClass); </span><span style="color:#A0A1A7;font-style:italic;">// admin</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(metadataObj); </span><span style="color:#A0A1A7;font-style:italic;">// admin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>在 reflect-metadata 源码位置 可以找到 <code>var targetMetadata = Metadata.get(O);</code> 将 Metadata 打印出来 可以看出做了Map 映射让数据直接形成关系</p><p><img src="`+p+'" alt=""></p><h3 id="使用-class-transformer-案例" tabindex="-1">使用 class-transformer 案例 <a class="header-anchor" href="#使用-class-transformer-案例" aria-label="Permalink to &quot;使用 class-transformer 案例&quot;">​</a></h3><p><a href="https://juejin.cn/post/7125066863150628900" target="_blank" rel="noreferrer">https://juejin.cn/post/7125066863150628900</a> ？？</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://developer.aliyun.com/article/792498" target="_blank" rel="noreferrer">掌握 JS 高级编程基础 - Reflect Metadata</a></p><p><a href="https://developer.aliyun.com/article/892441" target="_blank" rel="noreferrer">ECMAScript 双月报告：装饰器提案进入 Stage 3</a></p><p><a href="https://jkchao.github.io/typescript-book-chinese/tips/metadata.html#controller-%E4%B8%8E-get-%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noreferrer">Reflect Metadata</a></p><p><a href="https://www.devbean.net/2023/05/reflect-metadata/" target="_blank" rel="noreferrer">REFLECT-METADATA 包以及 ECMASCRIPT 提案</a></p><p><a href="https://www.myfreax.com/typescriptzhong-de-zhuang-shi-qi-he-yuan-shu-ju-fan-she-cong-xin-shou-dao-zhuan-jia/" target="_blank" rel="noreferrer">TypeScript中的装饰器和metadata reflection API反射：从新手到专家</a></p><p><a href="https://www.pengfeixc.com/blogs/javascript/reflect-metadata" target="_blank" rel="noreferrer">JavaScript Reflect 和 reflect-metadata</a></p><p><a href="https://juejin.cn/post/7060687817097084935#heading-0" target="_blank" rel="noreferrer">【译】reflect-metadata及相关ECMAScript提案简介</a></p>',76),t=[o];function r(c,i,y,A,b,u){return a(),n("div",null,t)}const f=s(e,[["render",r]]);export{d as __pageData,f as default};
