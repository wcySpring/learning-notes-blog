import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const u=JSON.parse('{"title":"","description":"Date 对象比较常用因此特记录","frontmatter":{"description":"Date 对象比较常用因此特记录"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/3.Date对象.md","filePath":"A.前端知识整理/2.JS基础/3.Date对象.md","lastUpdated":1691718897000}'),o={name:"A.前端知识整理/2.JS基础/3.Date对象.md"},e=l(`<p>Date 对象在 JavaScript 中表示时间的单个瞬间。它可以用于执行各种与日期和时间相关的操作，例如创建、格式化和解析日期。</p><p>在 JavaScript 中，使用 Date 对象创建的日期和时间是基于 UTC 的，但是在输出时会根据本地时区进行调整。所以，可以说 Date 对象创建的是 UTC 时间。</p><ul><li><p><code>GMT</code>是英国伦敦的<strong>皇家格林威治（ Greenwich ）天文台</strong>的标准时间（刚好在本初子午线经过的地方）往<strong>东</strong>的时区时间晚(表示为 <strong>GMT+hh:mm</strong>)、往<strong>西</strong>的时区时间早(表示为 <strong>GMT-hh:mm</strong>) 例子说明：<strong>Sat Jul 09 2022 09:38:28 GMT+0800 (中国标准时间)</strong> 中国是东八区</p></li><li><p><code>UTC</code> 产生因为公转有一定的误差，也会造成GMT的时间会造成一定的误差，于是就提出了根据原子钟计算的标准时间<strong>UTC</strong>（Coordinated Universal Time），UTC 是一种标准时间，它是根据原子钟计算的，用于避免地球自转引起的误差。而本初子午线是一个经度线，它被定义为经过英国伦敦的那条经线。UTC 时间是以本初子午线为基准的，因此可以将 UTC 看作是本初子午线时间的替代。</p></li></ul><p><strong>注</strong>：GMT依然在使用，主要表示的是某个时区中的时间，而UTC是标准的时间</p><h2 id="两种时间格式" tabindex="-1">两种时间格式 <a class="header-anchor" href="#两种时间格式" aria-label="Permalink to &quot;两种时间格式&quot;">​</a></h2><ol><li><code>Thu Jan 01 1970 08:00:01 GMT+0800 (中国标准时间)</code> -- 是RFC 2822标准</li></ol><p>RFC2822：用于在 HTTP 和电子邮件标题等位置统一表示日期和时间的互联网信息格式。RFC 2822 包括星期几（短）、数字日期、月份的三字母缩写、年、时间和时区</p><ol start="2"><li><code>2022-07-09T02:14:44.989Z</code> -- ISO 8601标准</li></ol><p>ISO8601，全称为《数据存储和交换形式·信息交换·日期和时间的表示方法》，规定了国际标准日期与时间表示法。</p><ul><li>只使用数字为基本格式。使用短横线&quot;-&quot;间隔开年、月、日为扩展格式。</li><li>每个日期和时间值都有一个固定的位数，必须用前导零填充。</li><li>日期时间表示只能有数字或少数特殊字符组成（如“ - ”，“：”，“T”，“W”和“Z”），不允许出现地方写法，如“1月”或“星期四”等。</li><li>ISO 8601使用24小时制。HH：MM：SS.sss，HH：MM：SS，HH：MM，HH为合规的时间格式。</li><li>用字母T分隔日期和时间。如  20180703T224426Z   或  2018-07-03T22:44:26Z 。</li></ul><p><strong>ISO 8601标准</strong> 个参数说明，<strong>YYYY</strong>：年份，0000 ~ 9999，<strong>MM</strong>：月份，01 ~ 12，<strong>DD</strong>：日，01 ~ 31 <strong>T</strong>：分隔日期和时间，没有特殊含义，可以省略，<strong>HH</strong>：小时，00 ~ 24，<strong>mm</strong>：分钟，00 ~ 59，<strong>ss</strong>：秒，00 ~ 59，<strong>sss</strong>：毫秒，<strong>Z</strong>：时区</p><h2 id="计算机中时间" tabindex="-1">计算机中时间 <a class="header-anchor" href="#计算机中时间" aria-label="Permalink to &quot;计算机中时间&quot;">​</a></h2><p>以前的Unix操作系统中存储时间，是以32位有符号数来存储的。用32位来表示时间的最大间隔是68年，而最早出现的UNIX操作系统考虑到计算机产生的年代和应用的时限综合取了1970年1月1日0时0分0秒作为UNIX TIME的纪元时间(开始时间)，将1970年作为中间点，向左向右偏移都可以照顾到更早或者更后的时间，因此将1970年1月1日0点作为计算机表示时间的原点，从1970年1月1日开始经过的秒数存储为一个32位整数。以后计算时间就把这个时间（1970年1月1日00:00:00）当做时间的零点。这种高效简洁的时间表示法，就被称为&quot;Unix时间纪元&quot;。</p><p><a href="https://blog.51cto.com/u_15308298/3173445" target="_blank" rel="noreferrer">由浅入深，走进中级工程师都未必知道的 JavaScript 时间处理冷知识</a></p><h2 id="date-语法" tabindex="-1">Date 语法 <a class="header-anchor" href="#date-语法" aria-label="Permalink to &quot;Date 语法&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(); </span><span style="color:#A0A1A7;font-style:italic;">// 打印结果为当前地区时间</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#383A42;">Sat Jul </span><span style="color:#986801;">09</span><span style="color:#986801;"> 2022</span><span style="color:#986801;"> 09</span><span style="color:#383A42;">:</span><span style="color:#986801;">49</span><span style="color:#383A42;">:</span><span style="color:#986801;">39</span><span style="color:#986801;"> GMT</span><span style="color:#0184BC;">+</span><span style="color:#986801;">0800</span><span style="color:#383A42;"> (中国标准时间)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;2022-07-09&#39;</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// 传入时间格式字符串 这种不推荐 字符串格式 2022/07/09 等等</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#383A42;">Sat Jul </span><span style="color:#986801;">09</span><span style="color:#986801;"> 2022</span><span style="color:#986801;"> 08</span><span style="color:#383A42;">:</span><span style="color:#986801;">00</span><span style="color:#383A42;">:</span><span style="color:#986801;">00</span><span style="color:#986801;"> GMT</span><span style="color:#0184BC;">+</span><span style="color:#986801;">0800</span><span style="color:#383A42;"> (中国标准时间)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(</span><span style="color:#986801;">2022</span><span style="color:#383A42;">,</span><span style="color:#986801;">07</span><span style="color:#383A42;">,</span><span style="color:#986801;">07</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// 注1 new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#383A42;">Sun Aug </span><span style="color:#986801;">07</span><span style="color:#986801;"> 2022</span><span style="color:#986801;"> 00</span><span style="color:#383A42;">:</span><span style="color:#986801;">00</span><span style="color:#383A42;">:</span><span style="color:#986801;">00</span><span style="color:#986801;"> GMT</span><span style="color:#0184BC;">+</span><span style="color:#986801;">0800</span><span style="color:#383A42;"> (中国标准时间)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(</span><span style="color:#986801;">1000</span><span style="color:#383A42;">)  </span><span style="color:#A0A1A7;font-style:italic;">// 传入是数字，会被当做毫秒处理表示从1970-01-01 00:00:00 UTC 经过的毫秒数</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#383A42;">Thu Jan </span><span style="color:#986801;">01</span><span style="color:#986801;"> 1970</span><span style="color:#986801;"> 08</span><span style="color:#383A42;">:</span><span style="color:#986801;">00</span><span style="color:#383A42;">:</span><span style="color:#986801;">01</span><span style="color:#986801;"> GMT</span><span style="color:#0184BC;">+</span><span style="color:#986801;">0800</span><span style="color:#383A42;"> (中国标准时间)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">().</span><span style="color:#4078F2;">toISOString</span><span style="color:#383A42;">() </span><span style="color:#A0A1A7;font-style:italic;">// 打印ISO8601格式</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#50A14F;">&#39;2022-07-09T02:14:44.989Z&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>当 Date 作为构造函数调用并传入多个参数时，如果数值大于合理范围时（如月份为 13 或者分钟数为 70），相邻的数值会被调整。比如 new Date(2013, 13, 1) 等于 new Date(2014, 1, 1)，它们都表示日期 2014-02-01（注意月份是从 0 开始的）。其他数值也是类似，new Date(2013, 2, 1, 0, 70) 等于 new Date(2013, 2, 1, 1, 10)，都表示同一个时间：<code>2013-03-01T01:10:00</code></p><h3 id="获取时间戳" tabindex="-1">获取时间戳 <a class="header-anchor" href="#获取时间戳" aria-label="Permalink to &quot;获取时间戳&quot;">​</a></h3><ul><li><strong>Unix 时间戳</strong>：它是一个整数值，表示自1970年1月1日00:00:00 UTC以来的毫秒数</li></ul><ol><li><strong>new Date().getTime()</strong></li><li><strong>new Date().valueOf()</strong></li><li><strong>+new Date()</strong></li><li><strong>Date.now()</strong></li><li><strong>Date.parse(dateString)</strong> 等同于 <strong>new Date(dateString).getTime()</strong> 操作 举个例子，需要符合 RFC2822 或 ISO 8601 日期格式的字符串； 比如YYYY-MM-DDTHH:mm:ss.sssZ，如果输入的格式不能被解析，那么会返回NaN <strong>Date.parse(&#39;2022-07-09T02:14:44.989Z&#39;)</strong> 打印结果<code>1657332884989</code></li></ol><h3 id="从date对象中获取" tabindex="-1">从Date对象中获取 <a class="header-anchor" href="#从date对象中获取" aria-label="Permalink to &quot;从Date对象中获取&quot;">​</a></h3><ol><li><strong>getFullYear()</strong>：获取年份（4 位数）；</li><li><strong>getMonth()</strong>：获取月份，从 0 到 11；</li><li><strong>getDate()</strong>：获取当月的具体日期，从 1 到 31；</li><li><strong>getHours()</strong>：获取小时；</li><li><strong>getMinutes()</strong>：获取分钟；</li><li><strong>getSeconds()</strong>：获取秒钟；</li><li><strong>getMilliseconds()</strong>：获取毫秒；</li><li><strong>getDay()</strong> 获取一周中的第几天，从 0（星期日）到 6（星期六）</li></ol><h3 id="从-date-中赋值" tabindex="-1">从 Date 中赋值 <a class="header-anchor" href="#从-date-中赋值" aria-label="Permalink to &quot;从 Date 中赋值&quot;">​</a></h3><ol><li><strong>setFullYear(year, [month], [date])</strong></li><li><strong>setMonth(month, [date])</strong></li><li><strong>setDate(date)</strong></li><li><strong>setHours(hour, [min], [sec], [ms])</strong></li><li><strong>setMinutes(min, [sec], [ms])</strong></li><li><strong>setSeconds(sec, [ms])</strong></li><li><strong>setMilliseconds(ms)</strong></li><li><strong>setTime(milliseconds)</strong></li></ol><ul><li>注： 设置超范围的数值，它会自动校准</li></ul><h2 id="js判断某年某月有多少天" tabindex="-1">JS判断某年某月有多少天 <a class="header-anchor" href="#js判断某年某月有多少天" aria-label="Permalink to &quot;JS判断某年某月有多少天&quot;">​</a></h2><p>在JavaScript中，当使用Date构造函数并传入特定参数时，有一些规则：</p><ol><li>月份是从0开始计数的，即一月是0，二月是1，依此类推，十二月是11。</li><li>如果传入的日期为0，JavaScript会将其解释为所指定月份的最后一天。它会自动计算该月有多少天，并返回该月的最后一天的日期。</li><li>如果传入的月份超过了合法的范围（0到11），JavaScript会相应地调整年份。例如，传入13作为月份会将年份加1，传入-1会将年份减1。</li></ol><p>因此，如果我们想知道某年某月有多少天，可以使用以下步骤：</p><p>使用new Date(year, month + 1, 0)构造一个Date对象，其中year是年份，month是月份。JavaScript会自动将传入的月份加1，并将日期设置为0，从而得到指定月份的最后一天的日期。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> getDaysInMonth</span><span style="color:#383A42;">(year,month){</span></span>
<span class="line"><span style="color:#A626A4;">  let</span><span style="color:#383A42;"> temp </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(year,month,</span><span style="color:#986801;">0</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> temp.</span><span style="color:#4078F2;">getDate</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#4078F2;">getDaysInMonth</span><span style="color:#383A42;">(</span><span style="color:#986801;">2019</span><span style="color:#383A42;">,</span><span style="color:#986801;">2</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">//28 </span></span>
<span class="line"><span style="color:#4078F2;">getDaysInMonth</span><span style="color:#383A42;">(</span><span style="color:#986801;">2020</span><span style="color:#383A42;">,</span><span style="color:#986801;">2</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">//29</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="获取倒计时七天" tabindex="-1">获取倒计时七天 <a class="header-anchor" href="#获取倒计时七天" aria-label="Permalink to &quot;获取倒计时七天&quot;">​</a></h2><p>当使用 new Date(now - 24 * 60 * 60 * 1000) 来计算前一天的日期时，它通常可以正常工作，即使是在月末。</p><p>无论当前日期是月末还是其他日期，该操作都会准确地计算前一天的日期。例如，如果当前日期是 2023 年 8 月 31 日，那么通过 new Date(now - 24 * 60 * 60 * 1000) 可以得到 2023 年 8 月 30 日</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> now </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(); </span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> s </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> i </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 0</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">while</span><span style="color:#383A42;"> (i </span><span style="color:#0184BC;">&lt;</span><span style="color:#986801;"> 7</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    s </span><span style="color:#0184BC;">+=</span><span style="color:#383A42;"> now.</span><span style="color:#4078F2;">getFullYear</span><span style="color:#383A42;">() </span><span style="color:#0184BC;">+</span><span style="color:#50A14F;"> &#39;/&#39;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> (now.</span><span style="color:#4078F2;">getMonth</span><span style="color:#383A42;">() </span><span style="color:#0184BC;">+</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">) </span><span style="color:#0184BC;">+</span><span style="color:#50A14F;"> &#39;/&#39;</span><span style="color:#0184BC;"> +</span><span style="color:#383A42;"> now.</span><span style="color:#4078F2;">getDate</span><span style="color:#383A42;">() </span><span style="color:#0184BC;">+</span><span style="color:#50A14F;"> &#39;</span><span style="color:#0184BC;">\\n</span><span style="color:#50A14F;">&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    now </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Date</span><span style="color:#383A42;">(now </span><span style="color:#0184BC;">-</span><span style="color:#986801;"> 24</span><span style="color:#0184BC;"> *</span><span style="color:#986801;"> 60</span><span style="color:#0184BC;"> *</span><span style="color:#986801;"> 60</span><span style="color:#0184BC;"> *</span><span style="color:#986801;"> 1000</span><span style="color:#383A42;">); </span></span>
<span class="line"><span style="color:#383A42;">    i</span><span style="color:#0184BC;">++</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * 2023/8/10</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		2023/8/9</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		2023/8/8</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		2023/8/7</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		2023/8/6</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		2023/8/5</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		2023/8/4</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(s);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_2038年问题" tabindex="-1">2038年问题 <a class="header-anchor" href="#_2038年问题" aria-label="Permalink to &quot;2038年问题&quot;">​</a></h2><p>Unix时间戳是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不考虑闰秒。在32位系统上，time_t能表示的最大值为0x7ffffffff，当time_t取最大值时表示系统时间为2038-01-19 03:14:07，但时间再往后走时，那time_t会溢出变成一个负值，此时系统时间会倒流回到1901年，届时操作系统和上层软件都会运行出错。</p><p>解决这个问题最简单粗暴的方法是用64位来表示时间。64位表示时间的最大值是2900亿年后的292,277,026,596年12月4日15:30:08，星期日（UTC）（北京时间292,277,026,596年12月4日23:30:08）。实际上，大部份64位操作系统已经把time_t改为64位整型，对于这些机器来说，2038年问题不复存在。然而对于嵌入式设备来说，现在还有大量32位系统在全球各地运行，谁也无法保证这些系统在2038年之前就能光荣退役。另外对于64位操作系统，上面还会运行着32位的应用程序，依旧会发生2038年问题。</p>`,38),p=[e];function t(r,c,i,y,A,b){return a(),n("div",null,p)}const d=s(o,[["render",t]]);export{u as __pageData,d as default};
