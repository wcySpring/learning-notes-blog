import{_ as a,c as s,o as e,a8 as n}from"./chunks/framework.6k5lawSO.js";const b=JSON.parse('{"title":"","description":"reflect-metadata","frontmatter":{"description":"reflect-metadata"},"headers":[],"relativePath":"A.前端知识整理/4.前端ES新语法记录/3.代理和反射/3.reflect-metadata.md","filePath":"A.前端知识整理/4.前端ES新语法记录/3.代理和反射/3.reflect-metadata.md","lastUpdated":1718893054000}'),t={name:"A.前端知识整理/4.前端ES新语法记录/3.代理和反射/3.reflect-metadata.md"},l=n(`<p><code>reflect-metadata</code> 是一个用于 TypeScript 和 ECMAScript 提案的元数据反射库。它通过提供对元数据的定义和检索支持，简化了装饰器（Decorators）的使用。该库实现了多种元数据相关功能，可以在类、方法、参数和属性上设置和获取元数据。</p><p><strong>Metadata（元数据）</strong>，简单的说，就是为真正的数据提供额外的信息。例如，如果一个变量表示一个数组，那么数组的length就是其元数据。相似的，数组中的每个元素是数据的话，那么数据类型就是其元数据。更加宽泛的讲，元数据不仅仅是编程中的概念，它能够帮助我们更快的实现一些事情。举几个例子</p><ul><li><p>如果你有一个变量 name，它的值可能是一个字符串 &quot;Alice&quot;。但元数据可以告诉你更多，比如这个字符串的长度、它的类型是字符串、这个数据的来源（例如从哪个数据库表中获取的）、是否是必填字段等。</p></li><li><p>在图像文件中，元数据可能包括文件的分辨率、拍摄时间、拍摄地点以及相机型号等。</p></li></ul><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>要使用 <code>reflect-metadata</code>，首先需要将其安装到你的项目中。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> reflect-metadata</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在使用 <code>reflect-metadata</code> 之前，需要在代码的入口文件（例如 index.ts 或 main.ts）中引入 <code>reflect-metadata</code>：</p><h3 id="api-说明" tabindex="-1">api 说明 <a class="header-anchor" href="#api-说明" aria-label="Permalink to &quot;api 说明&quot;">​</a></h3><p><code>reflect-metadata</code> 是一个用于在对象上定义和管理元数据的 TypeScript 库。它通过提供一组标准化的 API，使开发者能够在对象、类和方法上附加和读取元数据。这些 API 包括定义、获取、检查和删除元数据等操作。</p><table tabindex="0"><thead><tr><th>API 名称</th><th>描述</th><th>参数</th><th>使用示例</th></tr></thead><tbody><tr><td><code>Reflect.defineMetadata</code></td><td>在目标对象上定义元数据（键值对）。</td><td><code>metadataKey</code>, <code>metadataValue</code>, <code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>Reflect.defineMetadata(&#39;key&#39;, &#39;value&#39;, targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.getMetadata</code></td><td>获取目标对象上定义的元数据。</td><td><code>metadataKey</code>, <code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const value = Reflect.getMetadata(&#39;key&#39;, targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.getOwnMetadata</code></td><td>获取目标对象自身（不包括原型链）上定义的元数据。</td><td><code>metadataKey</code>, <code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const value = Reflect.getOwnMetadata(&#39;key&#39;, targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.hasMetadata</code></td><td>检查目标对象上是否存在指定键的元数据。</td><td><code>metadataKey</code>, <code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const hasKey = Reflect.hasMetadata(&#39;key&#39;, targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.hasOwnMetadata</code></td><td>检查目标对象自身（不包括原型链）上是否存在指定键的元数据。</td><td><code>metadataKey</code>, <code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const hasKey = Reflect.hasOwnMetadata(&#39;key&#39;, targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.deleteMetadata</code></td><td>删除目标对象上指定键的元数据。</td><td><code>metadataKey</code>, <code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const result = Reflect.deleteMetadata(&#39;key&#39;, targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.getMetadataKeys</code></td><td>获取目标对象上所有元数据键，包括原型链中的键。</td><td><code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const keys = Reflect.getMetadataKeys(targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.getOwnMetadataKeys</code></td><td>获取目标对象自身（不包括原型链）上所有元数据键。</td><td><code>target</code>, <code>propertyKey</code> (<code>propertyKey</code> 可选)</td><td><code>const keys = Reflect.getOwnMetadataKeys(targetObject, &#39;propertyName&#39;);</code></td></tr><tr><td><code>Reflect.metadata</code></td><td>一个工厂函数，用于创建装饰器，将元数据附加到目标对象上。用于类或类成员的装饰器。</td><td><code>metadataKey</code>, <code>metadataValue</code></td><td><code>@Reflect.metadata(&#39;key&#39;, &#39;value&#39;)</code></td></tr></tbody></table><h3 id="参数解释" tabindex="-1">参数解释 <a class="header-anchor" href="#参数解释" aria-label="Permalink to &quot;参数解释&quot;">​</a></h3><ol><li><strong>metadataKey</strong>: 表示元数据的键。类型可以是任意的，通常使用字符串或符号。</li><li><strong>metadataValue</strong>: 表示元数据的值。类型可以是任意的。</li><li><strong>target</strong>: 元数据附加到的目标对象。通常是类的原型或者类的构造函数。</li><li><strong>propertyKey (可选)</strong>: 元数据附加到的属性或方法的名称。类型为字符串或符号。</li></ol><p>每个 API 的参数组合形成了一个唯一的元数据定义或查询：</p><ul><li><code>target + metadataKey</code>: 元数据附加到类或对象上。</li><li><code>target + propertyKey + metadataKey</code>: 元数据附加到对象或类的特定属性或方法上。</li></ul><h4 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h4><p>案例中 value 也可是对象不用像案例中只是基本属性</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &quot;reflect-metadata&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  myProperty</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#4078F2;">  say</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#986801;"> 123</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ------------ 类似set defineMetadata---------------------</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 定义键值对存储 target  + metadataKey ： value</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;123&quot;</span><span style="color:#383A42;">, p);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 定义键值对存储 target + propertyKey + metadataKey：value</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// myProperty1 任意字段值 不一定非要是 对象自己的</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;456&quot;</span><span style="color:#383A42;">, p, </span><span style="color:#50A14F;">&quot;myProperty&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 原型链上保存 一般原型链上的都是共享属性 也就是function   a.__proto__ ==&gt; A.property (A.property.constructor A.propKey.xxxxFun)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey1&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;789&quot;</span><span style="color:#383A42;">, </span><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ------------类似get getMetadata ------------------获取原型链上的值</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> metadataValue</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, p);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 必须 target + propertyKey + metadataKey key 才能获取value</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> metadataValue1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, p, </span><span style="color:#50A14F;">&quot;myProperty&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 也会获取原型链上的值</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey1&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// 789</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(metadataValue); </span><span style="color:#A0A1A7;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(metadataValue1); </span><span style="color:#A0A1A7;font-style:italic;">// 456</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//---------------- getOwnMetadata --------------只有自身的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey1&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// undefined 原型链上的不会获取</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ------------- Reflect.getMetadataKeys 原型链上 key 也会打印 ---------------------------注意第二参数是 \`propertyKey\`</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getMetadataKeys</span><span style="color:#383A42;">(p)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;metadataKey&#39;, &#39;metadataKey1&#39; ]</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getMetadataKeys</span><span style="color:#383A42;">(p, </span><span style="color:#50A14F;">&quot;myProperty&quot;</span><span style="color:#383A42;">)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;metadataKey&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ------------- Reflect.getOwnMetadataKeys 只会打印自身的不包含原型链 ---------------------------注意第二参数是 \`propertyKey\`</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getOwnMetadataKeys</span><span style="color:#383A42;">(p)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;metadataKey&#39; ]</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getOwnMetadataKeys</span><span style="color:#383A42;">(p, </span><span style="color:#50A14F;">&quot;myProperty&quot;</span><span style="color:#383A42;">)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;metadataKey&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ----------------Reflect.hasMetadata	----------- 包含原型链</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">hasMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">hasMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey1&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ----------------Reflect.hasOwnMetadata	----------- 不包含原型链</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">hasOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">hasOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey1&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// --------------Reflect.deleteMetadata	--------- 移除</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">deleteMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">hasOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;metadataKey&quot;</span><span style="color:#383A42;">, p)); </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><h2 id="好的文章" tabindex="-1">好的文章 <a class="header-anchor" href="#好的文章" aria-label="Permalink to &quot;好的文章&quot;">​</a></h2><p><a href="https://juejin.cn/post/7060687817097084935#heading-0" target="_blank" rel="noreferrer">【译】reflect-metadata及相关ECMAScript提案简介</a></p>`,19),p=[l];function o(c,r,d,y,i,A){return e(),s("div",null,p)}const m=a(t,[["render",o]]);export{b as __pageData,m as default};
