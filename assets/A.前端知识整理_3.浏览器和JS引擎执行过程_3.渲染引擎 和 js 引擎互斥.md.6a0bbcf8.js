import{_ as s,o as n,c as a,O as l}from"./chunks/framework.ab95ac3d.js";const p="/learning-notes-blog/images/720c531563ca21edc34431cb8922a445f607f0740324a5db68811011bd24830a.png",o="/learning-notes-blog/images/7fae0d1874069911fa3e908ce4f655e2e7e037703a168ca3c4d21445633f1ba4.png",e="/learning-notes-blog/images/35e37c8fd10807a1cf66bab0f5a03f4d6376efc24fa8cbfb7c04a113a5680f96.png",t="/learning-notes-blog/images/e409c01971c82f864ee0d5be5c278f5c692ecd602c076c701145bdddd483bbff.png",c="/learning-notes-blog/images/d060be87361581df12d3d37a713f705c9253f39ba7db37646ca1832424be49d2.png",r="/learning-notes-blog/images/322322830216233dc627685beeccf57cee11e32fee8728a24e872254ba0a697f.png",E=JSON.parse('{"title":"","description":"了解渲染引擎 和 js 引擎互斥 -  浏览器代码执行过程","frontmatter":{"description":"了解渲染引擎 和 js 引擎互斥 -  浏览器代码执行过程"},"headers":[],"relativePath":"A.前端知识整理/3.浏览器和JS引擎执行过程/3.渲染引擎 和 js 引擎互斥.md","filePath":"A.前端知识整理/3.浏览器和JS引擎执行过程/3.渲染引擎 和 js 引擎互斥.md","lastUpdated":1687795930000}'),B={name:"A.前端知识整理/3.浏览器和JS引擎执行过程/3.渲染引擎 和 js 引擎互斥.md"},i=l('<p>当网页的界面需要重绘（Repaint）或者某个操作导致页面布局发生变化（回流，Reflow）时，GUI渲染线程会被触发执行。重绘是指更新页面中的某个元素的外观，而回流是指重新计算页面布局，可能涉及到多个元素的位置和尺寸变化。</p><p>然而，需要注意的是，GUI渲染线程与JavaScript引擎是互斥的。这意味着当JavaScript引擎正在执行代码时，GUI渲染线程会被挂起，无法执行。这样做是为了避免JavaScript代码与页面渲染之间的冲突。在JavaScript引擎执行期间，所有的GUI更新操作会被保存在一个队列中。当JavaScript引擎执行完毕并空闲下来时，队列中的GUI更新操作会立即被执行，以确保页面渲染的正确性。</p><p><img src="'+p+`" alt="图 7"></p><p>两个JavaScript方法（updateSync和updateAsync）在执行时的不同表现。当运行updateSync方法时，页面上的按钮会立刻显示999，而运行updateAsync方法时，按钮上的数字会逐渐增加。</p><p>这种现象可以通过JavaScript引擎线程和GUI渲染线程之间的互斥关系来解释。在updateSync方法执行过程中，GUI渲染线程会等待JavaScript引擎线程执行完毕，因此按钮上的数字会直接变成999。而在updateAsync方法执行过程中，GUI渲染线程可以在JavaScript引擎线程执行过程中更新按钮上的数字，因此按钮上的数字会逐渐增加。这种差异可以通过图像更直观地展示。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">id</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;output&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">onclick</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;updateSync ()&quot;</span><span style="color:#ABB2BF;">&gt;Run Sync&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;font-style:italic;">onclick</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;updateAsync ()&quot;</span><span style="color:#ABB2BF;">&gt;Run Async&lt;/</span><span style="color:#E06C75;">button</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">function updateSync() </span><span style="color:#C678DD;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">var</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1000</span><span style="color:#ABB2BF;">; </span><span style="color:#E06C75;">i</span><span style="color:#56B6C2;">++</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        document.getElementById(</span><span style="color:#98C379;">&#39;output&#39;</span><span style="color:#E06C75;">).innerHTML = i;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">function updateAsync() {</span></span>
<span class="line"><span style="color:#E06C75;">    var i = 0;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    function updateLater() {</span></span>
<span class="line"><span style="color:#E06C75;">        document.getElementById(</span><span style="color:#98C379;">&#39;output&#39;</span><span style="color:#E06C75;">).innerHTML = (i++);</span></span>
<span class="line"><span style="color:#E06C75;">        if (i &lt; 1000) {</span></span>
<span class="line"><span style="color:#E06C75;">            setTimeout(updateLater, 0);</span></span>
<span class="line"><span style="color:#E06C75;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    updateLater();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"><span style="color:#E06C75;">&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="js-阻塞-和渲染引擎组合后的渲染全过程" tabindex="-1">js 阻塞 和渲染引擎组合后的渲染全过程 <a class="header-anchor" href="#js-阻塞-和渲染引擎组合后的渲染全过程" aria-label="Permalink to &quot;js 阻塞 和渲染引擎组合后的渲染全过程&quot;">​</a></h3><p>因此实际浏览器渲染过程其实是 这段内容描述了浏览器渲染页面的整个过程：</p><ol><li><p>DOM Tree：浏览器解析HTML文档，生成DOM树。当DOM树构建完成时，触发DOMContentLoaded事件。</p></li><li><p>执行JS：在DOM树构建过程中，如果遇到JavaScript代码，浏览器会执行这些代码。在执行过程中，可能会对DOM树进行修改。注意，JS执行会阻止接下来的渲染过程，直到JS执行完成。</p></li><li><p>CSSOM Tree：浏览器解析CSS样式，生成CSSOM树。</p></li><li><p>Render Tree：根据DOM树和CSSOM树，生成渲染树。渲染树是浏览器将来按照这个树来绘制页面的依据。</p></li><li><p>Layout：计算渲染树中每个元素的布局信息，如位置、大小等。这个过程也称为回流或重排。</p></li><li><p>Painting：根据渲染树和布局信息，绘制页面。这个过程也称为重绘。在绘制过程中，浏览器采用分层绘制的策略，将页面分为多个图层，分别进行绘制。</p></li></ol><h3 id="为什么加载script-会阻止dom" tabindex="-1">为什么加载script 会阻止dom <a class="header-anchor" href="#为什么加载script-会阻止dom" aria-label="Permalink to &quot;为什么加载script 会阻止dom&quot;">​</a></h3><p>当HTML解析器遇到<code>&lt;script&gt;</code>标签时，它会暂停对HTML文档的解析，然后加载、解析并执行其中的JavaScript代码。这是因为JavaScript可以通过诸如<code>document.write()</code>等方法来修改DOM结构，从而改变文档的形状。为了确保正确处理这些更改，HTML解析器需要等待JavaScript代码执行完成后，才能继续解析HTML文档。</p><h3 id="为什么不要将-script-标签放到头部" tabindex="-1">为什么不要将 script 标签放到头部 <a class="header-anchor" href="#为什么不要将-script-标签放到头部" aria-label="Permalink to &quot;为什么不要将 script 标签放到头部&quot;">​</a></h3><ol><li><p><code>&lt;head&gt;</code>中放置的<code>&lt;script&gt;</code>元素会阻塞页面的渲染过程因为上面说过,当 JS 引擎执行时，GUI 线程会被挂起。因此把 JavaScript 放在<code>&lt;head&gt;</code>里，意味着必须把所有 JavaScript 代码都下载、解析和解释完成后，才能开始渲染页面。<strong>对应问题</strong>：外部脚本加载时间很长（比如一直无法完成下载），就会造成网页长时间失去响应，浏览器就会呈现“假死”状态，用户体验会变得很糟糕</p></li><li><p>将 JavaScript 脚本放在<code>&lt;body&gt;</code>的最后面。这样可以避免资源阻塞，页面得以迅速展示</p></li><li><p>也可使用 defer/async 做标记</p></li></ol><h2 id="关于defer-async" tabindex="-1">关于defer/async <a class="header-anchor" href="#关于defer-async" aria-label="Permalink to &quot;关于defer/async&quot;">​</a></h2><p>遇到 <code>&lt;script src=&#39;xxx/xxx.js&#39;&gt;</code>，会阻碍GUI的渲染, 因此 增加了两个属性 defer/async ，了解之前需要知道一个概念，script 这里需要两部分来看，第一部分是 <strong>下载</strong>，第二部分是 <strong>执行</strong>，一个文件的<strong>下载过程不会阻止其他文件的下载和执行</strong>，但一个文件的<strong>执行过程会阻止其他文件的执行（js 和 渲染引擎互斥）</strong>，而不会阻止其他文件的下载。下载过程 也分为同步和异步，同步只能下载完一个文件才能下载另一个，异步加载允许浏览器同时下载多个文件以及执行， 但是中间要注意但是无论下载时什么方式，但是文件执行只能一次一个</p><p>因此，为了优化这个过程，可以将下载和执行问题拆解，从而实现更高效的加载和执行。关键在于合理安排何时触发执行，以充分利用浏览器的资源。</p><p>先通过案例在 <code>script</code> 引入 <code>index.js</code> 其中 <code>index.js</code> 是一个从10000打印到0的一个方法，下面是四种不同形式的使用,案例说明<strong>当你在你本地想查看同等案例的时候需要一次仅放开一种情况来查看效果</strong>，四种情况效果</p><ol><li>第一种情况 script 放置顶部，运行后 <code>&lt;p&gt;我在开始渲染&lt;/p&gt;</code> 没有立刻渲染</li><li>第二种情况 script 增加了&#39;defer&#39;属性，运行后 <code>&lt;p&gt;我在开始渲染&lt;/p&gt;</code> 立刻渲染</li><li>第三种情况 script 增加了&#39;async&#39;属性，运行后 <code>&lt;p&gt;我在开始渲染&lt;/p&gt;</code> 立刻渲染</li><li>第四种情况 script 放到底部，运行后 <code>&lt;p&gt;我在开始渲染&lt;/p&gt;</code> 立刻渲染</li></ol><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 第一种 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt; </span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 第二种 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">defer</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 第三种 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;我在开始渲染&lt;/</span><span style="color:#E06C75;">p</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 第四种 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">  </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;index.js&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li>index.js</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">let</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10000</span></span>
<span class="line"><span style="color:#C678DD;">while</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">-=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">count</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面面过程中第一种 和 第四种情况他们都是 下载和执行 全部阻碍html渲染,并且浏览器一次只能执行一个文件，这导致了JS 引擎执行时，GUI 线程会被挂起，遇到&#39;script&#39; 下载对应资源，下载后解析资源，在重新渲染html，但由于第一种和第四种位置放置区别，产生了两种不同效果，它效果如图 <img src="`+o+'" alt="图 8"></p><p>关于第二种和第三种需要具体来看</p><h3 id="async-异步" tabindex="-1">Async -- 异步 <a class="header-anchor" href="#async-异步" aria-label="Permalink to &quot;Async -- 异步&quot;">​</a></h3><p><img src="'+e+'" alt="图 11"></p><ol><li><p><code>async</code>属性允许浏览器在执行其他操作的同时并行下载指定的JavaScript资源。这意味着在下载JS文件时，浏览器不会阻塞其他操作，提高了页面加载的效率。但是，一旦JS文件下载完成，浏览器将立即执行它，这可能会阻止HTML文件的当前渲染。</p></li><li><p>使用<code>async</code>属性加载的脚本执行顺序是不可预测的。例如，如果有三个脚本分别将一个数字记录到控制台中，使用<code>async</code>加载时，它们的执行顺序可能会发生变化，导致输出的数字顺序不确定。</p></li></ol><p><img src="'+t+'" alt="图 12"></p><ol start="3"><li><code>async</code>属性不能保证脚本在<code>DOMContentLoaded</code>事件之前或之后执行。这意味着，当使用<code>async</code>加载脚本时，我们无法确保脚本在页面的某个特定时刻执行，可能会导致一些依赖于特定执行时机的问题。</li></ol><ul><li><p>如果脚本在DOMContentLoaded之前执行，那么它可能无法访问或操作尚未加载和解析的页面元素，从而导致脚本执行失败或出现错误。</p></li><li><p>如果脚本在DOMContentLoaded之后执行，那么它可能会错过一些关键的初始化操作，导致页面功能不完整或出现异常。</p></li></ul><h3 id="defer-延迟" tabindex="-1">defer-- 延迟 <a class="header-anchor" href="#defer-延迟" aria-label="Permalink to &quot;defer-- 延迟&quot;">​</a></h3><p><img src="'+c+'" alt="图 10"></p><ol><li><p>当在JS文件中使用defer属性时，浏览器会与其他文件一起下载这个JS文件，但是不会立即执行它。相反，它会等到HTML文件完全呈现后才开始执行。这与async属性不同，后者会在资源下载完成后立即执行。使用defer属性的好处是，它不会阻塞页面的渲染过程。</p></li><li><p>使用defer属性的多个JS文件将按照它们在HTML文件中的顺序依次加载和执行。这保证了脚本之间的依赖关系得到正确处理。</p></li><li><p>defer属性使得JS文件在DOM树构建完成后、DOMContentLoaded事件触发之前执行。这意味着，当脚本开始执行时，页面的DOM结构已经完全加载，可以被脚本安全地访问和操作。</p></li></ol><p><img src="'+r+`" alt="图 9"></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">&lt;!</span><span style="color:#E06C75;">DOCTYPE</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">html</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">lang</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;en&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">charset</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;UTF-8&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">http-equiv</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;X-UA-Compatible&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;IE=edge&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;viewport&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">content</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;width=device-width, initial-scale=1.0&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;Document&lt;/</span><span style="color:#E06C75;">title</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./js/test.js&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">defer</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">src</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;./js/demo.js&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">defer</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">head</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;app&quot;</span><span style="color:#ABB2BF;">&gt;app&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">class</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;box&quot;</span><span style="color:#ABB2BF;">&gt;&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;title&quot;</span><span style="color:#ABB2BF;">&gt;title&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;nav&quot;</span><span style="color:#ABB2BF;">&gt;nav&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">id</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">&quot;product&quot;</span><span style="color:#ABB2BF;">&gt;product&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 1.下载需要很长的事件, 并且执行也需要很长的时间 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;">&lt;!-- 总结一: 加上defer之后, js文件的下载和执行, 不会影响后面的DOM Tree的构建 --&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 总结三: defer代码是在DOMContentLoaded事件发出之前执行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">window</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addEventListener</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DOMContentLoaded&quot;</span><span style="color:#ABB2BF;">, () </span><span style="color:#C678DD;">=&gt;</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;DOMContentLoaded&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">    })</span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;/</span><span style="color:#E06C75;">script</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span></span>
<span class="line"><span style="color:#ABB2BF;">  &lt;</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;哈哈哈哈啊&lt;/</span><span style="color:#E06C75;">h1</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">body</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">html</span><span style="color:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li><strong>defer</strong> 和link是类似的机制了，不会阻碍GUI渲染，当GUI渲染完，才会把请求回来的JS去渲染</li><li><strong>async</strong> 请求JS资源是异步的「单独开辟HTTP去请求」，此时GUI继续渲染；但是一但当JS请求回来，会立即暂停GUI的处理，接下来去渲染JS</li><li>加入我们有5个JS的请求，如果不设置任何属性，肯定是按照顺序请求和渲染JS的「依赖关系是有效的」；但是如果设置async，谁先请求回来就先渲染谁，依赖关系是无效的；如果使用defer是可以建立依赖关系的(浏览器内部在GUI渲染完成后，等待所有设置defer的资源都请求回来，再按照编写的依赖顺序去加载渲染js)；</li><li>真实项目开发，我们一般把link放在页面的头部「是为了在没有渲染DOM的时候，就通知HTTP去请求CSS了，这样DOM渲染玩，CSS也差不多回来了，更有效的利用时间，提高页面的渲染速度」；我们一般把JS放在页面的底部，防止其阻碍GUI的渲染，如果不放在底部，我们最好设置上async/defer；</li></ol><h2 id="还需要了解-这部分必看" tabindex="-1">还需要了解 这部分必看 <a class="header-anchor" href="#还需要了解-这部分必看" aria-label="Permalink to &quot;还需要了解 这部分必看&quot;">​</a></h2><p><a href="https://www.cnblogs.com/caizhenbo/p/6679478.html" target="_blank" rel="noreferrer">DOMContentLoaded与load的区别</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://webspeedtools.com/async-vs-defer-vs-preload-vs-server-push/#Async" target="_blank" rel="noreferrer">Async vs Defer vs Preload vs Server Push</a></p><p><a href="https://zellwk.com/blog/javascript-async-and-defer/" target="_blank" rel="noreferrer">How and when to use Async and Defer attributes</a></p><p><a href="https://www.w3cplus.com/javascript/building-the-dom-faster-speculative-parsing-async-defer-and-preload.html" target="_blank" rel="noreferrer">更快地构建DOM: 使用预解析, async, defer 以及 preload</a></p>`,42),y=[i];function d(A,b,u,F,m,g){return n(),a("div",null,y)}const h=s(B,[["render",d]]);export{E as __pageData,h as default};
