import{_ as s,c as n,o as a,a8 as l,bU as p,bV as e}from"./chunks/framework.6k5lawSO.js";const f=JSON.parse('{"title":"","description":"做一个todo express 实现的简单案例，使用express脚手架搭建项目，完成一个项目简单流程开发","frontmatter":{"description":"做一个todo express 实现的简单案例，使用express脚手架搭建项目，完成一个项目简单流程开发","tags":["服务端","express"]},"headers":[],"relativePath":"B.NodeJS学习/13.express服务端框架/9.express增删改查上传案例.md","filePath":"B.NodeJS学习/13.express服务端框架/9.express增删改查上传案例.md","lastUpdated":1686742832000}'),o={name:"B.NodeJS学习/13.express服务端框架/9.express增删改查上传案例.md"},t=l(`<p>编写使用案例</p><h2 id="编写todo-案例" tabindex="-1">编写todo 案例 <a class="header-anchor" href="#编写todo-案例" aria-label="Permalink to &quot;编写todo 案例&quot;">​</a></h2><p>在开始案例之前需要了解一个库 lowdb ，在网站开发时候我们需要将数据进行一些存储可以选择使用关系型数据库（如 MySQL）或非关系型数据库（如 MongoDB）。但是，在一些小规模的项目中，使用一个完整的数据库可能过于笨重。</p><p>在这种情况下，可以使用 lowdb 是一个基于 JavaScript 的轻量级的本地 JSON 数据库，它的特点主要是方便易用和可嵌入性，让你可以更加自由的开发自己的业务。它使用了 lodash 的一些高级 API 来实现，所以它非常小而且快速；平均启动时间0.8 ms。它的 API 设计十分简单，最基本的增删查改等操作都是十分便捷，而且你可以把它应用到各种不同的项目中，比如构建网站、应用程序和桌面软件等。</p><p>此外，lowdb 的实现方式与传统数据库完全不同，它的数据存储方式为一个 JSON 文件，这样可以避免一些过多的配置和管理问题，不需要为了使用这个库而去管理一个成熟的数据库环境。使用 lowdb 可以让你更加专注于你的业务逻辑，而不是去研究复杂的数据库管理问题。总之，如果你想要一个非常简单易用的本地 JSON 数据库</p><p>为了使用cjs 版本 这里安装的是1.0版本</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> i</span><span style="color:#50A14F;"> lowdb@1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用案例，每次启动</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">//导入 lowdb</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> low</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;lowdb&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> FileSync</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;lowdb/adapters/FileSync&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> adapter</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> FileSync</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;db.json&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//获取 db 对象</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> db</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> low</span><span style="color:#383A42;">(adapter);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//初始化数据</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// db.defaults({ posts: [], user: {} }).write()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//写入数据</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// db.get(&#39;posts&#39;).push({id: 2, title: &#39;今天天气还不错~~&#39;}).write();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// db.get(&#39;posts&#39;).unshift({id: 3, title: &#39;今天天气还不错~~&#39;}).write();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//获取单条数据</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// let res = db.get(&#39;posts&#39;).find({id: 1}).value();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//获取数据</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(db.get(&#39;posts&#39;).value());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//删除数据</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// let res = db.get(&#39;posts&#39;).remove({id: 2}).write();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// console.log(res);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//更新数据</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// db.get(&#39;posts&#39;).find({id: 1}).assign({title: &#39;今天下雨啦!!!&#39;}).write()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="上传中间件" tabindex="-1">上传中间件 <a class="header-anchor" href="#上传中间件" aria-label="Permalink to &quot;上传中间件&quot;">​</a></h3><p>上传中间件选择是 <a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md" target="_blank" rel="noreferrer">multer</a> ,在上传时候一般使用格式是<code>multipart/form-data</code>,为了可以处理此时就需要 multer , 可以通过 <code>req.body</code> 获取普通表单字段，上传文件需要根据对应 <code>req.file</code> 进行获取</p><p>基本使用上有两种模式 暂时保存在内存中 和 直接保存在本地磁盘里，具体使用可以参考文档，但要注意的是获取的文件名称是中文可能会乱码，需要使用 <code>Buffer.from(file.originalname, &#39;latin1&#39;).toString(&#39;utf8&#39;)</code> 去转码</p><p>在 案例中使用的代码位置是 routes/todo.js 中，可以看到在导入 <code>require(&#39;multer&#39;)</code> 后去定义了使用了 <code>multer.diskStorage</code> 将上传文件保存在了磁盘中，提供了 <code>destination</code> 和 <code>filename</code> 通过提供的回调函数进行格式上的修改，默认上multer 特殊性质导致名字生成 不会为你添加任何扩展名，所以会在 <code>filename</code> 去定义我们实际保存的名字，multer 也提供了 <code>fileFilter</code> 这个字段可以帮助进行一些类型判断， 将错误抛出异常</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> express </span><span style="color:#0184BC;">=</span><span style="color:#4078F2;"> require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;express&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> router </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> express.</span><span style="color:#4078F2;">Router</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> path</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;path&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> shortid</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;shortid&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 确保你总是处理了用户的文件上传。 永远不要将 multer 作为全局中间件使用，</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 因为恶意用户可以上传文件到一个你没有预料到的路由，应该只在你需要处理上传文件的路由上使用。</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> multer</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;multer&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 保存在磁盘上</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> storage</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> multer.</span><span style="color:#4078F2;">diskStorage</span><span style="color:#383A42;">({</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// 设置保存位置路径</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// destination: &#39;/upload&#39;,</span></span>
<span class="line"><span style="color:#4078F2;">	destination</span><span style="color:#383A42;">(req, file, cb) {</span></span>
<span class="line"><span style="color:#4078F2;">		cb</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;./uploads&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// 设置项目名称</span></span>
<span class="line"><span style="color:#4078F2;">	filename</span><span style="color:#383A42;">(req, file, cb) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 由于multer 特殊性质导致名字生成 不会为你添加任何扩展名，会自动把文件的后缀名删除并添加一个随机的扩展名，这是为了防止文件名重复和安全问题</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 我要自动拼接文件名 时间戳 + 文件名</span></span>
<span class="line"><span style="color:#A626A4;">		const</span><span style="color:#986801;"> prefix</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Date.</span><span style="color:#4078F2;">now</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 参考 https://github.com/expressjs/multer/issues/1104 解决文件上传乱码问题</span></span>
<span class="line"><span style="color:#A626A4;">		const</span><span style="color:#986801;"> fileName</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> path.</span><span style="color:#4078F2;">basename</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">			Buffer.</span><span style="color:#4078F2;">from</span><span style="color:#383A42;">(file.</span><span style="color:#E45649;">originalname</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;latin1&#39;</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">toString</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;utf8&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">		)</span></span>
<span class="line"><span style="color:#4078F2;">		cb</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">\`</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">prefix</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">-</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">fileName</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// const extension = path.extname(originalname)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// const basename = path.basename(originalname, extension) // 不包括扩展名只包含文件名</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// const encodedName = encodeURIComponent(basename)</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// const newFilename = \`\${encodedName}-\${Date.now()}\${extension}\`</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#383A42;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> upload</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> multer</span><span style="color:#383A42;">({</span></span>
<span class="line"><span style="color:#383A42;">	storage,</span></span>
<span class="line"><span style="color:#E45649;">	limits</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">fileSize</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 2</span><span style="color:#0184BC;"> *</span><span style="color:#986801;"> 1024</span><span style="color:#0184BC;"> *</span><span style="color:#986801;"> 1024</span><span style="color:#383A42;"> },</span></span>
<span class="line"><span style="color:#4078F2;">	fileFilter</span><span style="color:#383A42;">(req, file, cb) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 过滤文件类型</span></span>
<span class="line"><span style="color:#A626A4;">		const</span><span style="color:#986801;"> fileType</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> file.</span><span style="color:#E45649;">mimetype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">toLowerCase</span><span style="color:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">		if</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#383A42;">			fileType </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;image/png&#39;</span><span style="color:#0184BC;"> ||</span></span>
<span class="line"><span style="color:#383A42;">			fileType </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;image/jpg&#39;</span><span style="color:#0184BC;"> ||</span></span>
<span class="line"><span style="color:#383A42;">			fileType </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;image/jpeg&#39;</span><span style="color:#0184BC;"> ||</span></span>
<span class="line"><span style="color:#383A42;">			fileType </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;image/webp&#39;</span></span>
<span class="line"><span style="color:#383A42;">		) {</span></span>
<span class="line"><span style="color:#4078F2;">			cb</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">, </span><span style="color:#986801;">true</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">		} </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">			cb</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">code</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;FILE_TYPE&#39;</span><span style="color:#383A42;"> }), </span><span style="color:#986801;">false</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#383A42;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 新增： 增加个人任务 在html页面时候 图片对应字段为file 作为前端传过来的key</span></span>
<span class="line"><span style="color:#383A42;">router.</span><span style="color:#4078F2;">post</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#50A14F;">	&#39;/add&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">	upload.</span><span style="color:#4078F2;">single</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;file&#39;</span><span style="color:#383A42;">),</span></span>
<span class="line"><span style="color:#383A42;">	(req, res) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// req.file 是 \`avatar\` 文件的信息</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// req.body 将具有文本域数据，如果存在的话</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 逻辑将数据保存到dblow 上， 可以参考https://github.com/hua1995116/webchat/blob/d3f37273bff43b297148846c5122384d618149fc/router/files.js#L41</span></span>
<span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(req.</span><span style="color:#E45649;">file</span><span style="color:#383A42;">, </span><span style="color:#986801;">111111111</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 只要是上传不符合要求的文件，cb(123, false) 此时就没有req.file</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// if (!req.file) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 	res.json({ msg: &#39;文件错误&#39; })</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 	return</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// }</span></span>
<span class="line"><span style="color:#A626A4;">		let</span><span style="color:#383A42;"> imgPath </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#A626A4;">		let</span><span style="color:#383A42;"> id </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> shortid.</span><span style="color:#4078F2;">generate</span><span style="color:#383A42;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">		if</span><span style="color:#383A42;"> (req.</span><span style="color:#E45649;">file</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 保存图片路径</span></span>
<span class="line"><span style="color:#383A42;">			imgPath </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> path.</span><span style="color:#4078F2;">normalize</span><span style="color:#383A42;">(req.</span><span style="color:#E45649;">file</span><span style="color:#383A42;">.</span><span style="color:#E45649;">path</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#383A42;">		req.</span><span style="color:#E45649;">db</span></span>
<span class="line"><span style="color:#383A42;">			.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;todos&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">			.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">({ id, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">req.</span><span style="color:#E45649;">body</span><span style="color:#383A42;">, imgPath })</span></span>
<span class="line"><span style="color:#383A42;">			.</span><span style="color:#4078F2;">write</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">		res.</span><span style="color:#4078F2;">json</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">msg</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;新增成功&#39;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">code</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 200</span><span style="color:#383A42;"> })</span></span>
<span class="line"><span style="color:#383A42;">	},</span></span>
<span class="line"><span style="color:#383A42;">	(err, req, res, next) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		// 为精确的错误处理，你可以使用 instance 来确定 MulterError 是不是你想要的错误类型。</span></span>
<span class="line"><span style="color:#A626A4;">		if</span><span style="color:#383A42;"> (err.</span><span style="color:#E45649;">code</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &#39;LIMIT_FILE_SIZE&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// limits 错误会进入  multer.MulterError 收集</span></span>
<span class="line"><span style="color:#383A42;">			res.</span><span style="color:#4078F2;">json</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">msg</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;文件过大&#39;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">code</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 500</span><span style="color:#383A42;"> })</span></span>
<span class="line"><span style="color:#383A42;">		} </span><span style="color:#A626A4;">else</span><span style="color:#A626A4;"> if</span><span style="color:#383A42;"> (err.</span><span style="color:#E45649;">code</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &#39;FILE_TYPE&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">			res.</span><span style="color:#4078F2;">json</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">msg</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;文件类型不符合要求&#39;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">code</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 500</span><span style="color:#383A42;"> })</span></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#4078F2;">		next</span><span style="color:#383A42;">(err)</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br></div></div><h2 id="项目地址" tabindex="-1">项目地址 <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址&quot;">​</a></h2><p><img src="`+p+'" alt=""></p><p><img src="'+e+'" alt=""></p>',17),r=[t];function c(i,y,A,b,m,u){return a(),n("div",null,r)}const F=s(o,[["render",c]]);export{f as __pageData,F as default};
