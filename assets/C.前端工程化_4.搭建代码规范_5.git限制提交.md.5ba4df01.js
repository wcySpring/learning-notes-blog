import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const m=JSON.parse('{"title":"","description":"vue 项目的代码规范","frontmatter":{"description":"vue 项目的代码规范"},"headers":[],"relativePath":"C.前端工程化/4.搭建代码规范/5.git限制提交.md","filePath":"C.前端工程化/4.搭建代码规范/5.git限制提交.md","lastUpdated":1695115873000}'),p={name:"C.前端工程化/4.搭建代码规范/5.git限制提交.md"},o=l(`<p>提交前当我们使用git 等这类工具的时候，在提交的时候做最后一道防护，防止团队成员提交的代码风格和团队不同</p><p>当我们使用版本控制系统（如Git）管理代码时，可以通过钩子（hooks）来在特定的时间点执行自定义的脚本或命令。<strong>在Git中，有多个钩子可供使用，其中包括以下四个常用的钩子</strong>，以下是对<a href="https://juejin.cn/post/7041768022284976165#heading-10" target="_blank" rel="noreferrer">Git钩子（hooks）</a>中的四个主要提交阶段的整理和进一步说明：</p><h2 id="pre-commit-提交前钩子" tabindex="-1">pre-commit（提交前钩子） <a class="header-anchor" href="#pre-commit-提交前钩子" aria-label="Permalink to &quot;pre-commit（提交前钩子）&quot;">​</a></h2><p><strong>pre-commit（提交前钩子）</strong>，在执行真正的提交操作之前运行的钩子当我们执行 git commit 命令提交代码时，Git会在实际进行提交操作之前触发 pre-commit 钩子</p><p>作用</p><ul><li>在实际提交操作之前运行。</li><li>用于执行代码检查工具（如静态代码分析、代码风格检查等）。</li><li>确保提交的代码符合一定的质量标准。</li></ul><p>示例用途</p><ul><li>检查代码是否符合项目的编码规范。</li><li>检测潜在的编程错误或安全漏洞。</li><li>如果检查未通过，可以返回非零值阻止提交。</li></ul><h2 id="prepare-commit-msg-准备提交信息钩子" tabindex="-1">prepare-commit-msg（准备提交信息钩子） <a class="header-anchor" href="#prepare-commit-msg-准备提交信息钩子" aria-label="Permalink to &quot;prepare-commit-msg（准备提交信息钩子）&quot;">​</a></h2><p><strong>prepare-commit-msg（准备提交信息钩子）</strong>，是 Git 的一个钩子（hook），它允许您在提交信息被最终保存之前对其进行操作或修改，当您执行 <code>git commit</code> 命令时，<code>prepare-commit-msg</code> 钩子会在编辑器打开提交信息之前被触发。</p><p>作用</p><ul><li>在Git生成默认提交信息后，启动编辑器之前运行。</li><li>对提交信息进行预处理。</li><li>加载辅助填写工具，如Commitizen。</li></ul><p>示例用途</p><ul><li>修改或添加到默认的提交信息。</li><li>加载工具来帮助编写符合规范的提交信息。</li><li>提高提交信息的一致性和可读性。</li></ul><h2 id="commit-msg-提交信息钩子" tabindex="-1">commit-msg（提交信息钩子） <a class="header-anchor" href="#commit-msg-提交信息钩子" aria-label="Permalink to &quot;commit-msg（提交信息钩子）&quot;">​</a></h2><p><strong>commit-msg（提交信息钩子）</strong> ，在完成提交信息的编辑后运行的钩子。它允许我们对提交信息进行进一步的检查或处理。常用的用途是使用提交信息规范工具（如commitlint）对提交信息进行验证，以确保其符合预定义的规范</p><p>作用</p><ul><li>在完成提交信息的编辑后运行。</li><li>对提交信息进行进一步的检查或处理。</li><li>使用工具（如commitlint）验证提交信息。</li></ul><p>示例用途</p><ul><li>确保提交信息符合预定义的规范。</li><li>提高提交信息的一致性。</li><li>帮助团队成员更好地理解提交的目的和内容。</li></ul><h2 id="post-commit-提交后钩子" tabindex="-1">post-commit（提交后钩子） <a class="header-anchor" href="#post-commit-提交后钩子" aria-label="Permalink to &quot;post-commit（提交后钩子）&quot;">​</a></h2><p><strong>post-commit（提交后钩子）</strong>,在提交操作完成后运行的钩子。这个阶段通常用于执行一些与提交相关的通知或后续操作。例如，我们可以在这个钩子中发送通知（如Slack消息）给团队成员，告知他们有新的提交。也可以在这个阶段触发自动化部署流程，将提交的代码部署到相应的环境中。</p><p>作用</p><ul><li>在提交操作完成后运行。</li><li>执行与提交相关的通知或后续操作。</li></ul><p>示例用途</p><ul><li>发送通知（如Slack消息）给团队成员。</li><li>触发自动化部署流程。</li><li>将提交的代码部署到相应的环境中。</li></ul><p>通过使用这些钩子，我们可以在不同的阶段对提交流程进行自定义操作，从而实现代码质量控制、规范化提交信息、自动化通知等功能，提高开发团队的协作效率和代码管理质量。</p><h2 id="如何利用-git-hooks-钩子" tabindex="-1">如何利用 git hooks 钩子 <a class="header-anchor" href="#如何利用-git-hooks-钩子" aria-label="Permalink to &quot;如何利用 git hooks 钩子&quot;">​</a></h2><p><strong>直接去改动git hook是不明智因为改动本地的钩子是无法同步到远程仓库的git 钩子上</strong></p><p>因此可以使用 Husky 是一个 Git hooks 工具，它允许你在项目中配置钩子脚本。Git 钩子是在特定的 Git 事件发生时触发的自定义脚本。这些事件可以是提交代码、推送到远程仓库、合并分支等。</p><p><strong>husky是一个Git hooks工具，能够在项目中配置hooks脚本；当我们执行git操作时，自动触发配置的脚本；并且在指定git hook 钩子去配置要执行的脚</strong></p><h2 id="使用-husky" tabindex="-1">使用 husky <a class="header-anchor" href="#使用-husky" aria-label="Permalink to &quot;使用 husky&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>在6.0版本之前安装 之后 只需要在package.json 中去配置对应git hook 生命周期触发的钩子即可</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">&quot;husky&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&quot;hooks&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;pre-commit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;npm run test&quot;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 在commit之前先执行npm run test命令</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;commit-msg&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;commitlint -e $HUSKY_GIT_PARAMS&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 校验commit时添加的备注信息是否符合我们要求的规范</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><strong>在 6.0 之后 已经不用在package.json 中去配置</strong></li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行以下命令来初始化 Husk 会帮我们创建 <code>.husky</code> <strong>文件并不会帮助创建git hook钩子配置文件,你需要手动添加和配置钩子</strong>。</p><p>当你想要完全自定义 Husky 的配置，并手动设置钩子时 可以采用这个执行脚本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时 Husky 会修改 Git 配置，将 Git 钩子的目录指向 <code>.husky</code>。这意味着当执行特定的 Git 操作（如 commit、push 等）时，Git 会查找 <code>.husky</code> 目录中的相应钩子脚本并执行它。</p><p>使用 <code>npx husky add</code> 命令来轻松地为特定的 Git 操作（如 pre-commit、pre-push 等）添加钩子脚本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.husky/pre-commit</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;npm test&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>在实际项目时候更推荐执行脚本</strong>，创建 <code>.husky</code> 目录，并在其中生成一个示例的 <code>pre-commit</code> 钩子。可能还会生成一些示例代码和依赖。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky-init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="解决多人开发的时候-husk-初始化" tabindex="-1">解决多人开发的时候 husk 初始化 <a class="header-anchor" href="#解决多人开发的时候-husk-初始化" aria-label="Permalink to &quot;解决多人开发的时候 husk 初始化&quot;">​</a></h3><p>要考虑的另一个问题是 如何保证多人维护的时候 其他人使用代码时候，能够 去主动触发 <code>npx husky install</code> 将 Git 钩子的目录指向 <code>.husky</code>。</p><p>这意味着当执行特定的 Git 操作（如 commit、push 等）时，Git 会查找 <code>.husky</code> 目录中的相应钩子脚本并执行它</p><p>可以使用 <code>package.json</code> 文件中<strong>设置一个名为 &quot;prepare&quot; 的脚本</strong>，该脚本会在项目并运行 <code>npm install</code> 时，&quot;prepare&quot; 脚本会自动执行。因此可以利用这个性质 确保了 Husky 钩子在项目依赖安装后正确安装 <code>husky install</code> 来替换<code>git hooks</code> 钩子的作用</p><p>执行<code>npm set-script prepare &quot;husky install</code>&quot; 只是 npm7.x 支持的命令，如果你是7.x 之前的版本你可以直接在<code>package.json</code>中添加prepare脚本</p><p>如果执行时候提示 <code>npm WARN set-script set-script is deprecated, use npm pkg set scripts.scriptname=&quot;cmd&quot; instead.</code> 你需要使用新的指令 <code>npm pkg set scripts.prepare=&quot;husky install&quot;</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>此时 当我们执行npm install安装完项目依赖后会执行husky install命令，该命令会创建 <strong>.husky/目录并指定该目录为git hooks所在的目录</strong>。</p><h2 id="配置钩子的脚本" tabindex="-1">配置钩子的脚本 <a class="header-anchor" href="#配置钩子的脚本" aria-label="Permalink to &quot;配置钩子的脚本&quot;">​</a></h2><p>上面使用 husky 库来接管了 git hooks ，接下来就要在 接管后映射的文件目录<code>.husky</code> 去编写各个环境脚本</p><h3 id="配置pre-commit-钩子-对代码格式化" tabindex="-1">配置pre-commit 钩子 对代码格式化 <a class="header-anchor" href="#配置pre-commit-钩子-对代码格式化" aria-label="Permalink to &quot;配置pre-commit 钩子 对代码格式化&quot;">​</a></h3><p>在这个钩子用于执行代码检查工具（如静态代码分析、代码风格检查等）。确保提交的代码符合一定的质量标准。最简单的方法只要在这个钩子触发的阶段，去触发我们在 <code>package.json</code> 中用来个格式化检查代码的配置 <code>scripts</code> 脚本，例如下面 <code>prettier</code> 的脚本</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service serve&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;build&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service build&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;lint&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service lint&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prettier&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;prettier --write .&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;commit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cz&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>但这里要注意一个优化，prettier 或者配置的类似的其他 脚本 往往他们都是对全局代码进行了一次格式化，这其实并是我们需要的</p><p><strong>我们只要对暂存的文件进行检查 格式化即可</strong> 这时候就需要 使用<code>lint-staged</code>是一个<strong>对git暂存区代码进行格式化的工具</strong></p><p>使用 <code>lint-staged</code>，你可以定义一系列要运行的任务和相关的文件匹配规则。当你执行 <code>git commit</code> 时，<code>lint-staged</code> <strong>会自动检查暂存区内的文件，并根据配置规则运行相应的任务。如果某些文件未通过任务的检查，<code>lint-staged</code> 会阻止提交，以便你有机会修复这些问题</strong></p><p>安装</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">lint-staged</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>在 <code>package.json</code> 的 <code>scripts</code> 脚本 配置能运行 <code>lint-staged</code>指令,或者执行 <code>npm pkg set scripts.lint-staged=&quot;lint-staged&quot;</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// change 1: 配置lint-staged指令</span></span>
<span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 新增这一行</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;lint-staged&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lint-staged&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#FFFFFF;">...</span></span>
<span class="line"><span style="color:#ABB2BF;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>因此在 pre-commit 钩子执行的脚本就要变成 <code>lint-staged</code>, <code>lint-staged</code> 中要执行脚本编写到 <code>package.json</code> 的 &quot;lint-staged&quot;</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// change 2: 配置lint-staged的具体任务</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;lint-staged&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;*.{js,jsx,ts,tsx}&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;eslint --fix&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;{!(package)*.json,*.code-snippets,.!(browserslist)*rc}&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;prettier --write--parser json&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;package.json&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;*.vue&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;eslint --fix&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;prettier --write&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;stylelint --fix&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;*.{scss,less,styl,html}&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;stylelint --fix&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;*.md&quot;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&quot;prettier --write&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    ]</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>添加一个 pre-commit 钩子来运行 lint-staged：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.husky/pre-commit</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;npx lint-staged&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>备注：关于 <code>lint-staged</code> 也可以做单独的文件配置，在package.json 中的脚本配置指向文件</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;lint:lint-staged&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;lint-staged -c ./.husky/lintstagedrc.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>lintstagedrc 文件内容</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;*.{js,jsx,ts,tsx}&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;eslint --fix&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;prettier --write&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;{!(package)*.json,*.code-snippets,.!(browserslist)*rc}&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;prettier --write--parser json&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;package.json&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;prettier --write&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;*.vue&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;eslint --fix&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;prettier --write&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;stylelint --fix&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;*.{scss,less,styl,html}&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;stylelint --fix&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;prettier --write&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;*.md&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;prettier --write&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="commit-msg-提交信息钩子-1" tabindex="-1">commit-msg（提交信息钩子） <a class="header-anchor" href="#commit-msg-提交信息钩子-1" aria-label="Permalink to &quot;commit-msg（提交信息钩子）&quot;">​</a></h3><p>Commit message 是开发者在 Git 提交代码时对提交进行描述的信息，它通常包括一个简短的标题和一个可选的详细描述。<strong>使用一致和规范的 Commit message 格式可以提高代码库的可读性、可维护性和协作效率</strong>。</p><p>安装<code>@commitlint/config-conventional</code> 和 <code>@commitlint/cli</code> 是两个不同的包，各自承担着不同的角色，通常需要配合使用，以便实现完整的提交消息规范和验证流程。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@commitlint/config-conventional</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@commitlint/cli</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li><p><strong><code>@commitlint/config-conventional</code></strong>:</p><ul><li><strong>这个包主要用于定义和配置 Conventional Commits 规范，规定了提交消息的格式和规则，但它本身不会执行验证</strong>。</li><li><code>@commitlint/config-conventional</code> 仅提供规范的配置信息，以告诉验证工具如何验证提交消息。</li></ul></li><li><p><strong><code>@commitlint/cli</code></strong>:</p><ul><li><strong>这个包是一个命令行工具，用于在 Git 提交时验证提交消息是否符合规范</strong>。</li><li><code>@commitlint/cli</code> 实际执行验证操作，检查提交消息是否符合 <code>@commitlint/config-conventional</code> 中定义的规范。</li><li>它还可以与 Git 钩子一起使用，以便在提交代码之前自动运行验证，以确保每个提交都遵循规范。</li></ul></li></ol><p>综合来说，<strong><code>@commitlint/config-conventional</code> 是规范的定义者，而 <code>@commitlint/cli</code> 是规范的执行者</strong>。</p><p>它们一起协作，<strong>使得团队能够实施和强制提交消息的规范，从而确保提交历史的一致性和可读性</strong>。使用 <code>@commitlint/cli</code> 可以在提交前自动检查提交消息，防止不符合规范的提交进入代码库，有助于维护代码质量和协作效率。</p><p><strong>在根目录创建<code>commitlint.config.js</code>文件，配置commitlint ，我们告诉 commitlint 在验证提交信息时应该使用<code> @commitlint/config-conventional</code> 规范配置中定义的规则</strong>。</p><p>通过这样的配置，当你使用 commitlint 进行提交信息验证时，它会根据 <code>@commitlint/config-conventional</code> 规范配置对提交信息进行检查，确保它们符合约定的格式和规范。<strong>如果提交信息不符合规范，commitlint 将会给出相应的错误或警告信息，以便你进行修正</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">module</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">exports</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">extends</span><span style="color:#ABB2BF;">: [</span><span style="color:#98C379;">&#39;@commitlint/config-conventional&#39;</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">rules</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;type-enum&#39;</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#98C379;">&#39;always&#39;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">      [</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;新功能&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 添加新功能</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;修复&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 修复 bug</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;文档&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 文档变更</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;样式&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 样式变更</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;重构&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 代码重构</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;性能&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 性能优化</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;测试&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 添加或修改测试代码</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;构建&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 构建过程或工具变动</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;配置&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 配置文件变动</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;版本&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 版本号变更</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;回滚&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#7F848E;font-style:italic;">// 代码回滚</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#98C379;">&#39;其他&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;">// 其他变更</span></span>
<span class="line"><span style="color:#ABB2BF;">      ]</span></span>
<span class="line"><span style="color:#ABB2BF;">    ],</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;type-case&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 类型大小写不作要求</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;type-empty&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 类型不能为空</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;subject-max-length&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;always&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 主题最大长度为 100</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;subject-case&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 主题大小写不作要求</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;subject-empty&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;never&#39;</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 主题不能为空</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;body-max-line-length&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;always&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">], </span><span style="color:#7F848E;font-style:italic;">// 详细描述每行最大长度为 100</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#98C379;">&#39;footer-max-line-length&#39;</span><span style="color:#ABB2BF;">: [</span><span style="color:#D19A66;">2</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&#39;always&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">] </span><span style="color:#7F848E;font-style:italic;">// 关联问题每行最大长度为 100</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>使用husky生成commit-msg文件，验证提交信息：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">husky</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">.husky/commit-msg</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;npx --no-install commitlint --edit </span><span style="color:#E06C75;font-style:italic;">$1</span><span style="color:#98C379;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>上面的这种标准化的提交形式格式如果每次在提交时候手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</strong></p><ul><li>Commitizen 基于Node.js的 git commit 命令行工具，辅助生成标准化规范化的 commit message；</li></ul><p>1.安装Commitizen</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">commitizen</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>2.安装<code>cz-conventional-changelog</code>，并且初始化<strong>cz-conventional-changelog：cz-conventional-changelog 是一个用于生成符合规范的提交信息的 <code>Commitizen</code> 插件</strong>。它提供了一种交互式的方式来帮助开发者按照规范格式化和填写提交信息，并生成符合规范的提交记录，<strong>以便于后续使用工具生成变更日志</strong>。</p><p><code>cz-conventional-changelog</code> 基于 <code>commitlint</code> 的规范配置，使用了 <code>@commitlint/config-conventional</code> 规范作为提交信息的模板。它要求开发者按照特定的格式填写提交信息，包括类型、范围、主题等，并可以选择关联的问题或任务。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">commitizen</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">init</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">cz-conventional-changelog</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-dev</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--save-exact</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会帮助我们安装cz-conventional-changelog，并且在package.json中进行配置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;config&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;commitizen&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E06C75;">&quot;path&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这个时候我们提交代码需要使用 <code>npx cz</code> 或者 运行 git cz 命令来代替 git commit，按照交互式提示填写提交信息</p><ul><li>第一步是选择type，本次更新的类型</li></ul><table><thead><tr><th>Type</th><th>作用</th></tr></thead><tbody><tr><td>feat</td><td>新增特性 (feature)</td></tr><tr><td>fix</td><td>修复 Bug(bug fix)</td></tr><tr><td>docs</td><td>修改文档 (documentation)</td></tr><tr><td>style</td><td>代码格式修改(white-space, formatting, missing semi colons, etc)</td></tr><tr><td>refactor</td><td>代码重构(refactor)</td></tr><tr><td>perf</td><td>改善性能(A code change that improves performance)</td></tr><tr><td>test</td><td>测试(when adding missing tests)</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具(比如更改测试环境)</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><ul><li><p>第二步选择本次修改的范围（作用域）</p></li><li><p>第三步选择提交的信息</p></li><li><p>第四步提交详细的描述信息</p></li><li><p>第五步是否是一次重大的更改</p></li><li><p>第六步是否影响某个open issue</p></li></ul><p>我们也可以在scripts中构建一个命令来执行 cz：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E06C75;">&quot;commit&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;cz&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><p>注意 方案中的 <code>cz-conventional-changelog</code> 其实已经不推荐了，<a href="https://juejin.cn/post/7131391033224462344?searchId=2023091915283033F118F4C8ED4AA59C3D" target="_blank" rel="noreferrer">可以参考</a></p><p>可以使用 可以使用 <a href="https://cz-git.qbb.sh/zh/cli/" target="_blank" rel="noreferrer">cz-git-cli</a> 注意 cz-git-cli 和 cz-git 不一样的 cz-git-cli 来替代 <code>commitizen</code>，而cz-git 事用来替代 <code>cz-conventional-changelog</code></p><hr><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://juejin.cn/post/7041768022284976165#heading-7" target="_blank" rel="noreferrer">用Eslint+Prettier+husky+commitlint+lint-staged+commitizen快速搭建标准化编程规范项目</a></p>`,106),e=[o];function t(c,r,i,B,y,d){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{m as __pageData,b as default};
