import{_ as s,c as n,o as a,a8 as l,cr as e,cs as p}from"./chunks/framework.6k5lawSO.js";const g=JSON.parse('{"title":"配置文件的字段说明","description":"检测并报告代码中的潜在问题、错误","frontmatter":{"description":"检测并报告代码中的潜在问题、错误"},"headers":[],"relativePath":"C.前端工程化/4.搭建代码规范/3.规范化标准Eslint/1.导读.md","filePath":"C.前端工程化/4.搭建代码规范/3.规范化标准Eslint/1.导读.md","lastUpdated":1692232657000}'),o={name:"C.前端工程化/4.搭建代码规范/3.规范化标准Eslint/1.导读.md"},r=l(`<p>&#39;软件开发需要多人协同&#39;、&#39;不同开发者具有不同的编码习惯和喜好&#39;、&#39;不同的喜好会增加项目的维护成本&#39;、&#39;每个项目或者团队需要明确统一的标准&#39;</p><p>因此要形成规范尤其是前端，JS 的弱类型和动态类型,JS 的变量在声明时无需指定其类型。并且在其声明之后，可以为其随便赋值不同的类型。JS 由于不需要关注变量的类型，可以使代码更加简洁，也能使开发者集中更多的精力在处理业务逻辑之上。但由于其无法保证变量类型，从而在程序运行期可能发生跟类型相关的错误。 比如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> s </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 1</span></span>
<span class="line"><span style="color:#4078F2;">s</span><span style="color:#383A42;">() </span><span style="color:#A0A1A7;font-style:italic;">//Uncaught TypeError: s is not a function</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>而这样的错误对于 JAVA 在编译期间就会检查出来。为了可以在编写中发现问题，前端出现了很多种尝试类似&#39;TypeScript、CoffeeScript 或 Elm&#39; 辅助工具出现了&#39;Lint&#39;&#39;Lint&#39;工具最早是使用于 UNIX 系统中 C 语言的程式码静态分析工具，主要是用来标记语法结构上有可疑的、濳在的问题语法或指令,在前端类似的这种类似工具有&#39;JSLint 与 JSHint&#39;,随着时代推移&#39;ESLint&#39;由 Nicholas C. Zakas 创造，正如是为 ES 新标准语法所设计,相比其他 js 检查工具来说&#39;ESLint&#39;的功能具有</p><ul><li>有更多规则选项可以依需求或喜好设定</li><li>函式库或框架的开发者可以依需求再开发扩充</li><li>支持更高的 es 语法和实验特性和 JSX 语法</li><li>提供错误警告</li></ul><p>正是因为 ESlint （使用 Node.js 编写） 需要将源码转为 AST 的特点并且还可以扩展规则，默认的解析器也能替换，这种自由度高可插拔的形式，最后&#39;ESLint&#39; 成为现阶段&#39;js&#39; 代码质量检查的工具</p><h2 id="帮助解决问题" tabindex="-1">帮助解决问题 <a class="header-anchor" href="#帮助解决问题" aria-label="Permalink to &quot;帮助解决问题&quot;">​</a></h2><ul><li>&#39;语言语法检查&#39;：比如检查出字符串引号或者函数调用括号没有匹配等问题。</li><li>&#39;编码错误检查&#39;：比如检查出开发者在使用一个不存在的变量或者变量定义了却没有使用等问题。</li><li>&#39;代码风格检查&#39;：比如检查出开发者没有使用分号（与所选风格有关）等问题。</li></ul><p><strong>注意他不会检查你 js api 调用的是否正确，明确他能做的</strong></p><h2 id="安装使用" tabindex="-1">安装使用 <a class="header-anchor" href="#安装使用" aria-label="Permalink to &quot;安装使用&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> eslint</span><span style="color:#986801;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过 npx 可以产看&#39;eslint&#39; 版本</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npx</span><span style="color:#50A14F;"> eslint</span><span style="color:#986801;"> --version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装后开始使用：</p><p>初始化生成配置文件 <code>npx eslint --init</code> 初始化的时候会询问几个问题：</p><p>问题 1 ： 如何使用 ESLint ？ 只检查语法错误 | 检测语法错误以及问题代码 | 检测语法错误以及问题代码以及代码风格</p><p>问题 2： 你的项目模块化选择类型？ JS modules(import/export) | CommonJS(require/exports) | None of these</p><p>问题 3：项目使用框架 问题 4： 是否使用 TS 问题 5： 运行环境 Browser | Node</p><p>问题 6: 定义代码风格 主流代码风格 | 个人自定义 | 根据代码判断</p><p>问题 7：配置文件格式 JS | YARM | JSON 问题 8： 安装额外的插件 Y</p><p>安装完成后会出现<code>.eslintrc.js</code> 文件,除了 <code>.eslintrc.js</code> 配置外还有其他配置文件的声明写法</p><ul><li>&#39;JavaScript&#39; - 使用 .eslintrc.js 然后输出一个配置对象。</li><li>&#39;YAML&#39; - 使用 .eslintrc.yaml 或 .eslintrc.yml 去定义配置的结构。</li><li>&#39;JSON&#39; - 使用 .eslintrc.json 去定义配置的结构，ESLint 的 JSON 文件允许 JavaScript 风格的注释。</li><li>&#39;package.json&#39; - 在 package.json 里创建一个 eslintConfig 属性，在那里定义你的配置。</li></ul><p><strong>优先级 &#39;.eslintrc.js&#39; &gt; &#39;.eslintrc.yaml&#39; &gt;&#39;.eslintrc.yml&#39; &gt;&#39;.eslintrc.json&#39; &gt;&#39;.eslintrc&#39;&gt; &#39;package.json&#39;</strong></p><p>也可以使用 eslintignore 忽略指定文件，对于一些公共的 js，或者测试脚本，不需要进行检测，我们可以通过在项目根目录创建一个<code>.eslintignore</code>告诉 ESLint 去忽略特定的目录或者文件</p><p>根据上面的询问选好配置后:</p><ul><li>&#39;npx eslint [文件路径]&#39; -- 检查对应文件中编码格式。路径可以使用路径通配符</li><li>&#39;npx eslint [文件路径] --fix&#39; -- 自动修正代码风格</li></ul><h3 id="eslint-检查指令-案例" tabindex="-1">eslint 检查指令 案例 <a class="header-anchor" href="#eslint-检查指令-案例" aria-label="Permalink to &quot;eslint 检查指令 案例&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># 检测单个文件</span></span>
<span class="line"><span style="color:#4078F2;">npx</span><span style="color:#50A14F;"> eslint</span><span style="color:#50A14F;"> file1.js</span><span style="color:#50A14F;"> file2.js</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 检测src和scripts目录</span></span>
<span class="line"><span style="color:#4078F2;">npx</span><span style="color:#50A14F;"> eslint</span><span style="color:#50A14F;"> src</span><span style="color:#50A14F;"> scripts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;1&#39;</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> zz</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;1000&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>检查对应文件中编码格式 给出了错误原因 <img src="`+e+`" alt=""></p><h3 id="检查并修复-fix" tabindex="-1">检查并修复 fix <a class="header-anchor" href="#检查并修复-fix" aria-label="Permalink to &quot;检查并修复 fix&quot;">​</a></h3><p><code>--fix后缀</code>，是 ESLint <strong>提供自动修复基础错误的功能，它只能修复一些基础的不影响代码逻辑的错误，比如代码末尾加上分号、表达式的空格等等</strong>。例如 <code>npx eslint src scripts --fix</code> / <code>npx eslint file1.js file2.js --fix</code></p><p>案例</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">    var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;1&#39;</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> zz</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;1000&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修复后</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;1&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> zz</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;1000&#39;</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如图修复了格式问题 但并没有修复未引用问题</p><p><img src="`+p+`" alt=""></p><h3 id="指定文件ext" tabindex="-1">指定文件ext <a class="header-anchor" href="#指定文件ext" aria-label="Permalink to &quot;指定文件ext&quot;">​</a></h3><p>eslint 修复和检查都可以指定具体文件或者具体文件夹，<strong>例如可以指定具体文件&#39;aa.vue&#39;,&#39;aa.js&#39;,但是指定文件时候例如&#39;/src&#39; 这个文件下会有各种文件类型，但eslint 默认只会检测文件夹中的&#39;js&#39; 文件，此时需要使用&#39;ext&#39;</strong></p><p>注意只有在指定是文件夹时候使用&#39;ext&#39; 才会生效，举个例子<code>npx eslint --ext .js,.jsx,.vue src</code></p><h2 id="eslintignore-忽略指定文件" tabindex="-1">eslintignore 忽略指定文件 <a class="header-anchor" href="#eslintignore-忽略指定文件" aria-label="Permalink to &quot;eslintignore 忽略指定文件&quot;">​</a></h2><p>对于一些公共的js，或者测试脚本，不需要进行检测，我们可以通过在项目根目录创建一个<code>.eslintignore</code>告诉ESLint去忽略特定的目录或者文件</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#50A14F;">node_modules/</span></span>
<span class="line"><span style="color:#A626A4;">*</span><span style="color:#E45649;">*</span><span style="color:white;">/*.spec.*</span></span>
<span class="line"><span style="color:#A626A4;">*</span><span style="color:#E45649;">*</span><span style="color:white;">/style/</span></span>
<span class="line"><span style="color:#A626A4;">*</span><span style="color:#E45649;">.html</span></span>
<span class="line"><span style="color:#50A14F;">/components/test/*</span></span>
<span class="line"><span style="color:#50A14F;">es/</span></span>
<span class="line"><span style="color:#50A14F;">lib/</span></span>
<span class="line"><span style="color:#50A14F;">_site/</span></span>
<span class="line"><span style="color:#50A14F;">dist/</span></span>
<span class="line"><span style="color:#50A14F;">components/version/version.tsx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h1 id="配置文件的字段说明" tabindex="-1">配置文件的字段说明 <a class="header-anchor" href="#配置文件的字段说明" aria-label="Permalink to &quot;配置文件的字段说明&quot;">​</a></h1><ul><li><p><code>parser</code>: 解析器是ESLint用于将代码转换为抽象语法树（AST）的组件。ESLint默认使用的解析器是Espree，它能够将编写的代码解析成抽象语法树的形式，以便ESLint可以根据规则对代码进行验证和分析。</p></li><li><p><code>extends</code>: <code>extends</code>字段用于递归地扩展ESLint的配置。通过指定一个配置文件或一个可共享的配置名称，可以继承和重用其他配置。这样可以方便地在项目中共享和继承一组预定义的规则和配置，提高代码的一致性和可维护性。</p></li><li><p><code>rules</code>: <code>rules</code>字段用于定义ESLint的规则，它允许您自定义代码的静态分析规则。您可以为不同的规则指定不同的错误级别（如警告或错误）或禁用特定的规则。通过配置<code>rules</code>字段，您可以覆盖继承的配置或添加自定义规则，以满足项目的特定需求。</p></li><li><p><code>parserOptions</code>: <code>parserOptions</code>字段用于配置解析器的选项。您可以在这里指定解析器的版本、支持的ECMAScript版本、启用特定的语言特性（如模块化）等。解析器选项的配置可以影响ESLint在解析和分析代码时的行为。</p></li><li><p><code>plugins</code>: <code>plugins</code>字段用于为ESLint添加额外的检查规则。ESLint的核心规则集并不包含所有可能的规则，但通过使用插件，您可以扩展ESLint并使用来自插件的规则。插件可以提供特定领域的规则（如React或Vue.js），或者是一些通用的规则扩展。</p></li><li><p><code>env</code>: <code>env</code>字段用于定义一组预定义的全局变量，表示代码运行的环境。例如，如果您的代码将在浏览器环境中执行，您可以将<code>env</code>字段设置为<code>{ &quot;browser&quot;: true }</code>，以便ESLint知道在分析代码时应该考虑浏览器全局变量。通过配置<code>env</code>字段，可以避免对未声明的变量和全局对象的使用进行警告或错误的检查。</p></li></ul><h2 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-label="Permalink to &quot;root&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  root</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // others</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>root：是否以当前目录为根目录。 告诉 ESLint 不要再往上级目录查找，利用此属性配置，项目级和目录级的配置都可以不受上级目录以及祖先目录的配置影响，通常项目根目录应该设置为 true 。</p><p>举个例子，比如这个项目 vue-project1，默认情况下 root 为 false，而且该项目上层目录下还有 eslint 配置文件的话，这个更上一层的配置就会对你的项目文件的代码产生作用，直到到达根目录才会停止。这是我们不愿意看到的，所以就需要我们在当前项目目录下设置 root: true，告诉 ESLint 这里就是根目录了，别再往上查找其他的配置文件了！</p><h2 id="parser-解析器" tabindex="-1">parser -- 解析器 <a class="header-anchor" href="#parser-解析器" aria-label="Permalink to &quot;parser -- 解析器&quot;">​</a></h2><p>想成为eslint 的parser解析器需要满足两点</p><ul><li>它必须是一个 Node 模块，应该使用 npm 单独安装解析器包.</li><li>它必须符合 <a href="https://eslint.bootcss.com/docs/developer-guide/working-with-plugins#working-with-custom-parsers" target="_blank" rel="noreferrer">parser interface</a></li></ul><p>其他解析器：</p><ul><li><code>esprima</code>: ESLint最初使用的解析器，但后来不再维护。</li><li><code>espree</code>: ESLint基于esprima v1.2.2开发的解析器，成为ESLint的默认解析器。</li><li><code>babel-eslint</code>: 是对Babel解析器的封装，使其与ESLint兼容。</li><li><code>@babel/eslint-parser</code>: 从v11.xx版本开始，<code>babel-eslint</code>不再维护和更新，取而代之的是<code>@babel/eslint-parser</code>。</li><li><code>@typescript-eslint/parser</code>: 将TypeScript代码转换为与estree兼容的形式，以便在ESLint中使用。</li></ul><p>解析器的选择：</p><ul><li>如果使用TypeScript，应选择<code>@typescript-eslint/parser</code>作为解析器。</li><li>如果使用ES中的实验性属性，可以使用<code>babel</code>提供的解析器。</li><li>若要支持最新的ES标准语法，可以使用ESLint默认的解析器。</li></ul><p>解析器配置示例：</p><ul><li><p>配置示例（包含TypeScript解析器）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  parser</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;@typescript-eslint/parser&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 其他配置项...</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>配置示例（使用babel解析器）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  parser</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;babel-eslint&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 其他配置项...</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>配置示例（不指定解析器，默认使用espree）：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 其他配置项...</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>针对Vue.js和TypeScript的配置：</p><ul><li>在Vue.js项目中结合TypeScript时，可以使用<code>@vue/eslint-config-typescript</code>扩展配置，它已经包含了TypeScript解析器和相关规则。</li><li>可以参考以下示例配置：<div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  root</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">  &#39;extends&#39;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;plugin:vue/vue3-essential&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;eslint:recommended&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;@vue/eslint-config-typescript&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;@vue/eslint-config-prettier/skip-formatting&#39;</span></span>
<span class="line"><span style="color:#383A42;">  ],</span></span>
<span class="line"><span style="color:#E45649;">  parserOptions</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    ecmaVersion</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;latest&#39;</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 其他配置项...</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><p><strong>根据具体需求和项目配置，选择合适的解析器和配置，以正确解析和检查代码。</strong> <a href="https://tjaddison.com/blog/2021/03/updating-babel-eslint-to-babeleslint-parser-for-react-apps/" target="_blank" rel="noreferrer">你使用@babel/eslint-parser 遇到了麻烦参考 Updating babel-eslint to @babel/eslint-parser for React apps</a></p><h2 id="parseroptions-解析器选项" tabindex="-1">parserOptions -- 解析器选项 <a class="header-anchor" href="#parseroptions-解析器选项" aria-label="Permalink to &quot;parserOptions -- 解析器选项&quot;">​</a></h2><p>解析器选项用于配置解析器的行为，以便正确解析和分析代码。解析器选项的配置可以影响ESLint在解析和分析代码时的行为。</p><p>可以使用解析器选项覆盖该设置以启用对其他 ECMAScript 版本以及 JSX 的支持。简单理解配合你的解析器，之前说过默认的解析器是&#39;espree&#39;去gitub 搜索你可以发现当传入不同参数的时候配置器将会有不同的结果返回。</p><p>如果你正在尝试新的一些&#39;ES&#39;语法中的实验属性使用&#39;babel&#39; 提供的解析，当然如果你仅仅是想支持最新的最终 ES 标准可以使用eslint 默认以目前写文章的节点装饰器为例属于一个实验属性，在使用默认的eslint的解析器 是不行的，你需要使用&#39;babel&#39;</p><p>需要安装 解释一下&#39;decorators&#39; 装饰器目前在第二阶段因此需要下载&#39;babel&#39; 插件,关于配置</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> @babel/core</span><span style="color:#50A14F;"> @babel/eslint-parser</span><span style="color:#50A14F;"> @babel/plugin-proposal-decorators</span><span style="color:#986801;">  --save-dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">        module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;parser&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;">&quot;@babel/eslint-parser&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;env&quot;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">            &quot;browser&quot;</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">            &quot;es2021&quot;</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">            &quot;node&quot;</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span></span>
<span class="line"><span style="color:#383A42;">        },</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;extends&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;eslint:recommended&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">        // 相当于配置@babel/eslint-parser 解析器的配置</span></span>
<span class="line"><span style="color:#E45649;">        parserOptions</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 如果你 没有写 类似.babelrc 将需要requireConfigFile设置fasle</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 表示不使用配置文件</span></span>
<span class="line"><span style="color:#E45649;">            requireConfigFile</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 因为没有配置类似.babelrc 所以需要配置babelOptions声明使用的插件</span></span>
<span class="line"><span style="color:#E45649;">            babelOptions</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">                plugins</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [[</span><span style="color:#50A14F;">&quot;@babel/plugin-proposal-decorators&quot;</span><span style="color:#383A42;">,{</span><span style="color:#50A14F;">&quot;legacy&quot;</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">}]],</span></span>
<span class="line"><span style="color:#383A42;">            }</span></span>
<span class="line"><span style="color:#383A42;">        },</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;rules&quot;</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这个案例中如果你配置了类似&#39;.babelrc&#39; 文件那么你就可以不用配置&#39;parserOptions&#39; 这个参数</p><h2 id="plugins-插件" tabindex="-1">plugins -- 插件 <a class="header-anchor" href="#plugins-插件" aria-label="Permalink to &quot;plugins -- 插件&quot;">​</a></h2><p>plugin插件主要是为eslint新增一些检查规则,ESLint 虽然可以定义很多的 rules，只是检查 JS 语法。如果需要检查 Vue 中的 template 或者 React 中的 jsx，就束手无策了。引入插件的目的就是为了增强 ESLint 的检查能力和范围简单的说像vue react 这类新的框架会有自己的规则，这类规则需要去安装额外的插件</p><p>在使用插件的用法上 插件名称可以省略 &#39;eslint-plugin- 前缀&#39;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;plugins&quot;</span><span style="color:#383A42;">: [</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;plugin1&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// eslint-plugin-plugin1的简写</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;eslint-plugin-plugin2&quot;</span></span>
<span class="line"><span style="color:#383A42;">    ]</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果仅配置<code>&quot;plugins&quot;: [&quot;vue&quot;]</code>，vue文件中template内容还是会解析失败。这是因为不管是默认的espree还是babel-eslint解析器都无法解析.vue中template的内容；<code>eslint-plugin-vue</code>插件依赖<code>vue-eslint-parser</code>解析器，而<code>vue-eslint-parser</code>解析器只会解析template内容，不会检测<code>script</code>中的JS内容，因此我们还需要指定一下解析器：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;extends&quot;</span><span style="color:#383A42;">: [</span><span style="color:#50A14F;">&quot;eslint:recommended&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;plugins&quot;</span><span style="color:#383A42;">: [</span><span style="color:#50A14F;">&quot;vue&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;parser&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;vue-eslint-parser&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;parserOptions&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;parser&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;babel-eslint&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;ecmaVersion&quot;</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 12</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;sourceType&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;module&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上面<code>parserOptions.parser</code>看的有点迷糊，这是由于外层的解析器只能有一个，我们已经用了<code>vue-eslint-parser</code>就不能再写其他的；因此<code>vue-eslint-parser</code>的做法是在解析器选项中再传入一个解析器选项用来处理<code>script</code>中的JS内，相当于此时有两个解析器在工作</p><h2 id="rules-规则" tabindex="-1">rules -- 规则 <a class="header-anchor" href="#rules-规则" aria-label="Permalink to &quot;rules -- 规则&quot;">​</a></h2><p>规则的校验说明，有 3 个报错等级</p><ul><li>&#39;off 或 0&#39;：关闭对该规则的校验；</li><li>&#39;warn 或 1&#39;：启用规则，不满足时抛出警告，且不会退出编译进程；</li><li>&#39;error 或 2&#39;：启用规则，不满足时抛出错误，且会退出编译进程；</li><li>通常规则只需要配置开启还是关闭即可；但是也有些规则可以传入属性，比如：</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:white;">		rules</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:white;">				&#39;quotes&#39;</span><span style="color:#383A42;">: [</span><span style="color:white;">&#39;error&#39;</span><span style="color:#383A42;">, </span><span style="color:white;">&#39;single&#39;</span><span style="color:#383A42;">],  </span><span style="color:#A0A1A7;font-style:italic;">// 如果不是单引号，则报错</span></span>
<span class="line"><span style="color:white;">				&#39;one-var&#39;</span><span style="color:#383A42;">: [</span><span style="color:white;">&#39;error&#39;</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:white;">						&#39;var&#39;</span><span style="color:#383A42;">: </span><span style="color:white;">&#39;always&#39;</span><span style="color:#383A42;">,  </span><span style="color:#A0A1A7;font-style:italic;">// 每个函数作用域中，只允许 1 个 var 声明</span></span>
<span class="line"><span style="color:white;">						&#39;let&#39;</span><span style="color:#383A42;">: </span><span style="color:white;">&#39;never&#39;</span><span style="color:#383A42;">,   </span><span style="color:#A0A1A7;font-style:italic;">// 每个块作用域中，允许多个 let 声明</span></span>
<span class="line"><span style="color:white;">						&#39;const&#39;</span><span style="color:#383A42;">: </span><span style="color:white;">&#39;never&#39;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 每个块作用域中，允许多个 const 声明</span></span>
<span class="line"><span style="color:#383A42;">				}]</span></span>
<span class="line"><span style="color:#383A42;">		}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>通过 rules 单独配置的规则优先级比 extends 高</strong>,关于规则像在&#39;extends &#39; 中介绍的根据开头找到他的组织去看他的规则都有哪些可以自己配置</p><p>也可以在文件中指定规则，主要注释要使用 /**/ 形式，并且 eslint + 规则 + 等级，下面例子就是&#39;no-var&#39; 是不准使用var 的规则，error 就是使用了要报错的等级</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">/* eslint no-var: error */</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;1&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>更多规则：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">/* eslint-disable */</span><span style="color:#0184BC;"> --</span><span style="color:#50A14F;"> &#39;该注释放在文件顶部，eslint不会检查整个文件&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/* eslint-enable */</span><span style="color:#0184BC;"> --</span><span style="color:#50A14F;"> &#39;重新启用eslint检查&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/* eslint-disable eqeqeq */</span><span style="color:#50A14F;">&#39;只禁止某一个或多个规则&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/* eslint-disable-next-line */</span><span style="color:#50A14F;">&#39;下一行禁止eslint检查&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// eslint-disable-line  &#39;当前行禁止eslint检查&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="extends-继承" tabindex="-1">extends -- 继承 <a class="header-anchor" href="#extends-继承" aria-label="Permalink to &quot;extends -- 继承&quot;">​</a></h2><p>在配置 ESLint 规则时，从零开始配置是一件麻烦的事情，但是可以通过引用其他已经配置好的完整规则文件来简化配置过程。以下是一些常用的规则文件选项：</p><ul><li><p><code>&quot;eslint:recommended&quot;</code>：启用 ESLint 推荐的规则，具体开启的规则可以在<a href="https://eslint.bootcss.com/docs/rules/" target="_blank" rel="noreferrer">此处</a>查看。</p></li><li><p><code>&quot;eslint:all&quot;</code>：开启 ESLint 中所有核心规则。</p></li></ul><p>另外，还可以在初始化 ESLint 时提供以下三种选择：</p><ul><li><p>&#39;Google标准&#39;：安装 &#39;npm install eslint-config-google -g&#39;。</p></li><li><p>&#39;Airbnb标准&#39;：安装依赖 &#39;eslint-plugin-import, eslint-plugin-react, and eslint-plugin-jsx-a11y&#39; 等插件。如果想查看具体的依赖项，可以执行指令 &#39;npm info &quot;eslint-config-airbnb@latest&quot; peerDependencies&#39;。</p></li><li><p>&#39;Standard标准&#39;：一些前端工程师自定义的标准，安装执行 &#39;npm install eslint-config-standard eslint-plugin-standard eslint-plugin-promise -g&#39;。</p></li></ul><p><strong><code>extends</code> 属性的值可以由以下几部分组成：</strong></p><ul><li><p>以 <code>eslint:</code> 开头的是 ESLint 官方扩展，有两个常用选项：<code>eslint:recommended</code>（推荐规范）和 <code>eslint:all</code>（所有规范）。</p></li><li><p>以 <code>plugin:</code> 开头的是插件类型的扩展。用于引入特定插件的规则和功能。这些插件扩展了 ESLint 的功能，提供了针对特定语言、框架或库的规则，以及其他辅助功能。</p></li><li><p>以 <code>eslint-config:</code> 开头的来自 npm 包的扩展，使用时可以省略 <code>eslint-config-</code>。例如，可以直接写成 <code>standard</code>。</p></li><li><p>以 <code>@</code> 开头的扩展和 <code>eslint-config</code> 类似，是在 npm 包上加了一层作用域 scope。</p></li></ul><p>以下是一个示例，后面的规则会覆盖前面的规则：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">  &quot;extends&quot;</span><span style="color:#383A42;">: [</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;eslint:recommended&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 使用 ESLint 推荐规范</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;airbnb&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 相当于使用 eslint-config-airbnb</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;plugin:vue/essential&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// Vue 必不可少的类型规则</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;eslint-config-airbnb-base/rules/strict&quot;</span><span style="color:#A0A1A7;font-style:italic;"> // 指定一个具体文件地址</span></span>
<span class="line"><span style="color:#383A42;">  ]</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>社区封装的 ESLint 插件在 npm 上搜索 <code>eslint-plugin-</code></strong> 可以发现许多社区封装的 ESLint 插件，其中一些比较出名的插件有：</p><ul><li><code>eslint-plugin-react</code>：用于 React 相关规则的插件。</li><li><code>eslint-plugin-import</code>：用于导入规则的插件。</li></ul><p>这些插件的出现是因为 ESLint 自带的规则只包含 ES 语法本身的规则，而像 Vue、React 等内置的规则并不包含在其中。以 Vue 为例，可以通过以下方式扩展规则：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#50A14F;">&quot;extends&quot;</span><span style="color:#383A42;">: [</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;plugin:vue/base&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 基础</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;plugin:vue/essential&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 必不可少的</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;plugin:vue/recommended&quot;</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 推荐的</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;plugin:vue/strongly-recommended&quot;</span><span style="color:#A0A1A7;font-style:italic;"> // 强烈推荐</span></span>
<span class="line"><span style="color:#383A42;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果 <code>extends</code> 配置是一个数组，那么最终会将所有规则项进行合并。当出现冲突时，后面的规则会覆盖前面的规则。</p><h2 id="env-环境" tabindex="-1">env -- 环境 <a class="header-anchor" href="#env-环境" aria-label="Permalink to &quot;env -- 环境&quot;">​</a></h2><p>举个例子当我们在项目使用了 浏览器环境全局变量&#39;window&#39;,&#39;node 环境global&#39;,&#39;jquery $&#39;,这些某种环境特带的让eslint 知道不是我们用错了而是这类东西是某环境下的</p><p>es6 中除了模块之外的其他特性，同时将自动设置 parserOptions.ecmaVersion 参数为 6以此类推 ES2017 是 8，而 ES2021 是 12(parserOptions.ecmaVersion 关于它可以看parserOptions)</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">  &quot;env&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">    &quot;browser&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">true</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 项目中有代码在浏览器环境运行</span></span>
<span class="line"><span style="color:#E45649;">    &quot;node&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">true</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 项目中有代码在 Node.js 环境下运行</span></span>
<span class="line"><span style="color:#E45649;">    &quot;es6&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">true</span><span style="color:#A0A1A7;font-style:italic;"> // 启动 ES6 全局变量和类型，同时会自动设置解析器为ES6</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="globals-全局变量" tabindex="-1">globals -- 全局变量 <a class="header-anchor" href="#globals-全局变量" aria-label="Permalink to &quot;globals -- 全局变量&quot;">​</a></h2><p>ESLint会检测未声明的变量，并发出报错，比如node环境中的process，浏览器环境下的全局变量console，以及我们通过cdn引入的jQuery定义的$等；我们可以在<code>globals</code>中进行变量声明</p><p>但是node或者浏览器中的全局变量很多，如果我们一个个进行声明显得繁琐，因此就需要用到我们的<code>env</code>，这是对环境定义的一组全局变量的预设,可以参考下面&#39;env&#39; 字段</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">    &quot;globals&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">        // true表示该变量可读写，false表示变量是只读</span></span>
<span class="line"><span style="color:#E45649;">        &quot;$&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        &quot;console&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">false</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="overrides-覆盖" tabindex="-1">overrides -- 覆盖 <a class="header-anchor" href="#overrides-覆盖" aria-label="Permalink to &quot;overrides -- 覆盖&quot;">​</a></h2><p>当使用 ESLint 配置文件时，<code>overrides</code> 选项允许你为特定的文件、目录或 glob 模式应用特定的 ESLint 配置。这样，你可以根据需要为不同的代码部分指定不同的规则。</p><p><code>overrides</code> 是一个数组，每个数组元素都是一个对象，表示一个覆盖配置。每个覆盖配置对象具有以下属性：</p><ul><li><p><code>files</code>：一个字符串或字符串数组，用于指定要应用规则的文件、目录或 glob 模式。可以使用通配符 <code>*</code> 匹配文件名，或者使用 <code>**</code> 匹配任意层级的目录。例如，<code>&quot;src/*.js&quot;</code> 匹配 <code>src</code> 目录下的所有 <code>.js</code> 文件，<code>&quot;src/**/*.js&quot;</code> 匹配 <code>src</code> 目录及其子目录下的所有 <code>.js</code> 文件。</p></li><li><p><code>excludedFiles</code>：一个字符串或字符串数组，用于指定要排除的文件、目录或 glob 模式。这些文件将不会受到覆盖配置的影响。同样，可以使用通配符 <code>*</code> 和 <code>**</code> 进行匹配。</p></li><li><p><code>extends</code>：一个字符串或字符串数组，表示要应用的规则集或配置。可以是 ESLint 内置的规则集，也可以是自定义的配置。例如，<code>&quot;eslint:recommended&quot;</code> 表示使用 ESLint 内置的推荐规则集，<code>&quot;my-config&quot;</code> 表示使用自定义的配置文件。</p></li><li><p><code>rules</code>：一个对象，用于指定要覆盖或添加的规则。你可以在这里覆盖全局配置中的规则，或者添加新的规则。例如，<code>{&quot;no-console&quot;: &quot;off&quot;}</code> 表示禁用 <code>no-console</code> 规则。</p></li><li><p><code>plugins</code>：一个字符串数组，用于指定要使用的插件。你可以在这里列出你想要使用的插件，然后在规则中使用插件提供的规则。</p></li></ul><p>通过使用 <code>overrides</code>，你可以根据文件类型、目录结构或其他条件，为不同的代码部分应用不同的规则和配置，以满足项目的特定需求。</p><p>举个例子场景： 当使用 ESLint 进行代码检查时，<code>overrides</code> 选项允许你为不同的文件或文件类型应用不同的代码规则。</p><p>假设你正在开发一个 Web 应用程序，其中包括前端代码和后端代码。前端代码使用 JavaScript 编写，后端代码使用 Node.js 编写。你可能希望为这两部分代码应用不同的代码规则，因为它们具有不同的用途和要求。</p><p>在这种情况下，你可以使用 <code>overrides</code> 来创建两个不同的配置，每个配置针对特定的代码部分：</p><p>对于前端代码，你可以定义一个覆盖配置，指定应该应用哪些规则以及如何进行代码检查。你可能希望使用一些与浏览器兼容性、前端最佳实践等相关的规则。</p><p>对于后端代码，你可以定义另一个覆盖配置，针对 Node.js 环境应用不同的规则。你可能希望关注一些与服务器端开发、安全性等相关的规则。</p><p>使用 <code>overrides</code>，你可以根据文件路径、文件名模式或其他条件来定义这些覆盖配置。这样，当运行 ESLint 时，它将根据文件类型自动应用相应的规则。</p><p>通过这种方式，你可以根据不同的代码部分的需要，更精细地定义代码规范和代码质量要求，从而提高代码的可读性、可维护性和一致性。</p><p>案例说明，其中 overrides 中的规则会覆盖全局的规则，但是如果overrides 中的规则没有指定，那么全局的规则将会被继承，在 overrides 数组中的规则会按照从上到下的顺序依次应用配置，直到找到与当前文件匹配的覆盖配置为止。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  rules</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;no-console&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;warn&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#E45649;">  overrides</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span></span>
<span class="line"><span style="color:#383A42;">    {</span></span>
<span class="line"><span style="color:#E45649;">      files</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;src/**/*.js&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#E45649;">      rules</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;no-console&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;off&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">      },</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#383A42;">    {</span></span>
<span class="line"><span style="color:#E45649;">      files</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#50A14F;">&quot;test/**/*.js&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#E45649;">      rules</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;no-console&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;error&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">      },</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#383A42;">  ],</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h1 id="plugins-和-extends-中-plugin区别" tabindex="-1">plugins 和 extends 中 plugin区别 <a class="header-anchor" href="#plugins-和-extends-中-plugin区别" aria-label="Permalink to &quot;plugins 和 extends 中 plugin区别&quot;">​</a></h1><p>&#39;plugins&#39; 理解成扩展校验规则，即原本&#39;eslint&#39; 是为了&#39;js&#39;出现的，随着前端的发展，出现一些其他格式文件例如&#39;vue&#39;,此时eslint 这种可插拔设计，在&#39;plugins&#39; 扩展将其检测规则扩展到eslint</p><p>规则就像是一个集合，真正想使用什么规则需要人为去配置，这种配置可以使用&#39;rules&#39; 一条一条的去指定，当然也可以使用一组配置开启集合这个就是&#39;extends &#39; 字段</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#E45649;">    module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">      plugins</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span></span>
<span class="line"><span style="color:#50A14F;">        &#39;eslint-plugin-react&#39;</span><span style="color:#A0A1A7;font-style:italic;"> // 扩展的规则</span></span>
<span class="line"><span style="color:#383A42;">      ],</span></span>
<span class="line"><span style="color:#E45649;">      extends</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">            // 新提供的规则一个开启的配置集合</span></span>
<span class="line"><span style="color:#50A14F;">            &#39;eslint-plugin-react/recommended&#39;</span></span>
<span class="line"><span style="color:#383A42;">        ],</span></span>
<span class="line"><span style="color:#E45649;">      rules</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#50A14F;">        &#39;eslint-plugin-react/jsx-boolean-value&#39;</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 2</span><span style="color:#A0A1A7;font-style:italic;"> // 如果没有eslint-plugin-react/recommended需要自己慢慢配置</span></span>
<span class="line"><span style="color:#383A42;">      }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="一个整体的配置" tabindex="-1">一个整体的配置 <a class="header-anchor" href="#一个整体的配置" aria-label="Permalink to &quot;一个整体的配置&quot;">​</a></h2><p><strong>如果要检测 React 项目中的 JSX 语法，给 ecmaFeatures 添加 jsx: true 是不推荐的，要用专门的 eslint-plugin-react 。</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// .eslintrc.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E45649;">module</span><span style="color:#383A42;">.</span><span style="color:#E45649;">exports</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  env</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#A0A1A7;font-style:italic;">// 标记当前代码最终的运行环境</span></span>
<span class="line"><span style="color:#E45649;">    browser</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">, </span><span style="color:#A0A1A7;font-style:italic;">// 代码运行在浏览器环境</span></span>
<span class="line"><span style="color:#E45649;">    es2020</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 语法解析器配置ts 语法需要自己的语法解析器因此要声明</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // parser: &#39;@typescript-eslint/parser&#39;,</span></span>
<span class="line"><span style="color:#E45649;">  extends</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [ </span><span style="color:#A0A1A7;font-style:italic;">// 记录共享配置类似继承的概念，下面的意思是使用node_modules  模块安装的&#39;standard&#39;检查作为模板</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;standard&#39;</span><span style="color:#A0A1A7;font-style:italic;"> // 如果需要在多个项目共享一个eslin配置，可以定义一个公共配置文件并在此集成</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 继承规则配置 不需要单独配置开关</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;plugin:react/recommended&#39;</span></span>
<span class="line"><span style="color:#383A42;">  ],</span></span>
<span class="line"><span style="color:#E45649;">  parserOptions</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#A0A1A7;font-style:italic;">// 设置语法解析器的相关配置 控制是否允许使用某一个ES版本的语法</span></span>
<span class="line"><span style="color:#E45649;">    ecmaVersion</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 11</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#E45649;">  rules</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#A0A1A7;font-style:italic;">// 配置eslint中每一个校验规则的开启/关闭</span></span>
<span class="line"><span style="color:#50A14F;">    &#39;no-alert&#39;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;error&quot;</span><span style="color:#A0A1A7;font-style:italic;"> // 内置规则名称： off/warn/error</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // // 2 - ERROR  该规则解决React未使用错误</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // &#39;react/jsx-uses-react&#39;: 2</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> // plugins: [</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  //   // eslint-plugin-react 插件</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  //   &#39;react&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  //   &#39;@typescript-eslint&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // ]</span></span>
<span class="line"><span style="color:#E45649;">  global</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#A0A1A7;font-style:italic;">// 额外声明代码中可使用全局成员 最新版本默认配置已不再体现</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 例如要使用jQuery对象</span></span>
<span class="line"><span style="color:#50A14F;">    &quot;jQuery&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;readonly&quot;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://eslint.cn/docs/user-guide/" target="_blank" rel="noreferrer">eslint 官网</a></p><p><a href="https://mp.weixin.qq.com/s/iwm2UtEEmsJgZx0D7yT1zA" target="_blank" rel="noreferrer">从 ESLint 开始，说透我如何在团队项目中基于 Vue 做代码校验</a></p><p><a href="https://segmentfault.com/a/1190000020656606?utm_source=tag-newest" target="_blank" rel="noreferrer">eslint 配置文件 -- .eslintrc </a></p><p><a href="https://www.cnblogs.com/taoshengyijiuai/p/8431413.html" target="_blank" rel="noreferrer">eslint 配置文件 -- .eslintrc</a></p><p><a href="https://www.51cto.com/article/650933.html" target="_blank" rel="noreferrer">内容非常详细！领略Eslint代码检查的四种姿势</a></p><p><a href="https://tjaddison.com/blog/2021/03/updating-babel-eslint-to-babeleslint-parser-for-react-apps/" target="_blank" rel="noreferrer">Updating babel-eslint to @babel/eslint-parser for React apps</a></p>`,136),t=[r];function c(i,u,d,b,y,A){return a(),n("div",null,t)}const h=s(o,[["render",c]]);export{g as __pageData,h as default};
