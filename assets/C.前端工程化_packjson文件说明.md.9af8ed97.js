import{_ as s,o as n,c as a,O as e}from"./chunks/framework.ab95ac3d.js";const t="/learning-notes-blog/images/前端工程化_qsmain.png",m=JSON.parse('{"title":"","description":"关于 package.json 字段和使用说明","frontmatter":{"description":"关于 package.json 字段和使用说明","tags":["工程化","package.json"]},"headers":[],"relativePath":"C.前端工程化/packjson文件说明.md","filePath":"C.前端工程化/packjson文件说明.md","lastUpdated":1684680743000}'),p={name:"C.前端工程化/packjson文件说明.md"},l=e(`<p>在使用包管理工具对项目初始化的时候，会出现一个文件 <code>package.json</code>,能够帮我们列出项目所依赖的包，可以指定项目可以使用的包版本等等,这个json 文件中的一些字段对项目起到了解释作用</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>version</td><td>当前的版本</td></tr><tr><td>name</td><td>应用程序/软件包的名称</td></tr><tr><td>description</td><td>应用程序/软件包的简短描述</td></tr><tr><td>main</td><td>应用程序的入口点</td></tr><tr><td>private</td><td>如果设置为 true，则可以防止应用程序/软件包被意外地发布到 npm</td></tr><tr><td>scripts</td><td>一组可以运行的 node 脚本</td></tr><tr><td>dependencies</td><td>作为业务依赖安装的 npm 软件包的列表</td></tr><tr><td>devDependencies</td><td>作为开发依赖安装的 npm 软件包的列表</td></tr><tr><td>peerDependencies</td><td>作为同伴依赖安装的 npm 软件包的列表</td></tr><tr><td>bundledDependencies</td><td>打包时需要包含的依赖列表</td></tr><tr><td>optionalDependencies</td><td>可选依赖安装的 npm 软件包的列表</td></tr><tr><td>engines</td><td>此软件包/应用程序在哪个版本的 Node.js 上运行</td></tr><tr><td>browserslist</td><td>告知要支持哪些浏览器（及其版本）</td></tr><tr><td>author</td><td>作者相关信息（发布时用到）</td></tr><tr><td>license</td><td>开源协议（发布时用到）</td></tr><tr><td>repository</td><td>代码仓库的位置</td></tr><tr><td>keywords</td><td>一组关键字，用于描述软件包的内容</td></tr><tr><td>homepage</td><td>应用程序/软件包的主页</td></tr></tbody></table><h2 id="包管理工具的钩子" tabindex="-1">包管理工具的钩子 <a class="header-anchor" href="#包管理工具的钩子" aria-label="Permalink to &quot;包管理工具的钩子&quot;">​</a></h2><p>在包管理 也存在一些钩子函数 在不同时机可以用来触发 ，大多数包管理工具都可以使用的钩子</p><table><thead><tr><th>钩子名称</th><th>触发时机</th></tr></thead><tbody><tr><td><code>preinstall</code></td><td>在安装依赖之前运行，可以用于检查环境或者进行一些准备工作</td></tr><tr><td><code>postinstall</code></td><td>在安装依赖之后运行，可以用于执行一些额外的安装步骤或者进行一些配置</td></tr><tr><td><code>preuninstall</code></td><td>在卸载依赖之前运行，可以用于进行一些清理工作或者备份数据</td></tr><tr><td><code>postuninstall</code></td><td>在卸载依赖之后运行，可以用于执行一些额外的清理步骤或者进行一些配置</td></tr><tr><td><code>prepublish</code></td><td>在发布软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>prepare</code></td><td>在软件包安装或者更新时运行，可以用于进行一些构建或者配置</td></tr><tr><td><code>prepack</code></td><td>在打包软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>postpack</code></td><td>在打包软件包之后运行，可以用于执行一些额外的打包步骤或者进行一些配置</td></tr></tbody></table><p>举个最常见的配置使用钩子案例</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E06C75;">&quot;prepare&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;husky install&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><details class="details custom-block"><summary>npm 的钩子这些钩子里面并不是所有的 包管理工具都支持</summary><table><thead><tr><th>钩子名称</th><th>触发时机</th></tr></thead><tbody><tr><td><code>preinstall</code></td><td>在安装依赖之前运行，可以用于检查环境或者进行一些准备工作</td></tr><tr><td><code>postinstall</code></td><td>在安装依赖之后运行，可以用于执行一些额外的安装步骤或者进行一些配置</td></tr><tr><td><code>preuninstall</code></td><td>在卸载依赖之前运行，可以用于进行一些清理工作或者备份数据</td></tr><tr><td><code>postuninstall</code></td><td>在卸载依赖之后运行，可以用于执行一些额外的清理步骤或者进行一些配置</td></tr><tr><td><code>prepublish</code></td><td>在发布软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>prepare</code></td><td>在软件包安装或者更新时运行，可以用于进行一些构建或者配置</td></tr><tr><td><code>prepack</code></td><td>在打包软件包之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>postpack</code></td><td>在打包软件包之后运行，可以用于执行一些额外的打包步骤或者进行一些配置</td></tr><tr><td><code>prepublishOnly</code></td><td>在发布软件包之前运行，但只有在使用 <code>npm publish</code> 命令时才会触发</td></tr><tr><td><code>preversion</code></td><td>在更新软件包版本号之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>version</code></td><td>在更新软件包版本号之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>postversion</code></td><td>在更新软件包版本号之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>prestop</code></td><td>在停止软件包之前运行，可以用于进行一些清理工作或者备份数据</td></tr><tr><td><code>poststop</code></td><td>在停止软件包之后运行，可以用于执行一些额外的清理步骤或者进行一些配置</td></tr><tr><td><code>prestart</code></td><td>在启动软件包之前运行，可以用于进行一些检查或者配置</td></tr><tr><td><code>poststart</code></td><td>在启动软件包之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>prerestart</code></td><td>在重启软件包之前运行，可以用于进行一些检查或者配置</td></tr><tr><td><code>postrestart</code></td><td>在重启软件包之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr><tr><td><code>pretest</code></td><td>在运行测试之前运行，可以用于进行一些准备工作或者配置</td></tr><tr><td><code>posttest</code></td><td>在运行测试之后运行，可以用于执行一些额外的测试步骤或者进行一些配置</td></tr><tr><td><code>prepublishToProd</code></td><td>在发布软件包到生产环境之前运行，可以用于进行一些检查或者构建</td></tr><tr><td><code>postpublish</code></td><td>在发布软件包之后运行，可以用于执行一些额外的步骤或者进行一些配置</td></tr></tbody></table></details><h3 id="配合脚本本身的钩子" tabindex="-1">配合脚本本身的钩子 <a class="header-anchor" href="#配合脚本本身的钩子" aria-label="Permalink to &quot;配合脚本本身的钩子&quot;">​</a></h3><p>pre,post两类钩子，一个是执行前，一个是执行后。举个例子例如我想，给我在scripts 中定义的server 脚本增加钩子，分别在原有指令前增加了&#39;pre&#39; 和&#39;post&#39;前缀 , 下面案例中 在执行 例如 <code>npm run serve</code>命令时，会依次执行<code>npm run preserve</code>、<code>npm run serve</code>、<code>npm run postserve</code></p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;preserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxx&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;vue-cli-service serve&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">&quot;postserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;xxxxxx&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在不同的包管理工具中可以在 <code>p<wbr>rocess.env</code> 中去获取 这些运行钩子以 npm 为例子，我们创建一个项目，项目pack.json 脚本配置部分</p><p>p<wbr>rocess.env.npm_lifecycle_event是npm特有的环境变量，因此在yarn和pnpm中并不支持。不过，yarn和pnpm都提供了类似的环境变量来获取当前的脚本命令</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#98C379;">&quot;scripts&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;preserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;echo 我是前置钩子&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;serve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node app.js&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E06C75;">&quot;postserve&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;node post.js&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 app.js 中内容</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">npm_lifecycle_event</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;preserve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the preserve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;serve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the serve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>在 post.js 中内容</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">npm_lifecycle_event</span></span>
<span class="line"><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;postserve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the postserve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">} </span><span style="color:#C678DD;">else</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E06C75;">_event</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">===</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;serve&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">	</span><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;Running the serve task!&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>最后打印结果</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">&gt; preserve</span></span>
<span class="line"><span style="color:#abb2bf;">&gt; echo 我是前置钩子</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">我是前置钩子</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">&gt; serve</span></span>
<span class="line"><span style="color:#abb2bf;">&gt; node app.js</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">Running the serve task!</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">&gt; postserve</span></span>
<span class="line"><span style="color:#abb2bf;">&gt; node post.js</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">Running the postserve task!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="main-配置字段的说明" tabindex="-1">main 配置字段的说明 <a class="header-anchor" href="#main-配置字段的说明" aria-label="Permalink to &quot;main 配置字段的说明&quot;">​</a></h2><p>当我们开发一个npm包时，需要在package.json文件中指定main配置项，这个配置项的值是一个js文件的路径，它将作为程序的主入口文件，以qs包为例，当我们使用 <code>import qs from &#39;qs&#39;</code> 实际运行的是 lib/index.js 文件</p><p><img src="`+t+`" alt=""></p><p>如果没有配置main 字段整个包查询过程其实是这样的 举个例子</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./find.js&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;./find&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>模块后缀省略，先找同名JS文件再找同名JS文件夹</li><li>找到了同名文件夹，找文件夹中的index.js</li><li>如果文件夹中没有index.js就会去当前文件夹中的package.json文件中查找main选项中的入口文件（具体路径也可以是指定到node_modules）所以找package.json也是一种情况</li><li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li></ol><p><strong>如果没有具体路径的包，此时会直接去去node_modules文件夹中 查找</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;find&#39;</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>首先看是否有该名字的JS文件</li><li>再看是否有该名字的文件夹</li><li>如果是文件夹看里面是否有index.js</li><li>如果没有index.js查看该文件夹中的package.json中的main选项确定模块入口文件否则找不到报错</li></ol><p>往往来说main 就已经足够了当然可以参看这个文章中其他配置 <a href="https://segmentfault.com/a/1190000019438150" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000019438150</a></p>`,30),o=[l];function r(c,d,i,B,y,b){return n(),a("div",null,o)}const F=s(p,[["render",r]]);export{m as __pageData,F as default};
