import{_ as s,o as t,c as n,V as a}from"./chunks/framework.96db2af4.js";const u=JSON.parse('{"title":"","description":"安装","frontmatter":{"description":"安装","tags":["服务端","nestjs"]},"headers":[],"relativePath":"B.NodeJS学习/14.nestJs框架学习/2.脚手架安装.md","filePath":"B.NodeJS学习/14.nestJs框架学习/2.脚手架安装.md","lastUpdated":1718635980000}'),e={name:"B.NodeJS学习/14.nestJs框架学习/2.脚手架安装.md"},l=a(`<ol><li>安装使用 Nest 提供的交手架进行安装使用，可以使用 npx 进行安装</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>也可以将脚手架安装到全局后，执行交手架指令</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>全局安装的问题是当前哪一刻的最新安装指令，如果 Nest 更新了需要执行更新全局脚手架</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">update</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-g</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>项目创建后会让选择使用的安装包工具 ，也可以在使用指令的时候直接确定创建的 包管理工具</li></ol><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npx</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">@nestjs/cli</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">nest</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">项目名</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-p</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">pnpm</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>也可以设置使用编写语言 <code>--language</code> 可以指定 typescript 和 javascript</li></ol><h2 id="项目目录了解" tabindex="-1">项目目录了解 <a class="header-anchor" href="#项目目录了解" aria-label="Permalink to &quot;项目目录了解&quot;">​</a></h2><p>项目创建后生成了项目目录</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">src</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.controller.spec.ts</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.controller.ts // 这是控制器文件，定义了应用程序的路由和处理请求的方法。控制器的责任是接收请求并返回响应。通常，它们会调用服务层的方法来处理业务逻辑。</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.module.ts // 这是应用程序的主模块文件，NestJS使用模块来组织应用结构。AppModule通常充当根模块，所有其他模块都会导入到它这里。它定义了应用中不同部分的依赖关系，比如控制器和服务。</span></span>
<span class="line"><span style="color:#abb2bf;"> ├── app.service.ts // 这是服务文件，包含应用的业务逻辑。服务层主要用来处理数据操作，如与数据库交互、调用外部API等。它们通常被控制器调用以执行复杂的操作。</span></span>
<span class="line"><span style="color:#abb2bf;"> └── main.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table><thead><tr><th>文件名</th><th>解释</th></tr></thead><tbody><tr><td>app.controller.spec.ts</td><td>这是一个单元测试文件，通常使用 Jest 或其他测试框架来编写，包含了针对 <code>app.controller.ts</code> 文件中定义的控制器的测试用例。通过运行这些测试用例，可以验证控制器中的各个功能是否按照预期工作。</td></tr><tr><td>app.controller.ts</td><td>这是一个控制器文件，负责处理特定路由的 HTTP 请求并返回响应。控制器是 NestJS 中的一个关键组件，负责将传入的请求映射到合适的服务方法。通常，一个控制器类会包含多个路由处理方法，这些方法使用装饰器（如 <code>@Get()</code>, <code>@Post()</code> 等）来定义路由路径和请求方法。</td></tr><tr><td>app.module.ts</td><td>这是应用程序的根模块文件。模块是 NestJS 应用程序的基本构建块，每个模块都封装了一组相关的功能。根模块通常用 <code>@Module()</code> 装饰器来定义，包含控制器、服务和其他模块的注册。在 <code>app.module.ts</code> 中，通常会导入其他模块，声明控制器，并提供服务。</td></tr><tr><td>app.service.ts</td><td>这是一个服务文件，定义了核心业务逻辑和数据处理方法。服务类使用 <code>@Injectable()</code> 装饰器来标识，并且可以被注入到控制器或其他服务中。服务负责处理数据，并将结果返回给调用它的控制器方法。</td></tr><tr><td>main.ts</td><td>这是应用程序的入口文件。这个文件通常包含启动 NestJS 应用程序的代码。典型的 <code>main.ts</code> 文件会创建一个 Nest 应用实例，配置全局中间件，启动应用并监听指定端口。这个文件中的核心代码包括 <code>NestFactory.create(AppModule)</code> 以及 <code>app.listen(port)</code>。</td></tr></tbody></table><ol><li><p><strong>app.controller.spec.ts</strong>： 这是一个单元测试文件，通常使用 Jest 或其他测试框架来编写。这个文件包含了针对 <code>app.controller.ts</code> 文件中定义的控制器的测试用例。通过运行这些测试用例，可以验证控制器中的各个功能是否按照预期工作。</p></li><li><p><strong>app.controller.ts</strong>： 这是一个控制器文件，它负责处理特定路由的 HTTP 请求并返回响应。控制器是 NestJS 中的一个关键组件，它负责将传入的请求映射到合适的服务方法。通常，一个控制器类会包含多个路由处理方法，这些方法使用装饰器（如 <code>@Get()</code>, <code>@Post()</code> 等）来定义路由路径和请求方法。</p></li><li><p><strong>app.module.ts</strong>： 这是应用程序的根模块文件。模块是 NestJS 应用程序的基本构建块，每个模块都封装了一组相关的功能。根模块通常用 <code>@Module()</code> 装饰器来定义，包含控制器、服务和其他模块的注册。在 <code>app.module.ts</code> 中，通常会导入其他模块，声明控制器，并提供服务。</p></li><li><p><strong>app.service.ts</strong>： 这是一个服务文件，定义了核心业务逻辑和数据处理方法。服务类使用 <code>@Injectable()</code> 装饰器来标识，并且可以被注入到控制器或其他服务中。服务负责处理数据，并将结果返回给调用它的控制器方法。</p></li><li><p><strong>main.ts</strong>： 这是应用程序的入口文件。这个文件通常包含启动 NestJS 应用程序的代码。典型的 <code>main.ts</code> 文件会创建一个 Nest 应用实例，配置全局中间件，启动应用并监听指定端口。这个文件中的核心代码包括 <code>NestFactory.create(AppModule)</code> 以及 <code>app.listen(port)</code>。</p></li></ol><ul><li><p><strong><code>main.ts</code></strong>：</p><ul><li><strong>作用</strong>：引导应用，初始化并启动服务器。</li><li><strong>关系</strong>：引导 <code>AppModule</code> 作为根模块。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">NestFactory</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/core&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.module&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">async</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">function</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">NestFactory</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">create</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;">AppModule</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">await</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">app</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">listen</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">3000</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#61AFEF;">bootstrap</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p><strong><code>app.module.ts</code></strong>：</p><ul><li><strong>作用</strong>：定义应用的根模块，组织控制器和提供者。</li><li><strong>关系</strong>：导入并注册 <code>AppController</code> 和 <code>AppService</code>。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Module</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.controller&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Module</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">imports</span><span style="color:#ABB2BF;">: [],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">controllers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppController</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">providers</span><span style="color:#ABB2BF;">: [</span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;">],</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppModule</span><span style="color:#ABB2BF;"> {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><strong><code>app.controller.ts</code></strong>：</p><ul><li><strong>作用</strong>：处理 HTTP 请求，定义路由和端点。</li><li><strong>关系</strong>：通过构造函数注入 <code>AppService</code>。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Controller</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">Get</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">AppService</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;./app.service&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Controller</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;hello&#39;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppController</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">constructor</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">private</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">readonly</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">appService</span><span style="color:#ABB2BF;">: </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  @</span><span style="color:#61AFEF;">Get</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">appService</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p><strong><code>app.service.ts</code></strong>：</p><ul><li><strong>作用</strong>：定义业务逻辑，提供给控制器使用。</li><li><strong>关系</strong>：被 <code>AppController</code> 通过依赖注入使用。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Injectable</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;@nestjs/common&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#61AFEF;">Injectable</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">AppService</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">getHello</span><span style="color:#ABB2BF;">(): </span><span style="color:#E5C07B;">string</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;Hello World!&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="nest-指令说明" tabindex="-1">nest 指令说明 <a class="header-anchor" href="#nest-指令说明" aria-label="Permalink to &quot;nest 指令说明&quot;">​</a></h2><h3 id="创建指令" tabindex="-1">创建指令 <a class="header-anchor" href="#创建指令" aria-label="Permalink to &quot;创建指令&quot;">​</a></h3><p>使用 <code>nest new </code> 的时候一些其他配置选项</p><table><thead><tr><th>选项</th><th>缩写</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>--directory [directory]</td><td>-</td><td>指定目标目录</td><td>-</td></tr><tr><td>--dry-run</td><td>-d</td><td>报告将执行的操作，但不实际写入结果</td><td>false</td></tr><tr><td>--skip-git</td><td>-g</td><td>跳过git仓库初始化</td><td>false</td></tr><tr><td>--skip-install</td><td>-s</td><td>跳过包安装</td><td>false</td></tr><tr><td>--package-manager [packageManager]</td><td>-p</td><td>指定包管理器</td><td>-</td></tr><tr><td>--language [language]</td><td>-l</td><td>编程语言（TypeScript或JavaScript）</td><td>TypeScript</td></tr><tr><td>--collection [collectionName]</td><td>-c</td><td>Schematics集合使用</td><td>@nestjs/schematics</td></tr><tr><td>--strict</td><td>-</td><td>启用TypeScript的严格模式</td><td>false</td></tr><tr><td>--help</td><td>-h</td><td>输出使用信息</td><td>-</td></tr></tbody></table><p>使用 <code>npx nest -h</code> 查看cli 的指令</p><table><thead><tr><th>名称</th><th>别名</th><th>说明</th><th>使用示例</th></tr></thead><tbody><tr><td>application</td><td>application</td><td>生成一个新的应用工作区</td><td><code>nest new &lt;project-name&gt;</code> 或 <code>nest new application &lt;project-name&gt;</code></td></tr><tr><td>class</td><td>cl</td><td>生成一个新的类</td><td><code>nest generate class &lt;class-name&gt;</code> 或 <code>nest g cl &lt;class-name&gt;</code></td></tr><tr><td>configuration</td><td>config</td><td>生成一个 CLI 配置文件</td><td><code>nest generate configuration &lt;file-name&gt;</code> 或 <code>nest g config &lt;file-name&gt;</code></td></tr><tr><td>controller</td><td>co</td><td>生成一个控制器声明</td><td><code>nest generate controller &lt;controller-name&gt;</code> 或 <code>nest g co &lt;controller-name&gt;</code></td></tr><tr><td>decorator</td><td>d</td><td>生成一个自定义装饰器</td><td><code>nest generate decorator &lt;decorator-name&gt;</code> 或 <code>nest g d &lt;decorator-name&gt;</code></td></tr><tr><td>filter</td><td>f</td><td>生成一个过滤器声明</td><td><code>nest generate filter &lt;filter-name&gt;</code> 或 <code>nest g f &lt;filter-name&gt;</code></td></tr><tr><td>gateway</td><td>ga</td><td>生成一个网关声明</td><td><code>nest generate gateway &lt;gateway-name&gt;</code> 或 <code>nest g ga &lt;gateway-name&gt;</code></td></tr><tr><td>guard</td><td>gu</td><td>生成一个守卫声明</td><td><code>nest generate guard &lt;guard-name&gt;</code> 或 <code>nest g gu &lt;guard-name&gt;</code></td></tr><tr><td>interceptor</td><td>itc</td><td>生成一个拦截器声明</td><td><code>nest generate interceptor &lt;interceptor-name&gt;</code> 或 <code>nest g itc &lt;interceptor-name&gt;</code></td></tr><tr><td>interface</td><td>itf</td><td>生成一个接口</td><td><code>nest generate interface &lt;interface-name&gt;</code> 或 <code>nest g itf &lt;interface-name&gt;</code></td></tr><tr><td>library</td><td>lib</td><td>在单体仓库中生成一个新的库</td><td><code>nest generate library &lt;library-name&gt;</code> 或 <code>nest g lib &lt;library-name&gt;</code></td></tr><tr><td>middleware</td><td>mi</td><td>生成一个中间件声明</td><td><code>nest generate middleware &lt;middleware-name&gt;</code> 或 <code>nest g mi &lt;middleware-name&gt;</code></td></tr><tr><td>module</td><td>mo</td><td>生成一个模块声明</td><td><code>nest generate module &lt;module-name&gt;</code> 或 <code>nest g mo &lt;module-name&gt;</code></td></tr><tr><td>pipe</td><td>pi</td><td>生成一个管道声明</td><td><code>nest generate pipe &lt;pipe-name&gt;</code> 或 <code>nest g pi &lt;pipe-name&gt;</code></td></tr><tr><td>provider</td><td>pr</td><td>生成一个提供者声明</td><td><code>nest generate provider &lt;provider-name&gt;</code> 或 <code>nest g pr &lt;provider-name&gt;</code></td></tr><tr><td>resolver</td><td>r</td><td>生成一个 GraphQL 解析器声明</td><td><code>nest generate resolver &lt;resolver-name&gt;</code> 或 <code>nest g r &lt;resolver-name&gt;</code></td></tr><tr><td>resource</td><td>res</td><td>生成一个新的 CRUD 资源</td><td><code>nest generate resource &lt;resource-name&gt;</code> 或 <code>nest g res &lt;resource-name&gt;</code></td></tr><tr><td>service</td><td>s</td><td>生成一个服务声明</td><td><code>nest generate service &lt;service-name&gt;</code> 或 <code>nest g s &lt;service-name&gt;</code></td></tr><tr><td>sub-app</td><td>app</td><td>在单体仓库中生成一个新的应用</td><td><code>nest generate application &lt;app-name&gt;</code> 或 <code>nest g app &lt;app-name&gt;</code></td></tr></tbody></table><p>例如可以使用 <code>npx nest g res t</code> 来生成一个包含 <code>controller、service、module </code> 的一个基本文件模板</p><h3 id="打包指令" tabindex="-1">打包指令 <a class="header-anchor" href="#打包指令" aria-label="Permalink to &quot;打包指令&quot;">​</a></h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c, --config [path]</td><td>指定 nest-cli 配置文件的路径。</td></tr><tr><td>-p, --path [path]</td><td>指定 tsconfig 文件的路径。</td></tr><tr><td>-w, --watch</td><td>以监视模式运行（实时重载）。</td></tr><tr><td>-b, --builder [name]</td><td>指定要使用的构建器（tsc, webpack, swc）。</td></tr><tr><td>--watchAssets</td><td>监视非 ts 文件（例如 .graphql）模式。</td></tr><tr><td>--webpack</td><td>使用 webpack 进行编译（已弃用选项，请使用 --builder 代替）。</td></tr><tr><td>--type-check</td><td>启用类型检查（当使用 SWC 时）。</td></tr><tr><td>--webpackPath [path]</td><td>指定 webpack 配置文件的路径。</td></tr><tr><td>--tsc</td><td>使用 TypeScript 编译器进行编译。</td></tr><tr><td>--preserveWatchOutput</td><td>在使用 tsc 监视模式时使用 &quot;preserveWatchOutput&quot; 选项。</td></tr><tr><td>-h, --help</td><td>输出使用信息。</td></tr></tbody></table><p><code>nest-cli.json</code> 进行一下脚手架的默认配置的文件</p><h3 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c, --config [path]</td><td>指定 nest-cli 配置文件的路径。</td></tr><tr><td>-p, --path [path]</td><td>指定 tsconfig 文件的路径。</td></tr><tr><td>-w, --watch</td><td>以监视模式运行（实时重载）。</td></tr><tr><td>-b, --builder [name]</td><td>指定要使用的构建器（tsc, webpack, swc）。</td></tr><tr><td>--watchAssets</td><td>监视非 ts 文件（例如 .graphql）模式。</td></tr><tr><td>-d, --debug [hostport]</td><td>以调试模式运行（使用 --inspect 标志）。</td></tr><tr><td>--webpack</td><td>使用 webpack 进行编译（已弃用选项，请使用 --builder 代替）。</td></tr><tr><td>--webpackPath [path]</td><td>指定 webpack 配置文件的路径。</td></tr><tr><td>--type-check</td><td>启用类型检查（当使用 SWC 时）。</td></tr><tr><td>--tsc</td><td>使用 TypeScript 编译器进行编译。</td></tr><tr><td>--sourceRoot [sourceRoot]</td><td>指向标准模式结构中单个项目源代码的根目录，或单体仓库模式结构中默认项目的根目录。</td></tr><tr><td>--entryFile [entryFile]</td><td>指定命令将使用的入口文件路径。默认值为 Nest CLI 配置文件中定义的路径。</td></tr><tr><td>-e, --exec [binary]</td><td>要运行的二进制文件（默认：&quot;node&quot;）。</td></tr><tr><td>--preserveWatchOutput</td><td>在使用 tsc 监视模式时使用 &quot;preserveWatchOutput&quot; 选项。</td></tr><tr><td>-h, --help</td><td>输出使用信息。</td></tr></tbody></table><p><code>nest start --watch</code> 以监视模式运行（实时重载）</p><h3 id="项目信息的-指令" tabindex="-1">项目信息的 指令 <a class="header-anchor" href="#项目信息的-指令" aria-label="Permalink to &quot;项目信息的 指令&quot;">​</a></h3><p><code>nest info</code> 命令，这个就是查看项目信息的，包括系统信息、 node、npm 和依赖</p>`,32),p=[l];function o(r,c,d,i,B,y){return t(),n("div",null,p)}const m=s(e,[["render",o]]);export{u as __pageData,m as default};
