import{_ as s,c as n,o as a,a8 as e,bE as l,bF as p}from"./chunks/framework.6k5lawSO.js";const g=JSON.parse('{"title":"","description":"Reflect反射","frontmatter":{"description":"Reflect反射"},"headers":[],"relativePath":"A.前端知识整理/4.前端ES新语法记录/3.代理和反射/2.Reflect反射.md","filePath":"A.前端知识整理/4.前端ES新语法记录/3.代理和反射/2.Reflect反射.md","lastUpdated":1718893054000}'),o={name:"A.前端知识整理/4.前端ES新语法记录/3.代理和反射/2.Reflect反射.md"},t=e(`<p>因为在早期的ECMA规范中没有考虑到这种对 对象本身 的操作如何设计会更加规范，所以将这些API放到了 <code>Object</code> 上面，<code>Object</code> 作为一个构造函数，这些操作实际上放到它身上并不合适，还包含一些类似于 in、delete操作符，让JS看起来是会有一些奇怪的</p><p>在ES6中新增了 <code>Reflect</code> ，让我们这些操作都集中到了Reflect对象上，它提供了一些反射方法，这些方法与那些在 <code>Object</code> 和 <code>Function</code> 原型上的方法具有相同的名称和功能。Reflect 的引入主要是为了使操作对象的行为变得更规范和一致，并且提供一个与 <code>Proxy</code> 对象互补的 API。</p><p><code>Object.getOwnPropertyNames(Reflect)</code> 获取到&#39;Reflect&#39; 上的属性，因为这些属性都是不可枚举的因此没有使用&#39;Object.keys&#39; 来获取，一共获取了13个静态方法</p><p><code>[&#39;defineProperty&#39;, &#39;deleteProperty&#39;, &#39;apply&#39;, &#39;construct&#39;, &#39;get&#39;, &#39;getOwnPropertyDescriptor&#39;, &#39;getPrototypeOf&#39;, &#39;has&#39;, &#39;isExtensible&#39;, &#39;ownKeys&#39;, &#39;preventExtensions&#39;, &#39;set&#39;, &#39;setPrototypeOf&#39;]</code></p><p><code>Reflect</code> 13个静态方法大致可以分为三类：<strong>对象操作、函数调用和原型操作</strong>。</p><h3 id="对象操作方法" tabindex="-1">对象操作方法 <a class="header-anchor" href="#对象操作方法" aria-label="Permalink to &quot;对象操作方法&quot;">​</a></h3><ul><li><strong>Reflect.get(target, propertyKey[, receiver])</strong>：获取对象的属性值，相当于 <code>target[propertyKey]</code>。</li><li><strong>Reflect.set(target, propertyKey, value[, receiver])</strong>：设置对象的属性值，相当于 <code>target[propertyKey] = value</code>。</li><li><strong>Reflect.deleteProperty(target, propertyKey)</strong>：删除对象的属性值，相当于 <code>delete target[propertyKey]</code>。</li><li><strong>Reflect.has(target, propertyKey)</strong>：检查对象是否有某个属性，相当于 <code>propertyKey in target</code>。</li><li><strong>Reflect.defineProperty(target, propertyKey, descriptor)</strong>：定义对象的属性，相当于 <code>Object.defineProperty(target, propertyKey, descriptor)</code>。</li><li><strong>Reflect.getOwnPropertyDescriptor(target, propertyKey)</strong>：获取对象自有属性的描述符，相当于 <code>Object.getOwnPropertyDescriptor(target, propertyKey)</code>。</li><li><strong>Reflect.ownKeys(target)</strong>：返回对象的所有自有属性的键，相当于 <code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>。</li></ul><h3 id="函数调用方法" tabindex="-1">函数调用方法 <a class="header-anchor" href="#函数调用方法" aria-label="Permalink to &quot;函数调用方法&quot;">​</a></h3><ul><li><strong>Reflect.apply(target, thisArgument, argumentsList)</strong>：调用一个函数，相当于 <code>Function.prototype.apply.call(target, thisArgument, argumentsList)</code>。</li><li><strong>Reflect.construct(target, argumentsList[, newTarget])</strong>：构造一个实例，相当于 <code>new target(...argumentsList)</code>。</li></ul><h3 id="原型操作方法" tabindex="-1">原型操作方法 <a class="header-anchor" href="#原型操作方法" aria-label="Permalink to &quot;原型操作方法&quot;">​</a></h3><ul><li><strong>Reflect.getPrototypeOf(target)</strong>：获取对象的原型，相当于 <code>Object.getPrototypeOf(target)</code>。</li><li><strong>Reflect.setPrototypeOf(target, prototype)</strong>：设置对象的原型，相当于 <code>Object.setPrototypeOf(target, prototype)</code>。</li><li><strong>Reflect.isExtensible(target)</strong>：检查对象是否是可扩展的，相当于 <code>Object.isExtensible(target)</code>。</li><li><strong>Reflect.preventExtensions(target)</strong>：让一个对象变得不可扩展，相当于 <code>Object.preventExtensions(target)</code>。</li></ul><h2 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h2><h3 id="reflect-get-target-name-receiver" tabindex="-1">Reflect.get(target, name, receiver) <a class="header-anchor" href="#reflect-get-target-name-receiver" aria-label="Permalink to &quot;Reflect.get(target, name, receiver)&quot;">​</a></h3><p>好的，我来优化这段文字，使其更容易理解。</p><hr><ol><li><p><code>Reflect.get(target, propertyKey, [receiver])</code> 方法的作用类似于从对象中读取属性（如 <code>target[propertyKey]</code>），但它是通过一个函数来实现的。如果 <code>propertyKey</code> 对应的属性是一个 getter 函数，<code>receiver</code> 参数将被作为 <code>this</code> 使用。如果没有提供 <code>receiver</code> 参数，那么 <code>this</code> 将指向 <code>target</code>。需要注意的是，<strong>只有在属性是 getter 函数时</strong>，<code>receiver</code> 才能改变 <code>this</code> 的指向。</p></li><li><p>调用 <code>Reflect.get()</code> 类似于使用 <code>target[propertyKey]</code> 表达式，因为它也会查找目标对象原型链上的属性值。如果目标对象上不存在该属性，则返回 <code>undefined</code>。</p></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;w&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">  age</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;18&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0184BC;">  get</span><span style="color:#4078F2;"> info</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> +</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(a, </span><span style="color:#50A14F;">&quot;name&quot;</span><span style="color:#383A42;">)); </span><span style="color:#A0A1A7;font-style:italic;">// w</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(a, </span><span style="color:#50A14F;">&quot;info&quot;</span><span style="color:#383A42;">)); </span><span style="color:#A0A1A7;font-style:italic;">// w18</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 别的对象借用获取属性</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(a, </span><span style="color:#50A14F;">&quot;info&quot;</span><span style="color:#383A42;">, { </span><span style="color:#E45649;">name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;z&quot;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">age</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;20&quot;</span><span style="color:#383A42;"> })); </span><span style="color:#A0A1A7;font-style:italic;">// z20</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="reflect-set-target-propertykey-value-receiver" tabindex="-1">Reflect.set(target, propertyKey, value[, receiver]) <a class="header-anchor" href="#reflect-set-target-propertykey-value-receiver" aria-label="Permalink to &quot;Reflect.set(target, propertyKey, value[, receiver])&quot;">​</a></h3><p>等同于 <code>target[propertyKey] = value</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 设置对象的属性值</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&#39;b&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj.</span><span style="color:#E45649;">b</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="reflect-deleteproperty-target-propertykey" tabindex="-1">Reflect.deleteProperty(target, propertyKey) <a class="header-anchor" href="#reflect-deleteproperty-target-propertykey" aria-label="Permalink to &quot;Reflect.deleteProperty(target, propertyKey)&quot;">​</a></h3><p>对应的内部插槽 <code>[[Delete]]</code> 方法等同于<code>delete obj[name]</code>，用于删除对象的属性,方法的第一个参数不是对象，会报错 <code>Reflect.deleteProperty(target, propertyKey)</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> obj </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">x</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">, </span><span style="color:#E45649;">y</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 2</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">deleteProperty</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&quot;x&quot;</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">obj; </span><span style="color:#A0A1A7;font-style:italic;">// { y: 2 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> arr </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> [</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">, </span><span style="color:#986801;">4</span><span style="color:#383A42;">, </span><span style="color:#986801;">5</span><span style="color:#383A42;">];</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">deleteProperty</span><span style="color:#383A42;">(arr, </span><span style="color:#50A14F;">&quot;3&quot;</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">arr; </span><span style="color:#A0A1A7;font-style:italic;">// [1, 2, 3, , 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 如果属性不存在，返回 true</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">deleteProperty</span><span style="color:#383A42;">({}, </span><span style="color:#50A14F;">&quot;foo&quot;</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 如果属性不可配置，返回 false</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">deleteProperty</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">freeze</span><span style="color:#383A42;">({</span><span style="color:#E45649;">foo</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">}), </span><span style="color:#50A14F;">&quot;foo&quot;</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="reflect-has" tabindex="-1">Reflect.has <a class="header-anchor" href="#reflect-has" aria-label="Permalink to &quot;Reflect.has&quot;">​</a></h3><p><code>Reflect.has</code>方法检查target对象或其原型上的propertyKey属性是否存在。这与in操作符完全相同。如果找到属性，则返回true，否则返回false,对应内部插槽 <code>[[HasProperty]]</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#50A14F;">&#39;assign&#39;</span><span style="color:#A626A4;"> in</span><span style="color:#383A42;"> Object </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 新写法</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(Object, </span><span style="color:#50A14F;">&#39;assign&#39;</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="reflect-ownkeys-target" tabindex="-1">Reflect.ownKeys(target) <a class="header-anchor" href="#reflect-ownkeys-target" aria-label="Permalink to &quot;Reflect.ownKeys(target)&quot;">​</a></h3><p><code>Reflect.ownKeys</code> 使用的内部插槽 <code>[[OwnPropertyKeys]]</code> ,方法返回一个由目标对象自身的属性键组成的数组。它的返回值等同于<code>Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target))</code>。结合了 <code>Object.getOwnPropertyNames</code> 和 <code>Object.getOwnPropertySymbols</code> 的结果，返回对象自身的所有属性键，包括字符串键和符号键。即自身所有属性(包含可枚举不可枚举和 symbol 属性)</p><ul><li><code>Object.keys(obj)</code>：返回一个数组，包含对象自身的所有可枚举属性键，但不包括符号键。</li><li><code>Object.getOwnPropertyNames(obj)</code>：返回一个数组，包含对象自身的所有字符串属性键，但不包括符号键。</li><li><code>Object.getOwnPropertySymbols(obj)</code>：返回一个数组，包含对象自身的所有符号属性键。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">  property1</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  [</span><span style="color:#4078F2;">Symbol</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;property2&quot;</span><span style="color:#383A42;">)]</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;symbol value&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#4078F2;">  say</span><span style="color:#383A42;">() {},</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 增加不可枚举</span></span>
<span class="line"><span style="color:#383A42;">Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&quot;hidden&quot;</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:#E45649;">  value</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;not enumerable&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">  enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 获取目标对象的所有属性键（包括符号键）</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> keys</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">ownKeys</span><span style="color:#383A42;">(obj);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(keys); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;property1&#39;, &#39;say&#39;, &#39;hidden&#39;, Symbol(property2) ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 只能可枚举的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">keys</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;property1&#39;, &#39;say&#39; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 不能获取symbol的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getOwnPropertyNames</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;property1&#39;, &#39;say&#39;, &#39;hidden&#39; ]</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 只能获取symbol的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getOwnPropertySymbols</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// [ Symbol(property2) ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>注意包含对象自身的所有符号属性键 用继承来说明</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Base</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">baseProperty</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;base&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  baseMethod</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Derived</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Base</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    super</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">derivedProperty</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;derived&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">  [</span><span style="color:#4078F2;">Symbol</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;property2&quot;</span><span style="color:#383A42;">)] </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;symbol value&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  derivedMethod</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> derivedObj</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Derived</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> keys</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">ownKeys</span><span style="color:#383A42;">(derivedObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 制造 可枚举的比较复杂 这里数据没有用可枚举</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(keys); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;baseProperty&#39;, &#39;derivedProperty&#39;, Symbol(property2) ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">keys</span><span style="color:#383A42;">(derivedObj)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;baseProperty&#39;, &#39;derivedProperty&#39; ] // 只能可枚举的属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getOwnPropertyNames</span><span style="color:#383A42;">(derivedObj)); </span><span style="color:#A0A1A7;font-style:italic;">// [ &#39;baseProperty&#39;, &#39;derivedProperty&#39; ] // 不能获取symbol属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getOwnPropertySymbols</span><span style="color:#383A42;">(derivedObj)); </span><span style="color:#A0A1A7;font-style:italic;">// [ Symbol(property2) ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><img src="`+l+`" alt=""></p><p>如上图如果你想获取继承的属性 <code> console.log(Reflect.ownKeys(Reflect.getPrototypeOf(derivedObj)));</code> 不停从原型链获取即可</p><h3 id="reflect-defineproperty-target-propertykey-attributes" tabindex="-1">Reflect.defineProperty(target, propertyKey, attributes) <a class="header-anchor" href="#reflect-defineproperty-target-propertykey-attributes" aria-label="Permalink to &quot;Reflect.defineProperty(target, propertyKey, attributes)&quot;">​</a></h3><p><code>Reflect.defineProperty(target, propertyKey, attributes)</code> 使用的内部插槽<code>[[DefineOwnProperty]]</code></p><p><code>Object.defineProperty</code> 和 <code>Reflect.defineProperty</code> 两者在功能上非常相似，但它们在返回值和异常处理上有所不同。我们来详细对比一下：</p><ul><li><p><code>Object.defineProperty</code> 如果操作成功，返回目标对象 <code>obj</code>。如果操作失败，抛出一个 <code>TypeError</code> 异常。</p></li><li><p><code>Reflect.defineProperty</code>如果操作成功，返回 <code>true</code>。 如果操作失败，返回 <code>false</code>。</p></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用 Object.defineProperty</span></span>
<span class="line"><span style="color:#A626A4;">try</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">({}, </span><span style="color:#50A14F;">&#39;key&#39;</span><span style="color:#383A42;">, { </span><span style="color:#E45649;">value</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;">, </span><span style="color:#E45649;">writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;"> });</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;属性定义成功&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">} </span><span style="color:#A626A4;">catch</span><span style="color:#383A42;"> (e) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Object.defineProperty 失败:&#39;</span><span style="color:#383A42;">, e);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用 Reflect.defineProperty</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> success</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">({}, </span><span style="color:#50A14F;">&#39;key&#39;</span><span style="color:#383A42;">, { </span><span style="color:#E45649;">value</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;">, </span><span style="color:#E45649;">writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;"> });</span></span>
<span class="line"><span style="color:#A626A4;">if</span><span style="color:#383A42;"> (success) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;属性定义成功&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">} </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Reflect.defineProperty 失败&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="reflect-getownpropertydescriptor-target-propertykey" tabindex="-1">Reflect.getOwnPropertyDescriptor(target, propertyKey) <a class="header-anchor" href="#reflect-getownpropertydescriptor-target-propertykey" aria-label="Permalink to &quot;Reflect.getOwnPropertyDescriptor(target, propertyKey)&quot;">​</a></h3><p>返回目标对象的非继承属性的属性描述符，即非 <code>[[Prototype]](__proto__)</code> 上的属性描述符。和 <code>Object.getOwnPropertyDescriptor</code> 有略微的不同</p><ul><li><p><code>Object.getOwnPropertyDescriptor(target, propertyKey)</code> 对非对象的 <code>target</code> 参数会被强制转换为对象。</p></li><li><p><code>Reflect.getOwnPropertyDescriptor</code> <code>target</code> 必须是一个对象。如果传入非对象类型，会抛出异常(<code>TypeError</code>)。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">key</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> descriptor</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&#39;key&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(descriptor);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出: { value: 42, writable: true, enumerable: true, configurable: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 非对象的情况会抛出 TypeError</span></span>
<span class="line"><span style="color:#A626A4;">try</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(</span><span style="color:#986801;">42</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;key&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">} </span><span style="color:#A626A4;">catch</span><span style="color:#383A42;"> (e) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">error</span><span style="color:#383A42;">(e); </span><span style="color:#A0A1A7;font-style:italic;">// TypeError: Reflect.getOwnPropertyDescriptor called on non-object</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">key</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> descriptor</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(obj, </span><span style="color:#50A14F;">&#39;key&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(descriptor);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出: { value: 42, writable: true, enumerable: true, configurable: true }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 基本类型会被强制转换为对象</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> strDescriptor</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;foo&#39;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;length&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(strDescriptor);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出: { value: 3, writable: false, enumerable: false, configurable: false }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">({</span><span style="color:#E45649;">x</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;hello&quot;</span><span style="color:#383A42;">}, </span><span style="color:#50A14F;">&quot;x&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {value: &quot;hello&quot;, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">({</span><span style="color:#E45649;">x</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;hello&quot;</span><span style="color:#383A42;">}, </span><span style="color:#50A14F;">&quot;y&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">([], </span><span style="color:#50A14F;">&quot;length&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {value: 0, writable: true, enumerable: false, configurable: false}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// ------------------------------ 继承属性 ---------------------------------------</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> sy</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> Symbol</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;a&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    name </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 123</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    [sy] </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 145</span></span>
<span class="line"><span style="color:#4078F2;">    getName</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> B</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    getAge</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> b</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> B</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(b, </span><span style="color:#50A14F;">&#39;getName&#39;</span><span style="color:#383A42;">))</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(b, </span><span style="color:#50A14F;">&#39;getAge&#39;</span><span style="color:#383A42;">))</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">getOwnPropertyDescriptor</span><span style="color:#383A42;">(b, </span><span style="color:#50A14F;">&#39;name&#39;</span><span style="color:#383A42;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// // 打印结果：</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// { value: 123, writable: true, enumerable: true, configurable: true }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="reflect-getprototypeof-target" tabindex="-1">Reflect.getPrototypeOf(target) <a class="header-anchor" href="#reflect-getprototypeof-target" aria-label="Permalink to &quot;Reflect.getPrototypeOf(target)&quot;">​</a></h3><p>1.静态方法 <code>Reflect.getPrototypeOf(target)</code> 与<code> Object.getPrototypeOf()</code> 方法几乎是一样的。都是返回指定对象的原型（即内部的 <code>[[Prototype]] </code>属性的值）。如果目标没有原型，则返回null。 <code>Reflect</code> 要求target 必须是对象，Object 则不用 会自动进行拆箱转换</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">( </span><span style="color:#986801;">null</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// TypeError: Reflect.getPrototypeOf called on non-object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">( </span><span style="color:#50A14F;">&#39;hello&#39;</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// TypeError: Reflect.getPrototypeOf called on non-object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">( {})  </span><span style="color:#A0A1A7;font-style:italic;">// Object {constructor: Object(), __defineGetter__: ƒ, …}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reflect-setprototypeof-target-prototype" tabindex="-1">Reflect.setPrototypeOf(target, prototype) <a class="header-anchor" href="#reflect-setprototypeof-target-prototype" aria-label="Permalink to &quot;Reflect.setPrototypeOf(target, prototype)&quot;">​</a></h3><p><code>Reflect.setPrototypeOf(target, prototype)</code>,返回一个 Boolean 值表明是否原型已经成功设置,内部的 <code>[[Prototype]]</code> 属性值对应 <code>Object.setPrototypeOf()</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> object1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">setPrototypeOf</span><span style="color:#383A42;">(object1, </span><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// expected output: true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">setPrototypeOf</span><span style="color:#383A42;">(object1, </span><span style="color:#986801;">null</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// expected output: true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> object2</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">setPrototypeOf</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">freeze</span><span style="color:#383A42;">(object2), </span><span style="color:#986801;">null</span><span style="color:#383A42;">));</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// expected output: false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="reflect-preventextensions-target" tabindex="-1">Reflect.preventExtensions(target) <a class="header-anchor" href="#reflect-preventextensions-target" aria-label="Permalink to &quot;Reflect.preventExtensions(target)&quot;">​</a></h3><p>在实际开发中，<code>Reflect.preventExtensions</code> 可以用来保护对象，使其不能再添加新的属性。虽然现有属性仍然可以修改或删除，但它提供了一种基本的对象保护机制，帮助你更好地控制对象的结构和类型。</p><ul><li><code>Reflect.preventExtensions</code> 返回操作成功的布尔值。</li><li><code>Object.preventExtensions</code> 返回修改后的对象。</li><li>如果参数不是对象，<code>Reflect.preventExtensions</code> 会抛出异常，而 <code>Object.preventExtensions</code> 会进行类型转换。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> obj </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span><span style="color:#E45649;">name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;Alice&quot;</span><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 默认对象是可扩展的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">isExtensible</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用 Reflect.preventExtensions 使对象不可扩展</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">preventExtensions</span><span style="color:#383A42;">(obj);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">isExtensible</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 尝试添加新属性会失败</span></span>
<span class="line"><span style="color:#383A42;">obj.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> 30</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj.</span><span style="color:#E45649;">age</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: undefined (属性添加失败)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 现有属性仍然可以修改</span></span>
<span class="line"><span style="color:#383A42;">obj.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;Bob&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: &quot;Bob&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 现有属性可以删除</span></span>
<span class="line"><span style="color:#0184BC;">delete</span><span style="color:#383A42;"> obj.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="reflect-isextensible-target" tabindex="-1">Reflect.isExtensible(target) <a class="header-anchor" href="#reflect-isextensible-target" aria-label="Permalink to &quot;Reflect.isExtensible(target)&quot;">​</a></h3><p><code>Reflect.isExtensible(target) </code>target 必须是一个对象如果是非对象会异常报错，对应的内部插槽 <code>[[IsExtensible]]</code> ，检查对象是否可以进行扩展，返回一个 Boolean 值表明目标对象是否可扩展对应的方法，<code>Object.isExtensible()</code> 方法， 不同点是它对非对象的 target 参数将被强制转换为对象。</p><p>对象的“可扩展性”指的是是否可以向对象添加新的属性。默认情况下，所有对象都是可扩展的。但是，使用某些方法（如 <code>Object.preventExtensions</code>、<code>Object.seal</code> 或 <code>Object.freeze</code>）可以防止对象的扩展。</p><ul><li><code>Object.preventExtensions(obj)</code>: 使对象不可扩展。</li><li><code>Object.seal(obj)</code>: 使对象不可扩展且所有现有属性不可配置。</li><li><code>Object.freeze(obj)</code>: 使对象不可扩展、所有现有属性不可配置且不可写。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> obj </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 默认对象是可扩展的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">isExtensible</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 停止对象的扩展</span></span>
<span class="line"><span style="color:#383A42;">Object.</span><span style="color:#4078F2;">preventExtensions</span><span style="color:#383A42;">(obj);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">isExtensible</span><span style="color:#383A42;">(obj)); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用 Object.freeze 冻结对象也会使其不可扩展</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> frozenObj </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">freeze</span><span style="color:#383A42;">({});</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">isExtensible</span><span style="color:#383A42;">(frozenObj)); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Object.seal 同样会使对象不可扩展</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> sealedObj </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">seal</span><span style="color:#383A42;">({});</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Reflect.</span><span style="color:#4078F2;">isExtensible</span><span style="color:#383A42;">(sealedObj)); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="reflect-apply-target-thisargument-argumentslist" tabindex="-1">Reflect.apply(target, thisArgument, argumentsList) <a class="header-anchor" href="#reflect-apply-target-thisargument-argumentslist" aria-label="Permalink to &quot;Reflect.apply(target, thisArgument, argumentsList)&quot;">​</a></h3><p><strong>1. <code>Reflect.apply</code> 的作用：</strong><code>Reflect.apply</code> 对应 JavaScript 内部的 <code>[[call]]</code> 插槽，用于调用一个函数。其作用等同于 ES5 时期的 <code>Function.prototype.apply.call</code>，特别是在自定义函数的 <code>apply</code> 方法被重写但仍希望调用其原生 <code>apply</code> 方法时，<code>Reflect.apply</code> 更为简洁和直观。</p><p><strong>2. <code>Function.prototype.apply.call</code> 的解析：</strong></p><ul><li><strong><code>apply</code> 方法</strong>：接受两个参数，第一个是 <code>thisArg</code>（函数运行时的 <code>this</code> 值），第二个是 <code>传给函数参数的数组</code>。</li><li><strong><code>call</code> 方法</strong>：接受多个参数，第一个参数是 <code>thisArg</code>，之后是函数的参数分别列出。</li></ul><p>例如：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#C18401;">Function</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">apply</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(someFunc, thisArg, [argsArray]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>等同于：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">someFunc.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(thisArg, argsArray);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>3. <code>Reflect.apply</code> 的简化：</strong> 使用 <code>Reflect.apply(target, thisArg, args)</code>：</p><ul><li><code>target</code>：目标函数</li><li><code>thisArg</code>：函数调用时的 <code>this</code> 值</li><li><code>args</code>：调用时的参数数组</li></ul><p><strong>4. 参数处理差异：</strong></p><ul><li>在 <code>Function.prototype.apply</code> 中，第二个参数可以为 <code>null</code> 或 <code>undefined</code>，函数仍会正常执行。</li><li>在 <code>Reflect.apply</code> 中，如果参数数组为 <code>null</code> 或 <code>undefined</code> 会抛出 <code>TypeError</code> 异常。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">getName.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">, </span><span style="color:#986801;">null</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 正常执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, </span><span style="color:#986801;">null</span><span style="color:#383A42;">, </span><span style="color:#986801;">null</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// TypeError 异常</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, </span><span style="color:#986801;">null</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;&quot;</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// TypeError 异常</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, </span><span style="color:#986801;">null</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// TypeError 异常</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 如果不传参数，应该这样写</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, </span><span style="color:#986801;">null</span><span style="color:#383A42;">, {}); </span><span style="color:#A0A1A7;font-style:italic;">// 或</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, </span><span style="color:#986801;">null</span><span style="color:#383A42;">, []); </span><span style="color:#A0A1A7;font-style:italic;">// 正常执行</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">f</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;w&#39;</span><span style="color:#383A42;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> f </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;windows&#39;</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> getName</span><span style="color:#383A42;">(age) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(age, </span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">f</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">getName</span><span style="color:#383A42;">(</span><span style="color:#986801;">12</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">getName.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(obj, [</span><span style="color:#986801;">12</span><span style="color:#383A42;">])</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, </span><span style="color:#986801;">null</span><span style="color:#383A42;">, [</span><span style="color:#986801;">12</span><span style="color:#383A42;">])</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(getName, obj, [</span><span style="color:#986801;">12</span><span style="color:#383A42;">])</span></span>
<span class="line"><span style="color:#C18401;">Function</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">apply</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(getName, obj, [</span><span style="color:#986801;">12</span><span style="color:#383A42;">])</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#986801;">12</span><span style="color:#50A14F;"> &#39;windows&#39;</span></span>
<span class="line"><span style="color:#986801;">12</span><span style="color:#50A14F;"> &#39;w&#39;</span></span>
<span class="line"><span style="color:#986801;">12</span><span style="color:#50A14F;"> &#39;windows&#39;</span></span>
<span class="line"><span style="color:#986801;">12</span><span style="color:#50A14F;"> &#39;w&#39;</span></span>
<span class="line"><span style="color:#986801;">12</span><span style="color:#50A14F;"> &#39;w&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h3 id="reflect-construct-target-argumentslist-newtarget" tabindex="-1">Reflect.construct(target, argumentsList, [, newTarget]) <a class="header-anchor" href="#reflect-construct-target-argumentslist-newtarget" aria-label="Permalink to &quot;Reflect.construct(target, argumentsList, [, newTarget])&quot;">​</a></h3><p><code>Reflect.construct(target, argumentsList[, newTarget])</code> 用于创建一个新的实例对象，并且该对象的原型是由 <code>newTarget</code> 确定的。</p><ul><li><p>代表目标构造函数的第一个参数。</p></li><li><p>第二个参数，代表目标构造函数的参数，以类数组格式传递。</p></li><li><p>可选参数，指定新创建对象的原型对象的 <code>constructor</code> 属性。如果不提供，默认值为 <code>target</code>。</p></li></ul><p><code>Reflect.construct</code> 映射到 JavaScript 内部的 <code>[[Constructor]]</code> 插槽，等同于以下代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> obj </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Foo</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>和 <code>Reflect.apply</code> 一样，如果不需要对目标函数传参，那么需要传一个空数组，否则会报错。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">construct</span><span style="color:#383A42;">(target, </span><span style="color:#986801;">null</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// TypeError 异常</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">construct</span><span style="color:#383A42;">(target); </span><span style="color:#A0A1A7;font-style:italic;">// TypeError 异常</span></span>
<span class="line"><span style="color:#383A42;">Reflect.</span><span style="color:#4078F2;">construct</span><span style="color:#383A42;">(target, []); </span><span style="color:#A0A1A7;font-style:italic;">// 不传参的情况</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用第三个参数 <code>newTarget</code> 可以改变新创建对象的 <code>[[Prototype]]</code> 指向，从而改变 <code>__proto__</code>。这意味着新创建的对象构造函数可以指向 <code>newTarget</code>，如下所示：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> OneClass</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;OneClass&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> OtherClass</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;OtherClass&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 生成一个对象，其 \`[[Prototype]]\` 指向 \`OtherClass.prototype\`</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> obj </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">construct</span><span style="color:#383A42;">(OneClass, [], OtherClass);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> OtherClass</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> OneClass</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(obj.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// &quot;OneClass&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这等同于如下代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 创建一个以 \`OtherClass.prototype\` 为原型的对象</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> obj2 </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(</span><span style="color:#C18401;">OtherClass</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 调用 \`OneClass\`，将 \`this\` 指向新对象</span></span>
<span class="line"><span style="color:#383A42;">OneClass.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(obj2, []);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意：上述代码实际上调用的是 <code>OneClass</code> 的内部 <code>[[Call]]</code> 插槽，而不是 <code>[[Constructor]]</code>，<code>this</code> 绑定到了新创建的对象上，因此 <code>new.target</code> 在这种情况下为 <code>undefined</code>，这和使用 <code>Reflect.construct</code> 是不同的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;a&#39;</span></span>
<span class="line"><span style="color:#383A42;">    age </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;b&#39;</span></span>
<span class="line"><span style="color:#4078F2;">    getAge</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> B</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    zz </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 12</span></span>
<span class="line"><span style="color:#4078F2;">    getName</span><span style="color:#383A42;">() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> b</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">construct</span><span style="color:#383A42;">(</span><span style="color:#986801;">A</span><span style="color:#383A42;">, {}, </span><span style="color:#986801;">B</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(b </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> A</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(b </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> B</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><img src="`+p+'" alt=""></p>',86),r=[t];function c(i,y,b,A,d,u){return a(),n("div",null,r)}const f=s(o,[["render",c]]);export{g as __pageData,f as default};
