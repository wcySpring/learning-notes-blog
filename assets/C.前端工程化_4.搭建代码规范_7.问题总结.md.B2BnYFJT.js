import{_ as e,c as t,o as s,a8 as n}from"./chunks/framework.6k5lawSO.js";const q=JSON.parse('{"title":"","description":"项目代码规范中的问题总结","frontmatter":{"description":"项目代码规范中的问题总结"},"headers":[],"relativePath":"C.前端工程化/4.搭建代码规范/7.问题总结.md","filePath":"C.前端工程化/4.搭建代码规范/7.问题总结.md","lastUpdated":1695115873000}'),r={name:"C.前端工程化/4.搭建代码规范/7.问题总结.md"},a=n(`<p>项目规范可以提高代码编程的效率 专注代码的编写而不是代码的格式，统一开发规范就成了关键问题。ESLint + Prettier (+ editorconfig + husky + commitlint)可以在一定程度上实现代码层面的自动化，至少可以完成团队层面的代码规范统一（ 但是在实际的开发中，我们会遇到一些问题，将常见的问题进行总结</p><p><strong>针对代码整体检查可以分为四个阶段：</strong></p><ul><li><strong>编码时检查</strong>：编写代码时检查，通常表现为由 IDE 自动实时检查并进行代码提示</li><li><strong>编码后检查</strong>：编写代码后检查，通常表现为手动调用检查脚本 / 工具进行代码的检查或者代码保存后由 IDE 自动检查当前文件。</li><li><strong>构建前检查</strong>：构建执行前检查，通常表现为将代码检查作为构建任务的一个前置切面，构建时自动触发代码检查。见的前端构建工具如 webpack、gulp 和 Grunt 等，可以通过配置将代码检查任务添加为构建流程的一部分。例如，使用 webpack 可以通过 eslint-loader 在构建前运行 ESLint 检查</li><li><strong>提交前检查</strong>：git commit 前检查，通常表现为将代码检查作为 git commit 的一个 hooks 任务，代码提交前自动触发代码检查。</li></ul><p><strong>编码时和编码后其实有时候可以看作一体</strong>，当你使用了类似vscode 这类工具编码，并安装了&#39;eslint&#39; 这类插件通过配置便可以在编写时候今天错误提示，当然如果你这些都没有做就是需要编码后运行&#39;eslint&#39; 检查脚本的指令帮助你发现代码错误&#39;构建前检查&#39;,表现在现在用的 打包工具gulp 以及 webpack 配合</p><h2 id="有了-eslint-为什么还要使用-prettier" tabindex="-1">有了 ESLint 为什么还要使用 Prettier <a class="header-anchor" href="#有了-eslint-为什么还要使用-prettier" aria-label="Permalink to &quot;有了 ESLint  为什么还要使用 Prettier&quot;">​</a></h2><p>&#39;ESLint&#39; 主要解决了两类问题，代码质量和风格问题这两个问题，虽然 ESLint 中代码风格检查和 &#39;Prettier&#39;功能重叠， &quot;ESLint 中并非所有的格式化规则都有自动修复功能。有些格式化规则只会检测代码的格式问题，并提供警告或错误，但不会自动修复这些问题。此希望有一套自动化工具，帮我们检测代码是否规范，如果不规范，则自动能够帮我们按照既定规范格式化 这就是 prettier</p><p>&quot;ESLint&quot; 和 &quot;Prettier&quot; 是两个不同的工具，尽管它们都与代码风格和格式化相关，但它们有不同的目的和功能。</p><ol><li><p>&quot;ESLint&quot; 是一个强大的静态代码分析工具，用于检查代码中的潜在问题、错误和不一致之处。它可以帮助开发者遵循一致的编码规范和最佳实践。&quot;ESLint&quot; 提供了丰富的规则集，可以检查 JavaScript 和 TypeScript 代码中的语法错误、变量使用、代码风格等方面。</p></li><li><p>&quot;Prettier&quot; 是一个代码格式化工具，专注于代码的排版和格式，旨在提供统一、一致的代码样式。它可以自动调整代码的缩进、空格、换行符等，使代码具有统一的外观。&quot;Prettier&quot; 不仅支持 JavaScript 和 TypeScript，还支持其他语言如 CSS、Markdown 等。</p></li></ol><p>为什么会同时使用 &quot;Prettier&quot; 和 &quot;ESLint&quot; 呢？</p><ul><li>&quot;Prettier&quot; 的目标是提供一种统一的、无争议的代码格式，而不仅仅是修复错误。它可以消除开发团队成员之间关于代码样式的争议，提高代码的可读性和可维护性。</li><li>尽管 &quot;ESLint&quot; 也提供一些格式相关的规则，但它的主要重点是代码质量和错误检测。并非所有 &quot;ESLint&quot; 的规则都提供了自动修复功能，有些规则只是用于警告开发者潜在的问题。</li><li>&quot;Prettier&quot; 可以与 &quot;ESLint&quot; 配合使用，通过使用插件或配置文件，将其集成到开发工作流中。这样可以在保持代码质量的同时，确保代码的一致性和格式化。</li></ul><p>总而言之，&quot;Prettier&quot; 和 &quot;ESLint&quot; 是两个不同但互补的工具，它们在代码风格和格式化方面有不同的优势和功能，通过同时使用它们可以提高代码质量和可维护性。 <strong>因此整体的代码风格规范化还得交给 Prettier。</strong></p><h2 id="当-eslint-和-prettier-一起搭配的时候" tabindex="-1">当 eslint 和 prettier 一起搭配的时候 <a class="header-anchor" href="#当-eslint-和-prettier-一起搭配的时候" aria-label="Permalink to &quot;当 eslint 和 prettier 一起搭配的时候&quot;">​</a></h2><p>ESLint 之类的 Linters 对于代码格式化的能力是有限的，不如 Prettier 那么专业因此对代码风格规则上的约束工具二者必然就会出现冲突解决方法: 安装这两个插件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> i</span><span style="color:#50A14F;"> eslint-plugin-prettier</span><span style="color:#50A14F;"> eslint-config-prettier</span><span style="color:#986801;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noreferrer">eslint-config-prettier</a>- 和一般的<code>eslint-config-xxx</code>不同，它不是用来共享 ESlint 配置的，而是用来关闭 ESLint 的样式规则的，避免 ESLint 的样式规则和 Prettier 冲突。使用该配置后，对代码进行<code>prettier</code>和<code>eslint</code>就不会冲突了。但要注意一定要把它放在<code>extends</code>中最后的位置，避免后续的配置又把相关规则打开了。</p></li><li><p><a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noreferrer">eslint-plugin-prettier</a>- 将 Prettier 集成到 ESlint 工作流中，不需要再单独使用<code>prettier</code>命令。将 Prettier 发现的代码样式问题当作一条 ESLint 规则，在运行<code>eslint</code>检查后显示出来，也同样可以在<code>--fix</code>时修复。需要配合<code>eslint-config-prettier</code>使用。个人使用了一下基本 OK，但是由于 Prettier 不像 ESLint 那样是单独的一条条规则，因此错误的显示不是很友好。</p></li></ul><p>使用 &#39;eslint-config-prettier&#39;来关掉 (disable) 所有和 Prettier 冲突的 ESLint 的配置在 .eslintrc 里面将 prettier 设为最后一个 extends</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">    // .eslintrc</span></span>
<span class="line"><span style="color:#383A42;">    {</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;extends&quot;</span><span style="color:#383A42;">: [</span><span style="color:#50A14F;">&quot;prettier&quot;</span><span style="color:#383A42;">] </span><span style="color:#A0A1A7;font-style:italic;">// prettier 一定要是最后一个，才能确保覆盖</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用插件&#39;eslint-plugin-prettier&#39;,之前介绍过&#39;plugin&#39; 是扩展的规则，现在扩展&#39;prettier &#39;</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">    // .eslintrc</span></span>
<span class="line"><span style="color:#383A42;">    {</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;plugins&quot;</span><span style="color:#383A42;">: [</span><span style="color:#50A14F;">&quot;prettier&quot;</span><span style="color:#383A42;">],</span></span>
<span class="line"><span style="color:#50A14F;">        &quot;rules&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#50A14F;">            &quot;prettier/prettier&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;error&quot;</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面两步的分别解决了 关闭和eslint 的冲突，适配prettier 的检查规则赋予eslint ，正常情况下我们是要将上面两个步骤和在一起就是下面的配置，也是官方的推荐配置</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">    // .eslintrc</span></span>
<span class="line"><span style="color:#383A42;">    {</span></span>
<span class="line"><span style="color:#50A14F;">      &quot;extends&quot;</span><span style="color:#383A42;">: [</span><span style="color:#50A14F;">&quot;plugin:prettier/recommended&quot;</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="prettier-还需要-editorconfig" tabindex="-1">Prettier 还需要 EditorConfig <a class="header-anchor" href="#prettier-还需要-editorconfig" aria-label="Permalink to &quot;Prettier 还需要 EditorConfig&quot;">​</a></h2><p><strong>EditorConfig 解决了编辑器配置层面的编码风格一致性问题。作用于预览和输入阶段</strong>，Prettier 在保存和提交阶段重新组织代码，Prettier 会成为代码形态的最终决定者</p><p>EditorConfig 覆盖所有类型的文件，可以采用 EditorConfig 管理相交属性，其他属性则由 Prettier 控制。</p><p>EditorConfig 使不同编辑器可以保持同样的配置。因此，我们得以无需在每次编写新代码时，再依靠 Prettier 来按照团队约定格式化一遍（译注：出现保存时格式化突然改变的情况）。当然这需要在你的 IDE 上安装了必要的 EditorConfig 插件或扩展。</p><p>并且关于代码风格的部分并未涉及，比如是否「需要在语句末尾添加分号」，「字符串使用单引号还是双引号包裹」，「多行对象的书写规范」等等。这些都是 Prettier 的工作范畴，而不是 EditorConfig 的。</p>`,26),i=[a];function l(o,p,c,u,d,b){return s(),t("div",null,i)}const m=e(r,[["render",l]]);export{q as __pageData,m as default};
