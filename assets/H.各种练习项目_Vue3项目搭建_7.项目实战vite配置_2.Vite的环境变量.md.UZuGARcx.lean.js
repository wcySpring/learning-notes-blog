import{_ as s,c as n,o as a,a8 as e,dr as l,ds as o}from"./chunks/framework.6k5lawSO.js";const m=JSON.parse('{"title":"","description":"Vite的环境变量","frontmatter":{"description":"Vite的环境变量"},"headers":[],"relativePath":"H.各种练习项目/Vue3项目搭建/7.项目实战vite配置/2.Vite的环境变量.md","filePath":"H.各种练习项目/Vue3项目搭建/7.项目实战vite配置/2.Vite的环境变量.md","lastUpdated":1695881925000}'),p={name:"H.各种练习项目/Vue3项目搭建/7.项目实战vite配置/2.Vite的环境变量.md"},t=e(`<p>在多环境的情况下我们期望的是通过配置文件进行配置，然后在代码中通过环境变量来获取配置的值。</p><p>在实际的node 开发中都会将这一类的配置属性挂载在 <code>process.env</code> 返回的对象上，来做到一些全局的配置属性</p><p><strong><code>process.env</code>是Nodejs提供的一个全局对象API，用于访问当前进程的环境变量</strong>，<strong>它返回一个当前 Node.js 运行环境的环境变量包含用户环境信息的对象</strong>。环境变量是一组键值对，用于存储有关应用程序运行环境的配置信息。这些配置信息可以包括操作系统、用户、应用程序等级的变量。</p><p><strong>这里面其中还包含一些默认变量例如</strong></p><table tabindex="0"><thead><tr><th>环境变量</th><th>描述</th></tr></thead><tbody><tr><td>NODE_ENV</td><td>指定当前 Node.js 应用程序的运行环境，如 &quot;development&quot; 或 &quot;production&quot;。</td></tr><tr><td>PATH</td><td>指定可执行文件的搜索路径，用于运行命令行工具。</td></tr><tr><td>HOME (Unix) 或 USERPROFILE (Windows)</td><td>当前用户的主目录路径。</td></tr><tr><td>PWD (Unix)</td><td>当前工作目录的路径。</td></tr><tr><td>LANG 或 LC_ALL (Unix)</td><td>指定当前系统的语言和地区设置。</td></tr><tr><td>HOSTNAME</td><td>当前计算机的主机名。</td></tr><tr><td>USER (Unix) 或 USERNAME (Windows)</td><td>当前登录用户的用户名。</td></tr><tr><td>OS 或 OSTYPE</td><td>指定操作系统类型。</td></tr><tr><td>SHELL (Unix)</td><td>当前用户的默认 Shell。</td></tr><tr><td>TZ</td><td>指定当前时区的环境变量。</td></tr></tbody></table><p><strong>也可以通过变量赋值的形式去指定特殊的自定义的key</strong> 要注意的是这种自定义打印出来的 value 都是字符串形式</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(process.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#E45649;">foo</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> process.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#E45649;">foo</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// string</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>环境变量可以在操作系统或应用程序启动时设置，并在整个应用程序的执行过程中使用</strong>。如果我们想在项目启动时候就注入这些变量，而不是运行时候赋值，在不同系统上如果设置 环境变量需要针对不同系统去写不一样的脚本文件，</p><ul><li>命令行方式：在启动应用程序的命令前设置环境变量，例如：</li></ul><p>Windows: <code>SET NODE_ENV=development &amp;&amp; node your-app.js</code> 类 Unix：<code>NODE_ENV=development node your-app.js</code></p><ul><li>使用脚本：编写一个脚本文件，在脚本中设置环境变量并启动应用程序，例如：</li></ul><p>Windows: 创建一个批处理文件（.bat）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">SET</span><span style="color:#50A14F;"> NODE_ENV=development</span></span>
<span class="line"><span style="color:#4078F2;">node</span><span style="color:#50A14F;"> your-app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>类 Unix：创建一个 Shell 脚本文件（.sh）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> NODE_ENV</span><span style="color:#383A42;">=</span><span style="color:#E45649;">development</span></span>
<span class="line"><span style="color:#4078F2;">node</span><span style="color:#50A14F;"> your-app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>获取 NODE_ENV</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(process.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">NODE_ENV</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// development</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>当我们需要全局使用的一些系统变量打入程序中可以在不同操作系统上一致地设置环境变量，并将其传递给 Node.js 应用程序中的 <code>process.env</code> 变量时候一般会选用一些第三方的库 <code>dotenv</code> 和 <code>cross-env</code></strong></p><p><code>cross-env</code>，在不同系统中的兼容性问题。使用 <code>cross-env</code> 设置 <code>node</code> 内存变量</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">&quot;build&quot;</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;cross-env NODE_ENV=production NODE_OPTIONS=--max-old-space-size=8192 pnpm vite build&quot;,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有时候想传入更多的配置信息</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#50A14F;">&quot;scripts&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">    &quot;start-with-env&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;cross-env PORT=3000 ENV=local node server.js&quot;</span></span>
<span class="line"><span style="color:#383A42;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在，无论在 windows 上还是 mac/linux 上运行 npm run start-with-env 程序都能正常运行了</p><p>当环境变量越来越多时，难以维护此时可以使用</p><p><a href="https://github.com/motdotla/dotenv#-documentation" target="_blank" rel="noreferrer">dotenv</a> 是一个非常流行的 JavaScript 库，用于管理环境变量。它允许你将环境变量从 <code>.env</code> 文件中加载到 <code>process.env</code> 对象中。这样做的好处是，你可以在不更改代码的情况下，轻松地在不同的环境（如开发、测试和生产环境）中使用不同的设置。</p><p>二者在使用上可以理解 dotenv 主要用于环境变量的管理和存储，而 cross-env 主要用于解决跨操作系统设置环境变量的问题，但本质解决问题上都是一样的</p><h2 id="vite-中环境变量" tabindex="-1">Vite 中环境变量 <a class="header-anchor" href="#vite-中环境变量" aria-label="Permalink to &quot;Vite 中环境变量&quot;">​</a></h2><p>在 Vite 中，<code>dotenv</code> 库用于读取和解析 <code>.env</code> 文件，然后将这些环境变量合并到 Vite 的环境变量系统中。</p><ol><li><p><strong>加载 <code>.env</code> 文件</strong>：当你运行 <code>vite</code> 或 <code>vite build</code> 命令时，Vite 会自动查找项目根目录下的 <code>.env</code> 文件（以及任何环境特定的 <code>.env</code> 文件，如 <code>.env.development</code> 或 <code>.env.production</code>）。</p></li><li><p><strong>解析和合并</strong>：Vite 使用 <code>dotenv</code> 库来解析这些 <code>.env</code> 文件，并将解析后的环境变量合并到 <code>import.meta.env</code> 对象中。</p></li><li><p><strong>前缀过滤</strong>：与直接使用 <code>dotenv</code> 不同，Vite 通常只会将以 <code>VITE_</code> 开头的环境变量暴露给前端代码。</p></li><li><p><strong>访问环境变量</strong>：在你的代码中，你可以通过 <code>import.meta.env</code> 对象来访问这些环境变量。</p></li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>假设你有一个 <code>.env</code> 文件，内容如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>VITE_API_URL=https://api.example.com</span></span>
<span class="line"><span>DB_PASSWORD=secret</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这种情况下，只有 <code>VITE_API_URL</code> 会被暴露给前端代码，可以通过 <code>import.meta.env.VITE_API_URL</code> 来访问。</p><h3 id="vite-中环境变量使用" tabindex="-1">VITE 中环境变量使用 <a class="header-anchor" href="#vite-中环境变量使用" aria-label="Permalink to &quot;VITE 中环境变量使用&quot;">​</a></h3><p>Vite 在一个特殊的 import.meta.env 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量，一般会在根目录下创建一些用来保存环境变量的文件</p><ul><li><code>.env</code> 所有情况下都会加载，文件可以理解成全局配置文件不管什么环境都会优先读取这个文件下的配置</li><li><code>.env.local</code> 所有情况下都会加载，但会被 git 忽略</li><li><code>.env.[mode]</code> 只在指定模式下加载</li><li><code>.env.[mode].local</code> 只在指定模式下加载，但会被 git 忽略</li></ul><p>这些文件要注意的是</p><ul><li><code>.env.*.local</code> 文件应是本地的，可以包含敏感变量。你应该将 <code>*.local</code> 添加到你的 <code>.gitignore</code> 中，以避免它们被 git 检入。由于任何暴露给 Vite 源码的变量最终都将出现在客户端包中，<code>VITE_*</code> 变量应该不包含任何敏感信息。</li></ul><p><img src="`+l+`" alt=""></p><hr><p><strong>为了方便默认的开发环境和生产环境</strong> vite 也将做好了默认指定分别是 <code>.env.development</code> 和 <code>.env.production</code></p><p><code>.env.development</code> 只在开发模式下加载 <code>.env.production</code> 只在生产模式下加载</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> run</span><span style="color:#50A14F;"> dev</span><span style="color:#A0A1A7;font-style:italic;">  # 会加载 .env 和 .env.development 内的配置</span></span>
<span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> run</span><span style="color:#50A14F;"> build</span><span style="color:#A0A1A7;font-style:italic;"> # 会加载 .env 和 .env.production 内的配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过指令运行来指定配置文件，在 vite 中 <code>--mode</code> 选项可以用来指定环境变量的配置文件，可以通过命令行 <code>--mode</code> 选项来指定。例如</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> run</span><span style="color:#50A14F;"> vite</span><span style="color:#986801;"> --mode</span><span style="color:#50A14F;"> test</span><span style="color:#A0A1A7;font-style:italic;">  # 读取是.env.test 文件</span></span>
<span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> run</span><span style="color:#50A14F;"> vite</span><span style="color:#50A14F;"> build</span><span style="color:#986801;"> --mode</span><span style="color:#50A14F;"> test</span><span style="color:#A0A1A7;font-style:italic;"> # 读取是.env.test 文件</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="vite-环境变量在浏览器和配置文件使用" tabindex="-1">vite 环境变量在浏览器和配置文件使用 <a class="header-anchor" href="#vite-环境变量在浏览器和配置文件使用" aria-label="Permalink to &quot;vite 环境变量在浏览器和配置文件使用&quot;">​</a></h3><p>webpack帮我们做了处理，使浏览器可以直接识别node的<code>process.env</code>变量，从而实现了浏览器识别环境变量的功能。</p><p>vite中，我们的代码运行在<strong>浏览器环境中</strong>，因此是无法识别<code>process.env</code>变量的。（这意味着，vite中识别环境变量的方式与webpack中不同）,Vite 使用了一种特殊的方式来处理环境变量，它并不是直接使用 Node.js 的 process.env。相反，它使用了 <code>import.meta.env</code> 这个特殊的对象来让你在前端代码中访问环境变量</p><p>在帮我们转换后 我们需要通过使用 <code>import.meta.env</code> 是 <code>ECMAScript</code> 模块的一个特殊属性，<strong>用于在在持 ECMAScript 模块的现代浏览器中才可用访问环境变量。它提供了一种在前端代码中获取环境变量的方式。</strong></p><p><strong>import.meta.env 是一个包含当前模块环境变量的对象。它类似于 Node.js 中的 process.env，但适用于浏览器环境</strong>。</p><p>但是像<strong>vite.config.js运行在node环境中</strong>，因此，可以识别<code>process.env</code>变量,如果是在浏览器运行的文件例如打包后 vue 文件是需要使用 <code>import.meta.env</code></p><p>vite 结合了 <code>dotenv</code> 也配置了一些默认值如下</p><ul><li><code>import.meta.env.MODE</code>: {string} 应用运行的模式。</li><li><code>import.meta.env.BASE_URL</code>: {string} 部署应用时的基本 URL。他由base配置项决定。</li><li><code>import.meta.env.PROD</code>: {boolean} 应用是否运行在生产环境。</li><li><code>import.meta.env.DEV</code>: {boolean} 应用是否运行在开发环境 (永远与 import.meta.env.PROD相反)。</li><li><code>import.meta.env.SSR</code>: {boolean} 应用是否运行在 server 上。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39; import.meta.env.MODE: &#39;</span><span style="color:#383A42;">,  </span><span style="color:#A626A4;">import</span><span style="color:#383A42;">.</span><span style="color:#E45649;">meta</span><span style="color:#383A42;">.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">MODE</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39; import.meta.env.BASE_URL: &#39;</span><span style="color:#383A42;">,  </span><span style="color:#A626A4;">import</span><span style="color:#383A42;">.</span><span style="color:#E45649;">meta</span><span style="color:#383A42;">.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">BASE_URL</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39; import.meta.env.PROD: &#39;</span><span style="color:#383A42;">,  </span><span style="color:#A626A4;">import</span><span style="color:#383A42;">.</span><span style="color:#E45649;">meta</span><span style="color:#383A42;">.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">PROD</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39; import.meta.env.DEV: &#39;</span><span style="color:#383A42;">,  </span><span style="color:#A626A4;">import</span><span style="color:#383A42;">.</span><span style="color:#E45649;">meta</span><span style="color:#383A42;">.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">DEV</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39; import.meta.env.SSR: &#39;</span><span style="color:#383A42;">,  </span><span style="color:#A626A4;">import</span><span style="color:#383A42;">.</span><span style="color:#E45649;">meta</span><span style="color:#383A42;">.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">SSR</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+o+`" alt=""></p><p>在一些其他情况下像让某些配置文件打包内容模仿生产环境，例如 <code>.env.t</code> 想让其运行 <code>import.meta.env.PROD</code> 为 true 可以在配置文件声明</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;"># .env.t</span></span>
<span class="line"><span style="color:#E45649;">NODE_ENV</span><span style="color:#383A42;">=</span><span style="color:#50A14F;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>就可以模仿是生产配置环境进行运行改打包过程</p><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li>自定义 前缀 vite.config.ts</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">	//vite.config.ts</span></span>
<span class="line"><span style="color:#A626A4;">export</span><span style="color:#E45649;"> default</span><span style="color:#4078F2;"> defineConfig</span><span style="color:#383A42;">({</span></span>
<span class="line"><span style="color:#E45649;">  plugins</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> [</span><span style="color:#4078F2;">vue</span><span style="color:#383A42;">()],</span></span>
<span class="line"><span style="color:#E45649;">  envPrefix</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;">&quot;APP_&quot;</span><span style="color:#383A42;">,</span><span style="color:#A0A1A7;font-style:italic;">//APP_  为自定义开头名</span></span>
<span class="line"><span style="color:#383A42;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="使用是ts" tabindex="-1">使用是ts <a class="header-anchor" href="#使用是ts" aria-label="Permalink to &quot;使用是ts&quot;">​</a></h3><p>如果你使用的是ts，为了有良好的ts提示，我们在src目录下新增types目录，然后新增global.d.ts类型定义文件，<code>vite/client</code> 包含了默认的 env 配置字段</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * 可以看到默认包含的</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * interface ImportMetaEnv {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		[key: string]: any</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		BASE_URL: string</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		MODE: string</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		DEV: boolean</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		PROD: boolean</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		SSR: boolean</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">		}</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/// </span><span style="color:#383A42;font-style:italic;">&lt;</span><span style="color:#E45649;font-style:italic;">reference</span><span style="color:#986801;font-style:italic;"> types</span><span style="color:#383A42;font-style:italic;">=</span><span style="color:#50A14F;font-style:italic;">&quot;vite/client&quot;</span><span style="color:#383A42;font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 自定义属于自己的 回和默认的合并</span></span>
<span class="line"><span style="color:#A626A4;">interface</span><span style="color:#C18401;"> ImportMetaEnv</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  readonly</span><span style="color:#383A42;"> VITE_APP_TITLE</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 更多环境变量...</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">interface</span><span style="color:#C18401;"> ImportMeta</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  readonly</span><span style="color:#383A42;"> env</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ImportMetaEnv</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="使用-dotenv" tabindex="-1">使用 dotenv <a class="header-anchor" href="#使用-dotenv" aria-label="Permalink to &quot;使用 dotenv&quot;">​</a></h2><p>可以通过 npm 或 yarn 来安装这个库：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> dotenv</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"># 或</span></span>
<span class="line"><span style="color:#4078F2;">yarn</span><span style="color:#50A14F;"> add</span><span style="color:#50A14F;"> dotenv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><ol><li>在项目的根目录下创建一个 <code>.env</code> 文件，并添加一些键值对：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>DATABASE_URL=example-database-url</span></span>
<span class="line"><span>API_KEY=example-api-key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>在你的 JavaScript 文件中，尽早地导入并配置 <code>dotenv</code>：</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;dotenv&#39;</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">config</span><span style="color:#383A42;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者，如果你使用 ES6 模块：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> dotenv</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;dotenv&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">dotenv.</span><span style="color:#4078F2;">config</span><span style="color:#383A42;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>现在，你可以通过 <code>process.env</code> 对象来访问这些环境变量：</li></ol><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(process.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">DATABASE_URL</span><span style="color:#383A42;">);  </span><span style="color:#A0A1A7;font-style:italic;">// 输出 &quot;example-database-url&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(process.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">API_KEY</span><span style="color:#383A42;">);       </span><span style="color:#A0A1A7;font-style:italic;">// 输出 &quot;example-api-key&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-label="Permalink to &quot;高级用法&quot;">​</a></h3><ul><li><strong>自定义路径</strong>：如果你的 <code>.env</code> 文件位于自定义路径，你可以如下配置：</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;dotenv&#39;</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">config</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">path</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;/custom/path/to/.env&#39;</span><span style="color:#383A42;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p><strong>环境特定文件</strong>：你可以为不同的环境（如开发、测试、生产）创建不同的 <code>.env</code> 文件（例如 <code>.env.development</code>, <code>.env.production</code>）。</p><pre><code>  然后，你可以通过 \`process.env.NODE_ENV\` 来访问当前的环境变量：
</code></pre></li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(process.</span><span style="color:#E45649;">env</span><span style="color:#383A42;">.</span><span style="color:#986801;">NODE_ENV</span><span style="color:#383A42;">);  </span><span style="color:#A0A1A7;font-style:italic;">// 输出 &quot;development&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><pre><code>	你可以通过 \`dotenv\` 的 \`config\` 方法来指定当前环境的 \`.env\` 文件：
</code></pre><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">require</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;dotenv&#39;</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">config</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">path</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> \`.env.</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">process</span><span style="color:#50A14F;">.</span><span style="color:#E45649;">env</span><span style="color:#50A14F;">.</span><span style="color:#986801;">NODE_ENV</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><pre><code>	或者，如果你使用 ES6 模块：
</code></pre><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#E45649;"> dotenv</span><span style="color:#A626A4;"> from</span><span style="color:#50A14F;"> &#39;dotenv&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">dotenv.</span><span style="color:#4078F2;">config</span><span style="color:#383A42;">({ </span><span style="color:#E45649;">path</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> \`.env.</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">process</span><span style="color:#50A14F;">.</span><span style="color:#E45649;">env</span><span style="color:#50A14F;">.</span><span style="color:#986801;">NODE_ENV</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在，你可以在不同的环境中使用不同的环境变量了。</p>`,86),c=[t];function r(i,d,y,b,u,A){return a(),n("div",null,c)}const g=s(p,[["render",r]]);export{m as __pageData,g as default};
