import{_ as e,o as t,c as i,V as n}from"./chunks/framework.96db2af4.js";const P=JSON.parse('{"title":"","description":"SOLID原则是面向对象设计中的五个基本原则","frontmatter":{"description":"SOLID原则是面向对象设计中的五个基本原则"},"headers":[],"relativePath":"G.设计模式/2.设计原则/5.SOLID原则/0.导读.md","filePath":"G.设计模式/2.设计原则/5.SOLID原则/0.导读.md","lastUpdated":1690115031000}'),p={name:"G.设计模式/2.设计原则/5.SOLID原则/0.导读.md"},o=n("<p>2000 年，Robert C. Martin 在他的《设计原理和设计模式》这一论文中首次提出 SOLID 原则的概念。然后，在过去的 20 年中，这 5 条原则彻底改变了<strong>面向对象编程的世界，改变了我们编写软件的方式</strong>。</p><p><strong>SOLID 原则的核心理念是帮助我们构建可维护和可扩展的软件</strong>。因为随着软件规模的扩大，一个人维护所有的代码越来越困难，这时就需要更多的人来维护代码，而多人协作的关键在于相互通信与协作，恰好 SOLID 原则提供了这样一个框架。</p><ul><li><p>S（Single Responsibility Principle，简称 SRP）：单一职责原则，意思是对象应该仅具有一种单一的功能。</p></li><li><p>O（Open–Closed Principle，简称 OCP）：开闭原则，也就是程序对于扩展开放，对于修改封闭。</p></li><li><p>L（Liskov Substitution Principle，简称 LSP）：里氏替换原则，程序中的对象应该是可以在不改变程序正确性的前提下被它的子类所替换的。</p></li><li><p>I（Interface Segregation Principle，简称 ISP）：接口隔离原则，多个特定客户端接口要好于一个宽泛用途的接口。</p></li><li><p>D（Dependency Inversion Principle，简称 DIP）：依赖反转原则，该原则认为一个方法应该遵从“依赖于抽象而不是一个实例”。</p></li></ul>",3),r=[o];function s(_,l,a,c,S,d){return t(),i("div",null,r)}const D=e(p,[["render",s]]);export{P as __pageData,D as default};
