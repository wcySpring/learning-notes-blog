import{_ as s,c as n,o as a,a8 as l,d6 as o}from"./chunks/framework.6k5lawSO.js";const g=JSON.parse('{"title":"","description":"使用vue3 创建项目的前期准备工作","frontmatter":{"description":"使用vue3 创建项目的前期准备工作"},"headers":[],"relativePath":"H.各种练习项目/Vue3项目搭建/1.项目准备.md","filePath":"H.各种练习项目/Vue3项目搭建/1.项目准备.md","lastUpdated":1693183072000}'),e={name:"H.各种练习项目/Vue3项目搭建/1.项目准备.md"},p=l(`<p>在项目初期，会对项目技术栈选型进行一次前期准备梳理工作，列出一个vue 项目基本会使用的技术栈如下：</p><ul><li><p><strong>代码管理工具</strong>: git/ svn</p></li><li><p><strong>开发工具</strong> :Visual Studio Code</p></li><li><p><strong>编程语言</strong> :TypeScript + JavaScript</p></li><li><p><strong>构建工具</strong> :Vite / Webpack</p></li><li><p><strong>前端框架</strong> :Vue 3.x + setup</p></li><li><p><strong>路由工具</strong> :Vue Router</p></li><li><p><strong>状态管理</strong> :Vuex / Pinia</p></li><li><p><strong>UI 框架</strong> :Element Plus / Ant Vue / ArcoDesign</p></li><li><p><strong>可视化</strong> :Echart</p></li><li><p><strong>工具库</strong> :@vueuse/core + dayjs + countup.js等等</p></li><li><p><strong>CSS 预编译</strong> :Sass / Less</p></li><li><p><strong>HTTP 工具</strong> : Axios</p></li><li><p><strong>Git Hook 工具</strong> :husky 作为一个 Git Hook 工具，它允许你在 Git 特定事件（例如提交代码、推送代码等）发生时执行自定义脚本。Git Hook 是 Git中的钩子，它们允许你在特定的 Git 事件发生之前或之后执行自定义操作。Husky 提供了一种简单的方式来配置和管理这些钩子</p></li><li><p><strong>代码规范</strong> :EditorConfig + Prettier + ESLint ，他们的作用是用来定义代码编写风格和规范的指南。它们有助于确保团队成员编写的代码风格一致，提高代码可读性和可维护性</p></li><li><p><strong>提交规范</strong> :Commitizen + Commitlint，提交规范是一种约定，用于规范化代码提交的格式和风格。它有助于团队成员理解提交信息的含义，并提供一致的提交历史记录</p></li><li><p><strong>单元测试</strong>：Vitest / Jest，在验证代码的各个独立单元（通常是函数或方法）是否按照预期进行工作。在单元测试中，我们将代码的每个部分与预期的结果进行比较，以确保其功能正确。</p></li><li><p><strong>端到端自动化测试</strong> Cypress / Nightwatch / Playwright ，模拟和测试整个应用程序的用户场景和功能。它模拟真实用户在应用程序中的操作和交互，并测试整个应用程序的各个组件和功能是否正常运行。在端到端自动化测试中，测试人员编写脚本或使用自动化测试工具来模拟用户在应用程序中的行为，例如点击按钮、填写表单、导航到不同页面等。测试脚本会自动执行这些操作，并验证应用程序的响应是否符合预期。这种测试方法涵盖了从前端用户界面到后端服务器的整个应用程序堆栈，以确保整个系统的功能和集成正常工作</p></li><li><p><strong>自动部署</strong> :Centos + Jenkins + Nginx</p></li></ul><h2 id="关于-visual-studio-code-管理配置" tabindex="-1">关于 Visual Studio Code 管理配置 <a class="header-anchor" href="#关于-visual-studio-code-管理配置" aria-label="Permalink to &quot;关于 Visual Studio Code 管理配置&quot;">​</a></h2><p>在使用 Visual Studio Code 编辑器的时候，一般都会在项目目录上看到一个 &quot;.vscode&quot; 文件夹，这个文件里包含编辑器的各种配置选项和个性化设置，统一配置可以方便项目团队统一管理，常见一些配置文件</p><ul><li><p><code>settings.json</code>：这个文件包含了你的编辑器的全局设置。你可以在其中配置各种选项，如字体、主题、缩进样式等。</p></li><li><p><code>launch.json</code>：这个文件用于配置 VS Code 的调试器。你可以在其中定义调试会话，包括启动程序所需的参数、环境变量以及断点设置等。</p></li><li><p><code>tasks.json</code>：这个文件允许你定义自定义任务（tasks），例如运行脚本、构建项目或执行其他自动化任务。你可以在其中配置任务的命令、参数和其他设置。</p></li><li><p><code>extensions.json</code>：这个文件用于存储你当前项目所需的推荐扩展列表。当你打开项目时，VS Code 会根据这个文件中定义的扩展推荐进行安装。下面例子就是制定了 vscode 中这个项目使用到的两个插件</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#50A14F;">  &quot;recommendations&quot;</span><span style="color:#383A42;">: [</span><span style="color:#50A14F;">&quot;Vue.volar&quot;</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;Vue.vscode-typescript-vue-plugin&quot;</span><span style="color:#383A42;">]</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><code>keybindings.json</code>：这个文件包含了你自定义的键盘快捷键绑定。你可以在其中定义自己喜欢的快捷键组合，以提高编辑效率。</li></ul><h2 id="补充详细说明" tabindex="-1">补充详细说明 <a class="header-anchor" href="#补充详细说明" aria-label="Permalink to &quot;补充详细说明&quot;">​</a></h2><p><strong>补充详细说明 EditorConfig + Prettier + ESLint</strong></p><ul><li><p><strong>EditorConfig 是一个用于配置编辑器行为的文件格式和解析器</strong>。它可以用来定义代码缩进、换行符、字符编码等方面的规范。通过在项目中添加一个名为 &quot;.editorconfig&quot; 的文件，并在其中定义规范，可以确保团队成员在不同的编辑器中获得一致的编辑体验。</p></li><li><p><strong>Prettier 是一个代码格式化工具，它可以自动格式化你的代码</strong>，使其符合预定义的规范。Prettier 可以处理各种编程语言，并提供了许多可配置的选项，以根据项目需求进行自定义。通过在项目中配置 Prettier，你可以确保团队成员编写的代码具有一致的格式，无论他们使用的是哪个编辑器。</p></li><li><p><strong>ESLint 是一个用于检查和报告 JavaScript 代码中潜在问题的工具</strong>。它基于一组预定义的规则，可以检查代码中的语法错误、代码风格问题、潜在的 bug 等。ESLint 具有可扩展的配置选项，允许你根据项目需求自定义规则。通过在项目中配置 ESLint，你可以自动检查和纠正代码中的问题，以确保其质量和一致性。</p></li></ul><p><strong>补充详细说明 Commitizen + Commitlint</strong></p><ul><li><p><strong>Commitizen 是一个用于生成符合提交规范的交互式命令行工具</strong>。它提供了一组预定义的提交类型（如 feat、fix、docs 等），并引导开发人员填写提交信息的各个部分，例如提交类型、作用范围、描述等。Commitizen 可以帮助团队成员以统一的方式提交代码变更，提供更加清晰和易于理解的提交历史记录。</p></li><li><p><strong>Commitlint 是一个用于验证提交信息是否符合规范的工具</strong>。它通过使用自定义的规则和正则表达式，对提交信息进行检查和验证。Commitlint 可以帮助团队在提交代码之前检查提交信息的格式和内容，以确保其符合预定义的规范。这有助于提高提交信息的质量和可读性，并使团队成员更容易理解提交的含义。</p></li></ul><p><strong>单元测试 Vitest / Jest</strong></p><ul><li><p><strong>Vitest 是一个用于 Vue.js 应用程序的单元测试工具。它基于 Jest</strong>，并提供了专门为 Vue 组件和指令编写测试的功能。Vitest 支持 Vue 组件的快照测试、DOM 渲染测试、事件触发测试等常见的测试场景。它还提供了用于模拟 Vuex 状态管理库的辅助函数，以便更方便地编写针对 Vuex 的单元测试。Vitest 的目标是简化 Vue.js 应用程序的单元测试流程，提供易于理解和维护的测试代码。</p></li><li><p><strong>Jest 是一个流行的 JavaScript 测试框架，广泛用于编写前端和后端 JavaScript 应用程序的单元测试</strong>。它具有简单易用的语法和强大的功能，支持模拟、断言、覆盖率报告等。Jest 可以与多种前端框架（如 React、Vue.js 和 Angular）以及后端框架（如 Node.js）一起使用。它提供了一套丰富的 API，如测试运行器、断言库、模拟库等，使得编写可靠的单元测试变得更加简单和高效。</p></li></ul><p><strong>端到端自动化测试 Cypress / Nightwatch / Playwright</strong></p><ul><li><p><strong>Cypress 是一个现代化的前端端到端测试框架</strong>。类似 selenium 控制浏览器或无头浏览器对你的项目进行真实的操作.是一种模拟用户行为的操作。提供了直观的 API 和交互式的测试运行界面。包括实时重新加载、自动等待、可视化断言和实时监视等（<a href="https://www.bilibili.com/video/BV14r4y1774N?p=3&amp;vd_source=1e4d2f8cd0a4f142adfbc4bf47b6c113" target="_blank" rel="noreferrer">教程一</a> <a href="https://blog.csdn.net/dawei_yang000000/category_10594492.html" target="_blank" rel="noreferrer">教程二</a>）</p></li><li><p><strong>Nightwatch是一个基于Node.js和Selenium WebDriver的自动化测试框架</strong>。它提供了简单的API和丰富的断言库，使得编写和执行端到（End-to-End）自动化测试变得更加容易。Nightwatch可以用于测试Web应用程序的各个方面，包括页面导航、表单交互、元素操作以及验证页面内容等。</p></li><li><p><strong>Playwright是一个跨浏览器的自动化测试工具，由Microsoft开发</strong>。它支持多种浏览器（如Chrome、Firefox和WebKit），并提供了一组强大的API，可用于编写端到端自动化测试脚本。Playwright具有快速且可靠的测试执行，并提供了对浏览器的精细控制能力，例如模拟用户交互、网络请求拦截和修改、页面截图等。它还支持并行执行测试用例，以提高测试效率。</p></li></ul><h2 id="工具版本管理器" tabindex="-1">工具版本管理器 <a class="header-anchor" href="#工具版本管理器" aria-label="Permalink to &quot;工具版本管理器&quot;">​</a></h2><p>为了可以更方便的切换项目 node 版本 和 npm 的镜像源，我们可以使用 nvm 和 nrm 这两个工具来管理</p><ul><li><strong>Windows 下安装 nvm使用需注意</strong>，安装 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">nvm</a> 之前需要先卸载掉 node，所以安装前可以先查看下当前本机 node 版本，下载好 nvm 后再通过 nvm 安装上这个版本 node，防止突然换了其他版本 node 后对当前电脑上的项目造成一些影响。找到需要安装的版本后只要，接双击一路 next 安装即可，需要注意安装时选择安装地址，<strong>只要你选的安装地址目录没有中文和空格，一般不会出现问题的</strong></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>nvm-noinstall.zip # 绿色免安装版，使用时需进行配置</span></span>
<span class="line"><span>nvm-setup.zip     # 全自动安装版，推荐使用</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+o+`" alt=""></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> ls-remote</span><span style="color:#A0A1A7;font-style:italic;"> # 查看node所有版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> install</span><span style="color:#50A14F;"> node</span><span style="color:#A0A1A7;font-style:italic;"> # 安装最新node可用版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> version/nvm</span><span style="color:#50A14F;"> current</span><span style="color:#A0A1A7;font-style:italic;"> # 查看当前nvm使用node版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> list</span><span style="color:#50A14F;"> available</span><span style="color:#A0A1A7;font-style:italic;"> # 查看可安装node版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> list/nvm</span><span style="color:#50A14F;"> ls</span><span style="color:#A0A1A7;font-style:italic;"> # 查看已安装版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> install</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">versio</span><span style="color:#383A42;">n&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 安装指定node版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> uninstall</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">versio</span><span style="color:#383A42;">n&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 卸载指定node版本</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> use</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">versio</span><span style="color:#383A42;">n&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 切换使用指定版本node</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> use</span><span style="color:#383A42;"> [version] [arch] </span><span style="color:#A0A1A7;font-style:italic;"># 切换指定node版本和位数</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> reinstall-packages</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">versio</span><span style="color:#383A42;">n&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 在当前版本node环境下，重新全局安装指定版本号的npm包</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> on</span><span style="color:#A0A1A7;font-style:italic;"> # 打开nodejs控制</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> off</span><span style="color:#A0A1A7;font-style:italic;"> # 关闭nodejs控制</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> alias</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">nam</span><span style="color:#383A42;">e&gt; &lt;</span><span style="color:#50A14F;">versio</span><span style="color:#383A42;">n&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 给不同的版本号添加别名</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> unalias</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">nam</span><span style="color:#383A42;">e&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 删除已定义别名</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> proxy</span><span style="color:#A0A1A7;font-style:italic;"> # 查看设置与代理</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> node_mirror</span><span style="color:#383A42;"> [url] </span><span style="color:#A0A1A7;font-style:italic;"># 设置setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> npm_mirror</span><span style="color:#383A42;"> [url] </span><span style="color:#A0A1A7;font-style:italic;"># 设置setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.</span></span>
<span class="line"><span style="color:#4078F2;">nvm</span><span style="color:#50A14F;"> root</span><span style="color:#383A42;"> [path] </span><span style="color:#A0A1A7;font-style:italic;"># 设置和查看root路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li><strong>nrm 管理切换镜像源</strong>,通过镜像源配置可以切换到国内的镜像源，提高下载速度，或者是公司内部的镜像仓库 使用 <code>npm install -g nrm</code> 安装即可</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#986801;"> -h</span><span style="color:#50A14F;"> /nrm</span><span style="color:#986801;"> -help</span><span style="color:#A0A1A7;font-style:italic;">  # 查看 nrm 帮助（相关命令、信息）</span></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#986801;"> -V</span><span style="color:#A0A1A7;font-style:italic;">             # 查看当前 nrm 版本</span></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#50A14F;"> ls</span><span style="color:#A0A1A7;font-style:italic;">             # 查看当前 nrm 中可用的镜像源地址</span></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#50A14F;"> current</span><span style="color:#A0A1A7;font-style:italic;">        # 查看当前使用镜像源</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#50A14F;"> use</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">registr</span><span style="color:#383A42;">y&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 切换为某个镜像源 registry-镜像源名</span></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#50A14F;"> add</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">registr</span><span style="color:#383A42;">y&gt; &lt;</span><span style="color:#50A14F;">ur</span><span style="color:#383A42;">l&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 添加一个镜像源 registry-镜像源名 url-镜像源地址</span></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#50A14F;"> del</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">registr</span><span style="color:#383A42;">y&gt;  </span><span style="color:#A0A1A7;font-style:italic;"># 删除一个镜像源</span></span>
<span class="line"><span style="color:#4078F2;">nrm</span><span style="color:#50A14F;"> test</span><span style="color:#383A42;"> &lt;</span><span style="color:#50A14F;">registr</span><span style="color:#383A42;">y&gt; </span><span style="color:#A0A1A7;font-style:italic;"># 测试该镜像源下载响应时间</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,24),t=[p];function r(i,c,y,A,u,d){return a(),n("div",null,t)}const b=s(e,[["render",r]]);export{g as __pageData,b as default};
