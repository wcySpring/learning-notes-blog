import{_ as s,o as n,c as a,V as e}from"./chunks/framework.96db2af4.js";const o="/learning-notes-blog/images/2023-08-27-12-33-13.png",l="/learning-notes-blog/images/2023-08-27-14-57-31.png",m=JSON.parse('{"title":"","description":"Vite的环境变量","frontmatter":{"description":"Vite的环境变量"},"headers":[],"relativePath":"H.各种练习项目/Vue3项目搭建/4.Vite的环境变量.md","filePath":"H.各种练习项目/Vue3项目搭建/4.Vite的环境变量.md","lastUpdated":1693183072000}'),p={name:"H.各种练习项目/Vue3项目搭建/4.Vite的环境变量.md"},r=e('<p>在多环境的情况下我们期望的是通过配置文件进行配置，然后在代码中通过环境变量来获取配置的值。</p><p>在 Vite 中集成了 <a href="https://github.com/motdotla/dotenv#-documentation" target="_blank" rel="noreferrer">dotenv</a> 是一个非常流行的 JavaScript 库，用于管理环境变量。它允许你将环境变量从 <code>.env</code> 文件中加载到 <code>p<wbr>rocess.env</code> 对象中。这样做的好处是，你可以在不更改代码的情况下，轻松地在不同的环境（如开发、测试和生产环境）中使用不同的设置。</p><h2 id="使用-dotenv" tabindex="-1">使用 dotenv <a class="header-anchor" href="#使用-dotenv" aria-label="Permalink to &quot;使用 dotenv&quot;">​</a></h2><p>可以通过 npm 或 yarn 来安装这个库：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">install</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">dotenv</span></span>\n<span class="line"><span style="color:#7F848E;font-style:italic;"># 或</span></span>\n<span class="line"><span style="color:#61AFEF;">yarn</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">add</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">dotenv</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><ol><li><p>在项目的根目录下创建一个 <code>.env</code> 文件，并添加一些键值对：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">DATABASE_URL=example-database-url</span></span>\n<span class="line"><span style="color:#abb2bf;">API_KEY=example-api-key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>在你的 JavaScript 文件中，尽早地导入并配置 <code>dotenv</code>：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;dotenv&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">config</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者，如果你使用 ES6 模块：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">dotenv</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">from</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;dotenv&#39;</span><span style="color:#ABB2BF;">;</span></span>\n<span class="line"><span style="color:#E5C07B;">dotenv</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">config</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>现在，你可以通过 <code>p<wbr>rocess.env</code> 对象来访问这些环境变量：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">DATABASE_URL</span><span style="color:#ABB2BF;">);  </span><span style="color:#7F848E;font-style:italic;">// 输出 &quot;example-database-url&quot;</span></span>\n<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">process</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">API_KEY</span><span style="color:#ABB2BF;">);       </span><span style="color:#7F848E;font-style:italic;">// 输出 &quot;example-api-key&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h3 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-label="Permalink to &quot;高级用法&quot;">​</a></h3><ul><li><p><strong>自定义路径</strong>：如果你的 <code>.env</code> 文件位于自定义路径，你可以如下配置：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">require</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39;dotenv&#39;</span><span style="color:#ABB2BF;">).</span><span style="color:#61AFEF;">config</span><span style="color:#ABB2BF;">({ </span><span style="color:#E06C75;">path</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;/custom/path/to/.env&#39;</span><span style="color:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong>环境特定文件</strong>：你可以为不同的环境（如开发、测试、生产）创建不同的 <code>.env</code> 文件（例如 <code>.env.development</code>, <code>.env.production</code>）。</p><pre><code>  然后，你可以通过 `p<wbr>rocess.env.NODE_ENV` 来访问当前的环境变量：\n\n  ```javascript\n  console.log(p<wbr>rocess.env.NODE_ENV);  // 输出 &quot;development&quot;\n  ```\n\n  你可以通过 `dotenv` 的 `config` 方法来指定当前环境的 `.env` 文件：\n\n  ```javascript\n  require(&#39;dotenv&#39;).config({ path: `.env.${p<wbr>rocess.env.NODE_ENV}` });\n  ```\n\n  或者，如果你使用 ES6 模块：\n\n  ```javascript\n  import dotenv from &#39;dotenv&#39;;\n  dotenv.config({ path: `.env.${p<wbr>rocess.env.NODE_ENV}` });\n  ```\n\n  现在，你可以在不同的环境中使用不同的环境变量了。\n</code></pre></li></ul><h2 id="vite-中环境变量" tabindex="-1">Vite 中环境变量 <a class="header-anchor" href="#vite-中环境变量" aria-label="Permalink to &quot;Vite 中环境变量&quot;">​</a></h2><p>在 Vite 中，<code>dotenv</code> 库用于读取和解析 <code>.env</code> 文件，然后将这些环境变量合并到 Vite 的环境变量系统中。</p><ol><li><p><strong>加载 <code>.env</code> 文件</strong>：当你运行 <code>vite</code> 或 <code>vite build</code> 命令时，Vite 会自动查找项目根目录下的 <code>.env</code> 文件（以及任何环境特定的 <code>.env</code> 文件，如 <code>.env.development</code> 或 <code>.env.production</code>）。</p></li><li><p><strong>解析和合并</strong>：Vite 使用 <code>dotenv</code> 库来解析这些 <code>.env</code> 文件，并将解析后的环境变量合并到 <code>i<wbr>mport.meta.env</code> 对象中。</p></li><li><p><strong>前缀过滤</strong>：与直接使用 <code>dotenv</code> 不同，Vite 通常只会将以 <code>VITE_</code> 开头的环境变量暴露给前端代码。</p></li><li><p><strong>访问环境变量</strong>：在你的代码中，你可以通过 <code>i<wbr>mport.meta.env</code> 对象来访问这些环境变量。</p></li></ol><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>假设你有一个 <code>.env</code> 文件，内容如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">VITE_API_URL=https://api.example.com</span></span>\n<span class="line"><span style="color:#abb2bf;">DB_PASSWORD=secret</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在这种情况下，只有 <code>VITE_API_URL</code> 会被暴露给前端代码，可以通过 <code>i<wbr>mport.meta.env.VITE_API_URL</code> 来访问。</p><h3 id="vite-中环境变量使用" tabindex="-1">VITE 中环境变量使用 <a class="header-anchor" href="#vite-中环境变量使用" aria-label="Permalink to &quot;VITE 中环境变量使用&quot;">​</a></h3><p>Vite 在一个特殊的 i<wbr>mport.meta.env 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量，一般会在根目录下创建一些用来保存环境变量的文件</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">.env                # 所有情况下都会加载</span></span>\n<span class="line"><span style="color:#abb2bf;">.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>\n<span class="line"><span style="color:#abb2bf;">.env.[mode]         # 只在指定模式下加载</span></span>\n<span class="line"><span style="color:#abb2bf;">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这些文件要注意的是</p><ul><li><code>.env.*.local</code> 文件应是本地的，可以包含敏感变量。你应该将 <code>*.local</code> 添加到你的 <code>.gitignore</code> 中，以避免它们被 git 检入。由于任何暴露给 Vite 源码的变量最终都将出现在客户端包中，<code>VITE_*</code> 变量应该不包含任何敏感信息。</li></ul><p><img src="'+o+`" alt=""></p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">dev</span><span style="color:#ABB2BF;">  </span><span style="color:#7F848E;font-style:italic;"># 会加载 .env 和 .env.development 内的配置</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#7F848E;font-style:italic;"># 会加载 .env 和 .env.production 内的配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通过指令运行来指定配置文件，在 vite 中 <code>--mode</code> 选项可以用来指定环境变量的配置文件， <code>.env</code> 文件可以理解成全局配置文件不管什么环境都会优先读取这个文件下的配置， 默认的开发环境和生产环境 vite 也将做好了默认指定分别是 <code>.env.development</code> 和 <code>.env.production</code> ，可以通过命令行 <code>--mode</code> 选项来重写。例如</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">vite</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--mode</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test</span></span>
<span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">vite</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">build</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--mode</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="vite-环境变量在浏览器和配置文件使用" tabindex="-1">vite 环境变量在浏览器和配置文件使用 <a class="header-anchor" href="#vite-环境变量在浏览器和配置文件使用" aria-label="Permalink to &quot;vite 环境变量在浏览器和配置文件使用&quot;">​</a></h3><p>在使用 webpack 等其他打包插件的时候 使用的获取环境变量都是通过 <code>p<wbr>rocess.env</code> 和 上面介绍的 vite 使用方式略有不同这要先介绍一下关于<code>p<wbr>rocess.env</code> 是 Node.js 中的一个全局对象，用于访问当前进程的环境变量。它是一个包含当前环境变量的键值对的对象。在 Node.js 应用程序中，可以使用 <code>p<wbr>rocess.env</code> 对象来访问环境变量的值。环境变量可以在操作系统或应用程序启动时设置，并在整个应用程序的执行过程中使用。</p><p>一次我们可以通过配置将这些 全局使用的一些系统变量打入程序中</p><ul><li>命令行方式：在启动应用程序的命令前设置环境变量，例如：</li></ul><p>Windows: <code>SET NODE_ENV=development &amp;&amp; node your-app.js</code> 类 Unix：<code>NODE_ENV=development node your-app.js</code></p><ul><li>使用脚本：编写一个脚本文件，在脚本中设置环境变量并启动应用程序，例如：</li></ul><p>Windows: 创建一个批处理文件（.bat）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">SET</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">NODE_ENV=development</span></span>
<span class="line"><span style="color:#61AFEF;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">your-app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>类 Unix：创建一个 Shell 脚本文件（.sh）：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">#!/bin/bash</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">development</span></span>
<span class="line"><span style="color:#61AFEF;">node</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">your-app.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用配置文件：某些部署工具或框架提供配置文件功能，可以在配置文件中指定环境变量的值。例如上面提到的 <a href="https://github.com/motdotla/dotenv#-documentation" target="_blank" rel="noreferrer">dotenv</a> 或者 <code>cross-env</code> 是一个用于在命令行设置跨平台环境变量的包。通过 <code>cross-env</code>，您可以在不同操作系统上一致地设置环境变量，并将其传递给 Node.js 应用程序,这种方式就能很好的解决方案一和方案二在不同系统中的兼容性问题。</p><p>使用 <code>cross-env</code> 设置 <code>node</code> 内存变量</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">&quot;build&quot;</span><span style="color:#56B6C2;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cross-env NODE_ENV=production NODE_OPTIONS=--max-old-space-size=8192 pnpm vite build&quot;,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>到这里可以发现实际上这类配置都是 真的node 环境的，之所以 vue2中，webpack帮我们做了处理，使浏览器可以直接识别node的<code>p<wbr>rocess.env</code>变量，从而实现了浏览器识别环境变量的功能。</p><p>vite中，我们的代码运行在<strong>浏览器环境中</strong>，因此是无法识别<code>p<wbr>rocess.env</code>变量的。（这意味着，vite中识别环境变量的方式与webpack中不同）,在vite 帮我们转换后 我们需要通过使用 <code>i<wbr>mport.meta.env</code> 是 <code>ECMAScript</code> 模块的一个特殊属性，<strong>用于在在持 ECMAScript 模块的现代浏览器中才可用访问环境变量。它提供了一种在前端代码中获取环境变量的方式。</strong> <strong>i<wbr>mport.meta.env 是一个包含当前模块环境变量的对象。它类似于 Node.js 中的 p<wbr>rocess.env，但适用于浏览器环境</strong>。</p><p>但是像<strong>vite.config.js运行在node环境中</strong>，因此，可以识别<code>p<wbr>rocess.env</code>变量</p><ul><li>i<wbr>mport.meta.env.MODE: {string} 应用运行的模式。</li><li>import. meta.env.BASE_URL: {string} 部署应用时的基本 URL。他由base配置项决定。</li><li>import. meta.env.PROD: {boolean} 应用是否运行在生产环境。</li><li>import. meta.env.DEV: {boolean} 应用是否运行在开发环境 (永远与 i<wbr>mport.meta.env.PROD相反)。</li><li>i<wbr>mport.meta.env.SSR: {boolean} 应用是否运行在 server 上。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; i<wbr>mport.meta.env.MODE: &#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">MODE</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; i<wbr>mport.meta.env.BASE_URL: &#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">BASE_URL</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; i<wbr>mport.meta.env.PROD: &#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">PROD</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; i<wbr>mport.meta.env.DEV: &#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">DEV</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">console</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">log</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&#39; i<wbr>mport.meta.env.SSR: &#39;</span><span style="color:#ABB2BF;">,  </span><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">meta</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#E06C75;">SSR</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+l+`" alt=""></p><p>在一些其他情况下像让某些配置文件打包内容模仿生产环境，例如 <code>.env.t</code> 想让其运行 <code>i<wbr>mport.meta.env.PROD</code> 为 true 可以在配置文件声明</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># .env.t</span></span>
<span class="line"><span style="color:#E06C75;">NODE_ENV</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">production</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>就可以模仿是生产配置环境进行运行改打包过程</p><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li>自定义 前缀 vite.config.ts</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">//vite.config.ts</span></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">default</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">defineConfig</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">plugins</span><span style="color:#ABB2BF;">: [</span><span style="color:#61AFEF;">vue</span><span style="color:#ABB2BF;">()],</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">envPrefix</span><span style="color:#ABB2BF;">:</span><span style="color:#98C379;">&quot;APP_&quot;</span><span style="color:#ABB2BF;">,</span><span style="color:#7F848E;font-style:italic;">//APP_  为自定义开头名</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,50),t=[r];function c(i,d,B,y,b,u){return n(),a("div",null,t)}const F=s(p,[["render",c]]);export{m as __pageData,F as default};
