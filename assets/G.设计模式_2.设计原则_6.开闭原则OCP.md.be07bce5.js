import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const C=JSON.parse('{"title":"","description":"开闭原则OCP，对扩展开放，对修改封闭，通过抽象化和多态来实现。是面向对象设计原则的一种，开闭原则也是面向对象的可复用设计的基石。","frontmatter":{"description":"开闭原则OCP，对扩展开放，对修改封闭，通过抽象化和多态来实现。是面向对象设计原则的一种，开闭原则也是面向对象的可复用设计的基石。"},"headers":[],"relativePath":"G.设计模式/2.设计原则/6.开闭原则OCP.md","filePath":"G.设计模式/2.设计原则/6.开闭原则OCP.md","lastUpdated":1689847603000}'),p={name:"G.设计模式/2.设计原则/6.开闭原则OCP.md"},o=l(`<p>开闭原则的英文全称是 <code>Open Closed Principle</code>，简写为 <code>OCP</code>。它的英文描述是：<code>software entities (modules, classes, functions, etc.) should be open for extension , but closed for modification</code>。中文意思：<strong>软件实体（模块、类、方法等）应该“对扩展开放、对修改关闭”</strong>。是面向对象设计原则的一种，开闭原则也是面向对象的可复用设计的基石。</p><p>通俗话理解<strong>添加一个新的功能应该是，在已有代码基础上扩展代码（新增模块、类、方法等），而非修改已有代码（修改模块、类、方法等）</strong> 这个程度可以理解为（当增加了新功能，原代码的功能可以在不修改测试代码的情况下继续测试，新的功能只要新增测试用例就可以）</p><h2 id="开闭原则问题由来" tabindex="-1">开闭原则问题由来 <a class="header-anchor" href="#开闭原则问题由来" aria-label="Permalink to &quot;开闭原则问题由来&quot;">​</a></h2><p>在软件的生命周期内，因为变化、升级和维护等原因需要对软件原有代码进行修改时，可能会给旧代码中引入错误，也可能会使我们不得不对整个功能进行重构，并且需要原有代码经过重新测试。</p><h3 id="扩展和修改" tabindex="-1">扩展和修改 <a class="header-anchor" href="#扩展和修改" aria-label="Permalink to &quot;扩展和修改&quot;">​</a></h3><p>开闭原则可以应用在不同粒度的代码中，可以是<strong>模块，也可以类，还可以是方法（及其属性）</strong>。同样一个代码改动</p><p>在粗代码粒度下，被认定为<strong>修改</strong></p><p>在细代码粒度下，又可以被认定为<strong>扩展</strong>，例如，<strong>添加属性和方法相当于修改类，在类这个层面</strong>，这个代码改动可以被认定为<strong>修改</strong>；<strong>但这个代码改动并没有修改已有的属性和方法，在方法（及其属性）这一层面</strong>，它又可以被认定为<strong>扩展</strong></p><p>也可以理解为<strong>修改</strong>还是<strong>扩展</strong> 取决于 <strong>不破坏原有代码，对原有代码的侵入最低，可以说是基于扩展而不是修改</strong>或者说 <strong>只要它没有破坏原有的代码的正常运行，没有破坏原有的单元测试</strong></p><p>具体来说，开放封闭原则要求我们在设计软件时，应该尽量使用抽象化和多态等技术，将变化的部分抽象出来，形成稳定的抽象层，而将不变的部分留给具体的实现。这样，当需要添加新功能时，只需要添加新的实现类，而不需要修改原有的代码，从而实现了对修改关闭，对扩展开放的目标。</p><p>开放封闭原则是面向对象设计中的一个重要原则，它可以提高代码的可维护性、可扩展性和可重用性，降低代码的复杂度和维护成本。</p><h3 id="在实践中实现途径" tabindex="-1">在实践中实现途径 <a class="header-anchor" href="#在实践中实现途径" aria-label="Permalink to &quot;在实践中实现途径&quot;">​</a></h3><ol><li><p><strong>抽象化和多态</strong>：通过抽象化和多态等技术，将变化的部分抽象出来，形成稳定的抽象层，而将不变的部分留给具体的实现。这样，当需要添加新功能时，只需要添加新的实现类，而不需要修改原有的代码，从而实现了对修改关闭，对扩展开放的目标。</p></li><li><p><strong>接口和抽象类</strong>：通过接口和抽象类等机制，定义稳定的接口和抽象类，而将具体的实现留给子类来完成。这样，当需要添加新功能时，只需要添加新的子类，而不需要修改原有的代码，从而实现了对修改关闭，对扩展开放的目标。</p></li><li><p><strong>配置文件和反射机制</strong>：通过配置文件和反射机制等技术，将程序的配置信息和具体实现分离开来，从而实现了对修改关闭，对扩展开放的目标。</p></li><li><p><strong>模板方法模式</strong>：通过模板方法模式等设计模式，将稳定的算法框架和变化的部分分离开来，从而实现了对修改关闭，对扩展开放的目标。</p></li><li><p><strong>策略模式</strong>：通过策略模式等设计模式，将稳定的算法框架和变化的部分分离开来，从而实现了对修改关闭，对扩展开放的目标。</p></li></ol><h2 id="案例代码" tabindex="-1">案例代码 <a class="header-anchor" href="#案例代码" aria-label="Permalink to &quot;案例代码&quot;">​</a></h2><p>一个案例一段 API 接口监控告警的代码业务逻辑主要集中在 <code>check()</code> 函数中。当接口的 <code>TPS </code>超过某个预先设置的最大值时，以及当接口请求出错数大于某个最大允许值时，就会触发告警，通知接口的相关负责人或者团队</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">	</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertRule</span><span style="color:#E06C75;"> rule</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 存储告警规则</span></span>
<span class="line"><span style="color:#E06C75;">	</span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Notification</span><span style="color:#E06C75;"> notification</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">	</span><span style="color:#7F848E;font-style:italic;">// 收集规则</span></span>
<span class="line"><span style="color:#E06C75;">	</span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Alert</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AlertRule</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rule</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Notification</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">notification</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rule;</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> notification;</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">api</span><span style="color:#7F848E;font-style:italic;">               接口</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">requestCount</span><span style="color:#7F848E;font-style:italic;">      请求数量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">errorCount</span><span style="color:#7F848E;font-style:italic;">        错误数量</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 * </span><span style="color:#C678DD;font-style:italic;">@param</span><span style="color:#7F848E;font-style:italic;"> </span><span style="color:#E06C75;font-style:italic;">durationOfSeconds</span><span style="color:#7F848E;font-style:italic;"> 持续时间</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#E06C75;">	</span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">api</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">requestCount</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">errorCount</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">durationOfSeconds</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// 计算 服务器每秒处理的事务数</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tps</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> requestCount </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> durationOfSeconds;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// 处理的事务数tps 大于 传入规则 收集</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (tps </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(api).</span><span style="color:#61AFEF;">getMaxTps</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#7F848E;font-style:italic;">// NotificationEmergencyLevel</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#7F848E;font-style:italic;">// 表示通知的紧急程度其中SEVERE（严重）、URGENCY（紧急）、NORMAL（普通）、TRIVIAL（无关紧要）</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">URGENCY</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#7F848E;font-style:italic;">// 报错条数 大于 传入规则 收集</span></span>
<span class="line"><span style="color:#ABB2BF;">		</span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (errorCount </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(api).</span><span style="color:#61AFEF;">getMaxErrorCount</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">			</span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SEVERE</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">		}</span></span>
<span class="line"><span style="color:#ABB2BF;">	}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>现在需要，添加一个功能，当每秒钟接口超时请求个数，超过某个预先设置的最大阈值时，我们也要触发告警发送通知，这里我们就需要手动修改 check 方法，这种做法最简单也最危险，你并不知道会影响那部分代码</p><p>改动有两处：第一处是修改 check() 函数的入参，添加一个新的统计数据 timeoutCount，表示超时接口请求数；第二处是在 check() 函数中添加新的告警逻辑</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// ...省略AlertRule/Notification属性和构造函数...</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// 改动一：添加参数timeoutCount</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">api</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">requestCount</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">errorCount</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">timeoutCount</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">durationOfSeconds</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tps</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> requestCount </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> durationOfSeconds;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (tps </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(api).</span><span style="color:#61AFEF;">getMaxTps</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">URGENCY</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (errorCount </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(api).</span><span style="color:#61AFEF;">getMaxErrorCount</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SEVERE</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 改动二：添加接口超时处理逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">timeoutTps</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> timeoutCount </span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> durationOfSeconds;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (timeoutTps </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(api).</span><span style="color:#61AFEF;">getMaxTimeoutTps</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">URGENCY</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>并且这种改动带来了问题，我们增加了方法的入参，对应之前的位置都需要进行修改，如果做了单测那么之前的单测也需要重写。</p><p>这类的操作简单粗暴的修改，带入开闭原则，也就是 对扩展开放、对修改关闭 。看了并不是明智的，采用另一种形式 扩展开放</p><p>对上面代码要解决的两个问题</p><p>第一部分是将 check() 函数的多个入参封装成 ApiStatInfo 类；</p><p>第二部分在原有的 Alert 类中，check() 方法中包含了多个 if 判断逻辑，这些逻辑判断都是针对不同的告警规则的，这样会导致代码的可读性和可维护性变差。为了解决这个问题，可以引入 handler 的概念，将 if 判断逻辑分散在各个 handler 中</p><p>具体来说，我们可以定义一个 AlertHandler 抽象类，然后让 TpsAlertHandler 和 ErrorAlertHandler 类分别继承自 AlertHandler 类，并且实现自己的 check() 方法。这样，当需要添加新的告警规则时，只需要添加新的 AlertHandler 子类，并且实现自己的 check() 方法即可，不需要修改原有的代码。这样就实现了对修改关闭，对扩展开放的目标。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//省略constructor/getter/setter方法</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> api</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> requestCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> errorCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> durationOfSeconds</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 可以定义一个 AlertHandler 抽象类</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">abstract</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">protected</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertRule</span><span style="color:#E06C75;"> rule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">protected</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Notification</span><span style="color:#E06C75;"> notification</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> AlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AlertRule</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rule</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Notification</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">notification</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> rule;</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> notification;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">abstract</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">apiStatInfo</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承自 AlertHandler 类，并且实现自己的 check() 方法</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">TpsAlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> TpsAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AlertRule</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rule</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Notification</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">notification</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">super</span><span style="color:#ABB2BF;">(rule, notification);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">apiStatInfo</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">long</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">tps</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">apiStatInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getRequestCount</span><span style="color:#ABB2BF;">()</span><span style="color:#56B6C2;">/</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">apiStatInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getDurationOfSeconds</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (tps </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">apiStatInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getApi</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">getMaxTps</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">URGENCY</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 继承自 AlertHandler 类，并且实现自己的 check() 方法</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ErrorAlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> ErrorAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AlertRule</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">rule</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">Notification</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">notification</span><span style="color:#ABB2BF;">){</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">super</span><span style="color:#ABB2BF;">(rule, notification);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">apiStatInfo</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">apiStatInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getErrorCount</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">rule</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getMatchedRule</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">apiStatInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getApi</span><span style="color:#ABB2BF;">()).</span><span style="color:#61AFEF;">getMaxErrorCount</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">notification</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">notify</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">NotificationEmergencyLevel</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">SEVERE</span><span style="color:#ABB2BF;">, </span><span style="color:#98C379;">&quot;...&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">List</span><span style="color:#ABB2BF;">&lt;</span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#E06C75;"> alertHandlers </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ArrayList</span><span style="color:#ABB2BF;">&lt;&gt;</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> addAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">alertHandler</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">alertHandlers</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">add</span><span style="color:#ABB2BF;">(alertHandler);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> check</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">apiStatInfo</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">handler</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">:</span><span style="color:#ABB2BF;"> alertHandlers) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#E5C07B;">handler</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(apiStatInfo);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>下面开始使用，重构后的代码nApplicationContext 是一个单例类，负责 Alert 的创建、组装（alertRule 和 notification 的依赖注入）、初始化（添加 handlers）工作。</p><p>它对扩展开放，对修改关闭。具体来说，当我们需要增加一种新的警报类型时，只需要编写一个新的 AlertHandler 类型的警报处理器，并将其添加到 Alert 对象中即可，不需要修改 Alert 类的源代码。这样就避免了修改 Alert 类的源代码，从而避免了对现有代码的影响。</p><p>另外，ApplicationContext 类中的 initializeBeans 方法负责初始化 AlertRule、Notification 和 Alert 对象，并将 TpsAlertHandler 和 ErrorAlertHandler 警报处理器添加到 Alert 对象中。这样，Demo 类中的 main 方法只需要调用 ApplicationContext.getInstance().getAlert().check(apiStatInfo) 方法即可，无需关心 AlertRule、Notification 和 Alert 对象的初始化过程。这样做符合单一职责原则和依赖倒置原则，使得代码更加清晰、简洁、易于维护。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ApplicationContext</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertRule</span><span style="color:#E06C75;"> alertRule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Notification</span><span style="color:#E06C75;"> notification</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#E06C75;"> alert</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> initializeBeans</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    alertRule </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">AlertRule</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*.省略参数.*/</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//省略一些初始化代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    notification </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Notification</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*.省略参数.*/</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//省略一些初始化代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    alert </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Alert</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">alert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">TpsAlertHandler</span><span style="color:#ABB2BF;">(alertRule, notification));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">alert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ErrorAlertHandler</span><span style="color:#ABB2BF;">(alertRule, notification));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#61AFEF;"> getAlert</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{ </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> alert; }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// 饿汉式单例</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">final</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ApplicationContext</span><span style="color:#E06C75;"> instance </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">ApplicationContext</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> ApplicationContext</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#61AFEF;">initializeBeans</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">ApplicationContext</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> instance;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Demo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">apiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ApiStatInfo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...省略设置apiStatInfo数据值的代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">ApplicationContext</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getAlert</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(apiStatInfo);</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p><strong>后续需求进行扩展，如果再添加上面讲到的那个新功能，每秒钟接口超时请求个数超过某个最大阈值就告警，改动四处</strong> 第一处改动是：在 ApiStatInfo 类中添加新的属性 timeoutCount。</p><p>第二处改动是：添加新的 TimeoutAlertHander 类。</p><p>第三处改动是：在 ApplicationContext 类的 initializeBeans() 方法中，往 alert 对象中注册新的 timeoutAlertHandler。</p><p>第四处改动是：在使用 Alert 类的时候，需要给 check() 函数的入参 apiStatInfo 对象设置 timeoutCount 的值。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 代码未改动... }</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//省略constructor/getter/setter方法</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> api</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> requestCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> errorCount</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> durationOfSeconds</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">long</span><span style="color:#E06C75;"> timeoutCount</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 改动一：添加新字段</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">abstract</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">//代码未改动... }</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">TpsAlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//代码未改动...}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ErrorAlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//代码未改动...}</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 改动二：添加新的handler</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">TimeoutAlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertHandler</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//省略代码...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ApplicationContext</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">AlertRule</span><span style="color:#E06C75;"> alertRule</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Notification</span><span style="color:#E06C75;"> notification</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Alert</span><span style="color:#E06C75;"> alert</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> initializeBeans</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    alertRule </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">AlertRule</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*.省略参数.*/</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//省略一些初始化代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    notification </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Notification</span><span style="color:#ABB2BF;">(</span><span style="color:#7F848E;font-style:italic;">/*.省略参数.*/</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">//省略一些初始化代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    alert </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Alert</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">alert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">TpsAlertHandler</span><span style="color:#ABB2BF;">(alertRule, notification));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">alert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ErrorAlertHandler</span><span style="color:#ABB2BF;">(alertRule, notification));</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// 改动三：注册handler</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">alert</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">addAlertHandler</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">TimeoutAlertHandler</span><span style="color:#ABB2BF;">(alertRule, notification));</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">//...省略其他未改动代码...</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Demo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">ApiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">apiStatInfo</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">ApiStatInfo</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// ...省略apiStatInfo的set字段代码</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">apiStatInfo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setTimeoutCount</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">289</span><span style="color:#ABB2BF;">); </span><span style="color:#7F848E;font-style:italic;">// 改动四：设置tiemoutCount值</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">ApplicationContext</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">getAlert</span><span style="color:#ABB2BF;">().</span><span style="color:#61AFEF;">check</span><span style="color:#ABB2BF;">(apiStatInfo);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>我们要想添加新的告警逻辑，只需要基于扩展的方式创建新的 handler 类即可，不需要改动原来的 check() 函数的逻辑。而且，我们只需要为新的 handler 类添加单元测试，老的单元测试都不会失败，也不用修改。</p><p>改动一，添加属性和方法相当于修改类，在类这个层面，这个代码改动可以被认定为“修改”；但这个代码改动并没有修改已有的属性和方法，在方法（及其属性）这一层面，它又可以被认定为“扩展”,这条原则的设计初衷：只要它没有破坏原有的代码的正常运行，没有破坏原有的单元测试，我们就可以说，这是一个合格的代码改动</p><p>改动三和改动四,这两处改动都是在方法内部进行的，不能算是“扩展”，而是地地道道的“修改”。然而，在重构之后的 Alert 代码中，核心逻辑集中在 Alert 类及其各个 handler 中，当需要添加新的警告逻辑时，Alert 类完全不需要修改，只需要扩展一个新的 handler 类。因此，如果我们把 Alert 类及各个 handler 类合起来看作一个“模块”，那么模块本身在添加新的功能时，完全满足开闭原则。</p><h2 id="案例二" tabindex="-1">案例二 <a class="header-anchor" href="#案例二" aria-label="Permalink to &quot;案例二&quot;">​</a></h2><p>我们代码中通过 Kafka 来发送异步消息。对于这样一个功能的开发，我们要学会将其抽象成一组跟具体消息队列（Kafka）无关的异步消息接口。所有上层系统都依赖这组抽象的接口编程，并且通过依赖注入的方式来调用。当我们要替换新的消息队列的时候，比如将 Kafka 替换成 RocketMQ，可以很方便地拔掉老的消息队列实现，插入新的消息队列实现。具体代码如下所示</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 这一部分体现了抽象意识</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">interface</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageQueue</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">//... }</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">KafkaMessageQueue</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">implements</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageQueue</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">//... }</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">RocketMQMessageQueue</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">implements</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageQueue</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">interface</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageFromatter</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">//... }</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">JsonMessageFromatter</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">implements</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageFromatter</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//...}</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ProtoBufMessageFromatter</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">implements</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageFromatter</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#7F848E;font-style:italic;">//...}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Demo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">MessageQueue</span><span style="color:#E06C75;"> msgQueue</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#7F848E;font-style:italic;">// 基于接口而非实现编程</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> Demo</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">MessageQueue</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">msgQueue</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{ </span><span style="color:#7F848E;font-style:italic;">// 依赖注入</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">msgQueue</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> msgQueue;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#7F848E;font-style:italic;">// msgFormatter：多态、依赖注入</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> sendNotification</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Notification</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">notification</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">MessageFormatter</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">msgFormatter</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...    </span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>添加一个新功能，不可能任何模块、类、方法的代码都不“修改”，这个是做不到的。类需要创建、组装、并且做一些初始化操作，才能构建成可运行的的程序，这部分代码的修改是在所难免的。我们要做的是尽量让修改操作更集中、更少、更上层，尽量让最核心、最复杂的那部分逻辑代码满足开闭原则。</p><p>开闭原则是判断一段代码是否易扩展的“金标准”，如果一段代码能够做到“对扩展开放、对修改关闭”，那就说明这段代码的扩展性比较好。为了写出扩展性好的代码，我们要时刻具备扩展意识、抽象意识、封装意识，多花点时间往前多思考一下，留好扩展点，以便在未来需求变更的时候，新的代码能够很灵活地插入到扩展点上，做到“对扩展开放、对修改关闭”。在识别出代码可变部分和不可变部分之后，我们要将可变部分封装起来，隔离变化，提供抽象化的不可变接口，给上层系统使用。当具体的实现发生变化的时候，我们只需要基于相同的抽象接口，扩展一个新的实现，替换掉老的实现即可，上游系统的代码几乎不需要修改。多态、依赖注入、基于接口而非实现编程，以及大部分的设计模式（比如，装饰、策略、模板、职责链、状态等）都是常用来提高代码扩展性的方法。</p><h2 id="文章给的建议" tabindex="-1">文章给的建议 <a class="header-anchor" href="#文章给的建议" aria-label="Permalink to &quot;文章给的建议&quot;">​</a></h2><p>如果开发的是一个业务导向的系统，比如金融系统、电商系统、物流系统等，要想识别出尽可能多的扩展点，就要对业务有足够的了解，能够知道当下以及未来可能要支持的业务需求。如果你开发的是跟业务无关的、通用的、偏底层的系统，比如，框架、组件、类库，你需要了解“它们会被如何使用？今后你打算添加哪些功能？使用者未来会有哪些更多的功能需求？”等问题。</p><p>开发人员应该仅对程序中呈现出现频繁变化的那些部分做出抽象，然而对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意，拒绝不成熟的抽象和抽象本身一样重要。开闭原则，可以保证以前代码的正确性，因为没有修改以前代码，所以可以保证开发人员专注于将设计放在新扩展的代码上。</p><p>为了写出支持“对扩展开放、对修改关闭”的代码，我们需要预留扩展点，但是不可能识别出所有可能的扩展点，因此需要在编写代码的时候，对一些比较确定的、短期内可能就会扩展、或者需求改动对代码结构影响比较大的情况、或者实现成本不高的扩展点进行扩展性设计。对于一些不确定未来是否要支持的需求，或者实现起来比较复杂的扩展点，我们可以等到有需求驱动的时候，再通过重构代码的方式来支持扩展的需求。同时，我们也需要在扩展性和可读性之间做出权衡，根据实际的应用场景来决定。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://time.geekbang.org/column/article/176075" target="_blank" rel="noreferrer">理论二：如何做到“对扩展开放、修改关闭”？扩展和修改各指什么？</a></p><p><a href="https://geek-docs.com/design-pattern/design-principle/open-close-principle.html" target="_blank" rel="noreferrer">开闭原则OCP</a></p>`,51),e=[o];function t(r,c,B,y,i,F){return n(),a("div",null,e)}const E=s(p,[["render",t]]);export{C as __pageData,E as default};
