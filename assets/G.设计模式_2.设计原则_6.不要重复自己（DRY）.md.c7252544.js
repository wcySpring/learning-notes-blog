import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const C=JSON.parse('{"title":"","description":"即不要重复自己。这个原则的核心思想是，避免在代码中重复相同的逻辑或代码段","frontmatter":{"description":"即不要重复自己。这个原则的核心思想是，避免在代码中重复相同的逻辑或代码段"},"headers":[],"relativePath":"G.设计模式/2.设计原则/6.不要重复自己（DRY）.md","filePath":"G.设计模式/2.设计原则/6.不要重复自己（DRY）.md","lastUpdated":1690115031000}'),p={name:"G.设计模式/2.设计原则/6.不要重复自己（DRY）.md"},o=l(`<p>DRY 原则。它的英文描述为：Don’t Repeat Yourself。中文直译为：不要重复自己。将它应用在编程中，可以理解为：不要写重复的代码</p><p>这个原则的核心思想是，避免在代码中重复相同的逻辑或代码段，而是应该将这些逻辑或代码段抽象出来，封装成可复用的函数或类。这样可以减少代码的冗余，提高代码的可维护性和可读性。</p><p>这个原则最主要的使用是要区分 什么样子的算是重复的代码，是否是两段一模一样的代码就算重复代码么？</p><p>DRY 原则的核心思想是避免在代码中重复相同的逻辑或代码段，而不是简单地避免写一模一样的代码。因此，即使两段代码看起来完全相同，<strong>如果它们的逻辑或用途不同，它们也不应该被视为重复的代码</strong>。在编写代码时，我们应该根据代码的逻辑和用途来判断是否需要将其抽象出来，封装成可复用的函数或类。</p><h2 id="实现逻辑重复" tabindex="-1">实现逻辑重复 <a class="header-anchor" href="#实现逻辑重复" aria-label="Permalink to &quot;实现逻辑重复&quot;">​</a></h2><p>下面代码中 isValidUserName() 函数和 isValidPassword() 函数 代码内容一摸一样是否就是违背 DRY 原则呢</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserAuthenticator</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> authenticate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isValidUsername</span><span style="color:#ABB2BF;">(username)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ...throw InvalidUsernameException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isValidPassword</span><span style="color:#ABB2BF;">(password)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ...throw InvalidPasswordException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...省略其他代码...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> isValidUsername</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">username</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// check not null, not empty</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isBlank</span><span style="color:#ABB2BF;">(username)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// check length: 4~64</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (length </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> length </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">64</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// contains only lowcase characters</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAllLowerCase</span><span style="color:#ABB2BF;">(username)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// contains only a~z,0~9,dot</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> length; ++i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">username</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(c </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> c </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;z&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (c </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> c </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;9&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> c </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> isValidPassword</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// check not null, not empty</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isBlank</span><span style="color:#ABB2BF;">(password)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// check length: 4~64</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">length</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">length</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (length </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> length </span><span style="color:#56B6C2;">&gt;</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">64</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// contains only lowcase characters</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isAllLowerCase</span><span style="color:#ABB2BF;">(password)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">// contains only a~z,0~9,dot</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">for</span><span style="color:#ABB2BF;"> (</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">i</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">; i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#ABB2BF;"> length; ++i) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">char</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">c</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">charAt</span><span style="color:#ABB2BF;">(i);</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">(c </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;a&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> c </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;z&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> (c </span><span style="color:#56B6C2;">&gt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;0&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> c </span><span style="color:#56B6C2;">&lt;=</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;9&#39;</span><span style="color:#ABB2BF;">) </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> c </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">      }</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>如果认为是违背了 将代码重新改造后，发现代码行数减少了，但光从重构的名字上来看发现，isValidUserNameOrPassword() 函数，负责两件事情：验证用户名和验证密码，违反了“单一职责原则”和“接口隔离原则”</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserAuthenticatorV2</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> authenticate</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">userName</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isValidUsernameOrPassword</span><span style="color:#ABB2BF;">(userName)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ...throw InvalidUsernameException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#61AFEF;">isValidUsernameOrPassword</span><span style="color:#ABB2BF;">(password)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ...throw InvalidPasswordException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> isValidUsernameOrPassword</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">usernameOrPassword</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//省略实现逻辑</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//跟原来的isValidUsername()或isValidPassword()的实现逻辑一样...</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>从业务本质来看isValidUserName() 和 isValidPassword() 两个函数，虽然从代码实现逻辑上看起来是重复的，但是从语义上并不重复。所谓“语义不重复”指的是：从功能上来看，这两个函数干的是完全不重复的两件事情，一个是校验用户名，另一个是校验密码。尽管在目前的设计中，两个校验逻辑是完全一样的，但如果按照第二种写法，将两个函数的合并，那就会存在潜在的问题。在未来的某一天，如果我们修改了密码的校验逻辑，比如，允许密码包含大写字符，允许密码的长度为 8 到 64 个字符，那这个时候，isValidUserName() 和 isValidPassword() 的实现逻辑就会不相同。我们就要把合并后的函数，重新拆成合并前的那两个函数。</p><p><strong>尽管代码的实现逻辑是相同的，但语义不同，我们判定它并不违反 DRY 原则</strong></p><h2 id="功能语义重复" tabindex="-1">功能语义重复 <a class="header-anchor" href="#功能语义重复" aria-label="Permalink to &quot;功能语义重复&quot;">​</a></h2><p>在日常工作的时候你会遇到，一个相同的业务，被两个不同的同事去实现了，尽管他们起的方法名不同，举个例子在同一个项目代码中有下面两个函数：isValidIp() 和 checkIfIpValid()。尽管两个函数的命名不同，实现逻辑不同，但功能是相同的，都是用来判定 IP 地址是否合法的。</p><p>通过代码可以发现两个同事用了完全不同的方法去现实了一个相同的业务，校验ip ，上一个例子是代码实现逻辑重复，但语义不重复，我们并不认为它违反了 DRY 原则。<strong>而在这个例子中，尽管两段代码的实现逻辑不重复，但语义重复，也就是功能重复，我们认为它违反了 DRY 原则</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">isValidIp</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> ipAddress) {</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isBlank</span><span style="color:#ABB2BF;">(ipAddress)</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> regex </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&quot;^(1</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d{2}|2[0-4]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|25[0-5]|[1-9]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|[1-9])</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">.&quot;</span></span>
<span class="line"><span style="color:#E06C75;">          </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&quot;(1</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d{2}|2[0-4]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|25[0-5]|[1-9]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d)</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">.&quot;</span></span>
<span class="line"><span style="color:#E06C75;">          </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&quot;(1</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d{2}|2[0-4]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|25[0-5]|[1-9]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d)</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">.&quot;</span></span>
<span class="line"><span style="color:#E06C75;">          </span><span style="color:#56B6C2;">+</span><span style="color:#E06C75;"> </span><span style="color:#98C379;">&quot;(1</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d{2}|2[0-4]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|25[0-5]|[1-9]</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d|</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">d)$&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">ipAddress</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">matches</span><span style="color:#ABB2BF;">(regex);</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">checkIfIpValid</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> ipAddress) {</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">isBlank</span><span style="color:#ABB2BF;">(ipAddress)</span><span style="color:#E06C75;">) </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;">[] ipUnits </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">StringUtils</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">split</span><span style="color:#ABB2BF;">(ipAddress, </span><span style="color:#98C379;">&#39;.&#39;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">ipUnits</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">length</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">!=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">4</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">for</span><span style="color:#E06C75;"> (</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> i </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">4</span><span style="color:#ABB2BF;">;</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">++</span><span style="color:#E06C75;">i) {</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> ipUnitIntValue</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">try</span><span style="color:#E06C75;"> {</span></span>
<span class="line"><span style="color:#E06C75;">      ipUnitIntValue </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Integer</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">parseInt</span><span style="color:#ABB2BF;">(ipUnits[i]);</span></span>
<span class="line"><span style="color:#E06C75;">    } </span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">NumberFormatException</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (ipUnitIntValue </span><span style="color:#56B6C2;">&lt;</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">||</span><span style="color:#E06C75;"> ipUnitIntValue </span><span style="color:#56B6C2;">&gt;</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">255</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">if</span><span style="color:#E06C75;"> (i </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#E06C75;"> ipUnitIntValue </span><span style="color:#56B6C2;">==</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">0</span><span style="color:#E06C75;">) {</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    }</span></span>
<span class="line"><span style="color:#E06C75;">  }</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>这类代码最容产生的问题就是，假设我们不统一实现思路，那有些地方调用了 isValidIp() 函数，有些地方又调用了 checkIfIpValid() 函数，这就会导致代码看起来很奇怪，相当于给代码“埋坑”，给不熟悉这部分代码的同事增加了阅读的难度。同事有可能研究了半天，觉得功能是一样的，但又有点疑惑，觉得是不是有更高深的考量，才定义了两个功能类似的函数，最终发现居然是代码设计的问题。除此之外，如果哪天项目中 IP 地址是否合法的判定规则改变了，比如：255.255.255.255 不再被判定为合法的了，相应地，我们对 isValidIp() 的实现逻辑做了相应的修改，但却忘记了修改 checkIfIpValid() 函数。又或者，我们压根就不知道还存在一个功能相同的 checkIfIpValid() 函数，这样就会导致有些代码仍然使用老的 IP 地址判断逻辑，导致出现一些莫名其妙的 bug</p><h2 id="代码执行重复" tabindex="-1">代码执行重复 <a class="header-anchor" href="#代码执行重复" aria-label="Permalink to &quot;代码执行重复&quot;">​</a></h2><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserService</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserRepo</span><span style="color:#E06C75;"> userRepo</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//通过依赖注入或者IOC框架注入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#61AFEF;"> login</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">boolean</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">existed</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">userRepo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">checkIfUserExisted</span><span style="color:#ABB2BF;">(email, password);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#ABB2BF;">existed) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw AuthenticationFailureException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">userRepo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserByEmail</span><span style="color:#ABB2BF;">(email);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> user;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserRepo</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> checkIfUserExisted</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">EmailValidation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(email)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw InvalidEmailException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">PasswordValidation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(password)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw InvalidPasswordException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...query db to check if email&amp;password exists...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#61AFEF;"> getUserByEmail</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">EmailValidation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(email)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw InvalidEmailException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...query db to get user by email...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>这段代码中存在代码执行重复的问题。在 UserRepo 类中，checkIfUserExisted() 和 getUserByEmail() 方法中都有对 email 参数的有效性进行验证的代码，这段代码重复了。因为 checkIfUserExisted() 函数和 getUserByEmail() 函数都需要查询数据库，而数据库这类的 I/O 操作是比较耗时的。我们在写代码的时候，应当尽量减少这类 I/O 操作。重新设计后</p><p>移除“重复执行”的代码，只校验一次 email 和 password，并且只查询一次数据库。我们只需要将校验逻辑从 UserRepo 中移除，统一放到 UserService 中就可以，来进行校验。重构之后的代码如下所示：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserService</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserRepo</span><span style="color:#E06C75;"> userRepo</span><span style="color:#ABB2BF;">;</span><span style="color:#7F848E;font-style:italic;">//通过依赖注入或者IOC框架注入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#61AFEF;"> login</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">EmailValidation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(email)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw InvalidEmailException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">PasswordValidation</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">validate</span><span style="color:#ABB2BF;">(password)) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw InvalidPasswordException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#E5C07B;">User</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">user</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">userRepo</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getUserByEmail</span><span style="color:#ABB2BF;">(email);</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (user </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">!</span><span style="color:#E5C07B;">password</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">user</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getPassword</span><span style="color:#ABB2BF;">()) {</span></span>
<span class="line"><span style="color:#ABB2BF;">      </span><span style="color:#7F848E;font-style:italic;">// ... throw AuthenticationFailureException...</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> user;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">class</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">UserRepo</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> checkIfUserExisted</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">password</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...query db to check if email&amp;password exists</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">User</span><span style="color:#61AFEF;"> getUserByEmail</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">email</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">    </span><span style="color:#7F848E;font-style:italic;">//...query db to get user by email...</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="提高代码复用性" tabindex="-1">提高代码复用性 <a class="header-anchor" href="#提高代码复用性" aria-label="Permalink to &quot;提高代码复用性&quot;">​</a></h2><ol><li><p>减少代码耦合：减少代码之间的依赖关系，尽量让代码之间解耦，这样可以避免修改一个功能时影响到其他相关的代码。</p></li><li><p>满足单一职责原则：将模块、类设计得足够小，职责足够单一，这样可以减少模块之间的依赖关系，提高代码的复用性。</p></li><li><p>模块化：将功能独立的代码封装成模块，这样可以提高代码的通用性，便于复用。</p></li><li><p>业务与非业务逻辑分离：将业务逻辑和非业务逻辑代码分离，抽取成一些通用的框架、类库、组件等，这样可以提高代码的复用性。</p></li><li><p>通用代码下沉：将通用的代码下沉到更下层，这样可以避免交叉调用导致调用关系混乱，提高代码的复用性。</p></li><li><p>继承、多态、抽象、封装：利用面向对象特性，如继承、多态、抽象、封装等，可以提高代码的复用性。</p></li><li><p>使用函数式编程：函数式编程强调函数的复用性和组合性，通过将函数作为一等公民来实现代码的复用和组合。</p></li><li><p>使用库和框架：使用现有的库和框架可以大大提高代码的复用性，避免重复造轮子。</p></li></ol><p>编写可复用代码并不简单，特别是在没有具体复用需求的情况下，需要去预测将来代码会如何复用，这是一项挑战性很高的任务。因此，除非有非常明确的复用需求，否则，在第一次编写代码的时候花费太多的时间和精力去开发可复用的代码，并不是一个值得推荐的做法，这也违反了YAGNI原则。另外，有一个著名的原则叫作“Rule of Three”，即在第三次复用相似的代码之前，不要去开发可复用的代码。因此，在第一次编写代码的时候，我们可以不考虑复用性，而在第二次遇到复用场景的时候，再进行重构，让其变得更加可复用。这样可以减少开发成本，提高开发效率。<strong>“Rule of Three”中的“Three”并不是真的就指确切的“三”，这里就是指“二”。</strong></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://time.geekbang.org/column/article/179607" target="_blank" rel="noreferrer">理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？</a></p>`,26),e=[o];function r(c,t,B,y,i,F){return n(),a("div",null,e)}const b=s(p,[["render",r]]);export{C as __pageData,b as default};
