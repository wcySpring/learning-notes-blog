import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const m=JSON.parse('{"title":"","description":"装饰器了解","frontmatter":{"description":"装饰器了解"},"headers":[],"relativePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/1.装饰器.md","filePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/1.装饰器.md","lastUpdated":1718893054000}'),p={name:"A.前端知识整理/4.前端ES新语法记录/4.装饰器/1.装饰器.md"},e=l(`<p>装饰器是一种在不修改现有代码的前提下，动态地为对象增加功能的设计模式。它通常用于编程语言中来扩展函数、方法或类的行为。装饰器可以看作是某种包装，使原本的功能可以额外运行一些代码。</p><p>装饰器（Decorator）其实是面向对象中的概念，在一些纯粹的面向对象的类型语言中早就有装饰器的内容了，在java中叫注解，在C#中叫特征</p><h2 id="ts-js-装饰的种类" tabindex="-1">TS/JS 装饰的种类 <a class="header-anchor" href="#ts-js-装饰的种类" aria-label="Permalink to &quot;TS/JS 装饰的种类&quot;">​</a></h2><p>装饰器并不是Typescript新引出的概念，是JavaScript本身就支持的内容。2024年，也才刚刚进展到第3阶段不久,现在ts5 自动支持 第三提案，但是现在大部分的 前端库依旧还是 js 的第二提案</p><ul><li>JS 配置 <code>babel</code> 开启装饰器提案</li><li>TS 配置 tsconfig.json <code>experimentalDecorators:true</code> 开启装饰器</li></ul><h2 id="解决的问题" tabindex="-1">解决的问题 <a class="header-anchor" href="#解决的问题" aria-label="Permalink to &quot;解决的问题&quot;">​</a></h2><p>还是要提到<strong>Metadata（元数据）</strong>，简单的说，就是为真正的数据提供额外的信息。例如，如果一个变量表示一个数组，那么数组的length就是其元数据。相似的，数组中的每个元素是数据的话，那么数据类型就是其元数据。更加宽泛的讲，元数据不仅仅是编程中的概念，它能够帮助我们更快的实现一些事情</p><p>装饰器就是可以装饰器，能够带来额外的信息量，可以达到分离关注点的目的。</p><ul><li>信息书写位置的问题</li><li>重复代码的问题</li></ul><p>上述两个问题产生的根源：某些信息，在定义时，能够附加的信息量有限。</p><p>装饰器的作用：为某些属性、类、参数、方法提供元数据信息(metadata)</p><p>下看看通过其他方式达到装饰器思路的方法</p><h3 id="装饰器模式" tabindex="-1">装饰器模式 <a class="header-anchor" href="#装饰器模式" aria-label="Permalink to &quot;装饰器模式&quot;">​</a></h3><p>装饰器模式是一种设计模式，通过这中设计模式来看装饰器所带来的好处，我们在开发过程中想给对象动态地增加职责的并且还能在不改变对象自身的基础上，在程序运行期间给对象 动态地添加职责。</p><p>现在想象一下有一个功能需要扩展，但是我们设想的是不影响原有的设计功能，因为对原因代码的改动带来的风险都是未知的，如果是面向对象的思路最简的方案 <strong>继承方式</strong> 但这种方式所带来的问题</p><ul><li>如果直接修改这个类，会违反开闭原则（OCP：对扩展开放，对修改关闭）。装饰器模式提供了一种不修改原始类而增加功能的方法。</li><li>如果我们通过继承来增加功能，每增加一个功能就需要增加一个子类，功能越多，类的数量就会急剧增加，导致类爆炸问题。</li></ul><p>如果利用装饰器 <strong>即用即付</strong> 的方式也是这类问题解决方案</p><ul><li>需要扩展一个类的功能，或给一个类添加附加职责，但不希望通过继承来实现。</li><li>动态地为一个对象添加功能，这些功能可以在运行时根据需要进行添加或撤销。</li><li>需要对一些基本功能进行扩展，并且可以组合这些功能来产生更复杂的行为。</li></ul><h3 id="装饰器模式思路解决问题" tabindex="-1">装饰器模式思路解决问题 <a class="header-anchor" href="#装饰器模式思路解决问题" aria-label="Permalink to &quot;装饰器模式思路解决问题&quot;">​</a></h3><p>现在我们有一个简单的逻辑推导，我们有一个 飞机模型 它可以射出子弹。但是在开发初期我们没有想过随着业务的扩展我们可能需要飞机发射导弹、原子弹等其他功能。为了保持代码的灵活性和可维护性，可能不同开发开始出现了不同思路解决</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Plane</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射普通子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> plane</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Plane</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="不恰当的方式一-直接修改原始类" tabindex="-1">不恰当的方式一 -- 直接修改原始类 <a class="header-anchor" href="#不恰当的方式一-直接修改原始类" aria-label="Permalink to &quot;不恰当的方式一 -- 直接修改原始类&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Plane</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射普通子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fireMissiles</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fireAtoms</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fireMissiles</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射导弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fireAtoms</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射原子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> plane</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Plane</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹、发射导弹、发射原子弹</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这类产生的问题</p><ul><li><strong>违反单一职责原则</strong>：一个类承担了太多职责，导致代码难以维护。 因为站在其他角度来看飞机并不是所有的都可以进行原子弹的发射</li><li><strong>不符合开闭原则</strong>：每次增加新功能都需要修改原始类，容易引入新的错误</li></ul><h4 id="不恰当的方式二-使用全局变量或标志位" tabindex="-1">不恰当的方式二 -- 使用全局变量或标志位 <a class="header-anchor" href="#不恰当的方式二-使用全局变量或标志位" aria-label="Permalink to &quot;不恰当的方式二 -- 使用全局变量或标志位&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Plane</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射普通子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (Plane.</span><span style="color:#E45649;">enableMissiles</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">            console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射导弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;"> (Plane.</span><span style="color:#E45649;">enableAtoms</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">            console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射原子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">Plane.</span><span style="color:#E45649;">enableMissiles</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">Plane.</span><span style="color:#E45649;">enableAtoms</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> plane</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Plane</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹、发射导弹、发射原子弹</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ul><li><strong>全局变量污染</strong>：容易造成全局变量污染，难以调试和维护。</li><li><strong>不灵活</strong>：功能的启用和禁用通过全局变量控制，难以在不同实例之间进行控制。（当然你可以采用不使用静态方法的形式去在类中定义改变但依旧违反了违反单一职责原则）</li></ul><h4 id="不恰当的方式三-链式调用硬编码" tabindex="-1">不恰当的方式三 -- 链式调用硬编码 <a class="header-anchor" href="#不恰当的方式三-链式调用硬编码" aria-label="Permalink to &quot;不恰当的方式三 -- 链式调用硬编码&quot;">​</a></h4><p>链式调用的这种形式本质上已经比上面的思路更好 更加符合最开始说的到装饰器的思路通过组合附加在不影响原有类的情况下进行编程开发</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Plane</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射普通子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> PlaneWithMissiles</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(plane) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> plane;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射导弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> PlaneWithMissilesAndAtoms</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(plane) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> plane;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射原子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> plane</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Plane</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> planeWithMissiles</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> PlaneWithMissiles</span><span style="color:#383A42;">(plane);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> planeWithMissilesAndAtoms</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> PlaneWithMissilesAndAtoms</span><span style="color:#383A42;">(planeWithMissiles);</span></span>
<span class="line"><span style="color:#383A42;">planeWithMissilesAndAtoms.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹、发射导弹、发射原子弹</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><ul><li>功能组合固定，难以动态调整</li><li>每增加一种组合功能就需要创建新的类，类数量迅速增加（这里指的是特定形式的类编写，只有飞机能发射导弹，但如果坦克也能发射呢）</li></ul><h4 id="使用装饰器模式的实现解决问题" tabindex="-1">使用装饰器模式的实现解决问题 <a class="header-anchor" href="#使用装饰器模式的实现解决问题" aria-label="Permalink to &quot;使用装饰器模式的实现解决问题&quot;">​</a></h4><p>通过装饰器模式，我们将功能扩展和组合的过程简化了，使得代码更加灵活和易于维护。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Plane</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射普通子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MissileDecorator</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(plane) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> plane;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射导弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> AtomDecorator</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(plane) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> plane;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射原子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> LaserDecorator</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(plane) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> plane;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">plane</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射激光&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> plane </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Plane</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 添加发射导弹功能</span></span>
<span class="line"><span style="color:#383A42;">plane </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> MissileDecorator</span><span style="color:#383A42;">(plane);</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹、发射导弹</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 添加发射原子弹功能</span></span>
<span class="line"><span style="color:#383A42;">plane </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> AtomDecorator</span><span style="color:#383A42;">(plane);</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹、发射导弹、发射原子弹</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p>通过以上步骤，我们展示了如何使用装饰器模式来动态地扩展飞机模型的功能。装饰器模式使得我们可以在不修改现有类的情况下，灵活地添加新功能，符合开闭原则，提高了代码的可维护性和扩展性。</p><p>如果未来有更多的功能需求，只需要创建新的装饰器类，并按照上述方式应用即可。这样的方法不仅保持了代码的清晰和简洁，还提供了极大的灵活性。</p><h4 id="在来一个装饰器的对比案例" tabindex="-1">在来一个装饰器的对比案例 <a class="header-anchor" href="#在来一个装饰器的对比案例" aria-label="Permalink to &quot;在来一个装饰器的对比案例&quot;">​</a></h4><ol><li><strong>SimpleMessage</strong> 类实现了基础的消息功能，它有一个 <code>getContent</code> 方法返回原始消息内容。</li><li><strong>MessageDecorator</strong> 类是一个抽象的装饰器类，它持有一个消息对象，并通过调用这个对象的 <code>getContent</code> 方法来实现装饰功能。</li><li><strong>EncryptedMessageDecorator</strong> 和 <strong>CompressedMessageDecorator</strong> 类分别实现了加密和压缩功能，它们在调用基础消息对象的 <code>getContent</code> 方法后，分别对结果进行加密和压缩处理。</li><li>在使用时，可以将装饰器类组合起来，实现多重装饰功能，如先压缩后加密。</li></ol><p>首先，定义一个基础的消息类：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Message</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getContent</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;This method should be overridden&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> SimpleMessage</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Message</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(content) {</span></span>
<span class="line"><span style="color:#E45649;">    super</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">content</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> content;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  getContent</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">content</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>接下来，定义一个装饰器基类和具体的装饰器类：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MessageDecorator</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Message</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(message) {</span></span>
<span class="line"><span style="color:#E45649;">    super</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">message</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> message;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  getContent</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">message</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> EncryptedMessageDecorator</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> MessageDecorator</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getContent</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 简单的加密逻辑（反转字符串）</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">message</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">().</span><span style="color:#4078F2;">split</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;&#39;</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">reverse</span><span style="color:#383A42;">().</span><span style="color:#4078F2;">join</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> CompressedMessageDecorator</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> MessageDecorator</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getContent</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 简单的压缩逻辑（去掉空格）</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">message</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">().</span><span style="color:#4078F2;">replace</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">/</span><span style="color:#986801;">\\s</span><span style="color:#0184BC;">+/</span><span style="color:#A626A4;">g</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&#39;&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>最后，使用这些装饰器类来装饰我们的消息对象：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 创建一个简单的消息对象</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> message </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> SimpleMessage</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Hello World&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Original Message:&quot;</span><span style="color:#383A42;">, message.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用加密装饰器</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> encryptedMessage </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> EncryptedMessageDecorator</span><span style="color:#383A42;">(message);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Encrypted Message:&quot;</span><span style="color:#383A42;">, encryptedMessage.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用压缩装饰器</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> compressedMessage </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> CompressedMessageDecorator</span><span style="color:#383A42;">(message);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Compressed Message:&quot;</span><span style="color:#383A42;">, compressedMessage.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 组合使用加密和压缩装饰器</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> encryptedCompressedMessage </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> EncryptedMessageDecorator</span><span style="color:#383A42;">(compressedMessage);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Encrypted and Compressed Message:&quot;</span><span style="color:#383A42;">, encryptedCompressedMessage.</span><span style="color:#4078F2;">getContent</span><span style="color:#383A42;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>执行上述代码，你将看到以下输出：</p><div class="language-plaintext line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>Original Message: Hello World</span></span>
<span class="line"><span>Encrypted Message: dlroW olleH</span></span>
<span class="line"><span>Compressed Message: HelloWorld</span></span>
<span class="line"><span>Encrypted and Compressed Message: dlroWolleH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过这种方式，我们可以在不修改现有类的基础上，动态地为对象添加新的功能，体现了装饰器模式的灵活性和可扩展性。</p><ul><li>js 函数式编程思路</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 基础消息类</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> TextMessage</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(message) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">message</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> message;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  getText</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">message</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 高阶函数 - HTML装饰器</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> HtmlDecoratedClass</span><span style="color:#383A42;">(BaseClass) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> class</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> BaseClass</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    getText</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">      const</span><span style="color:#986801;"> originalText</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> super</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getText</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#50A14F;"> \`&lt;p&gt;</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">originalText</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">&lt;/p&gt;\`</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 高阶函数 - 加密装饰器</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> EncryptDecoratedClass</span><span style="color:#383A42;">(BaseClass) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> class</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> BaseClass</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    getText</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">      const</span><span style="color:#986801;"> originalText</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> super</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getText</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // 这里应该是你的加密逻辑</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">encrypt</span><span style="color:#383A42;">(originalText);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#4078F2;">    encrypt</span><span style="color:#383A42;">(msg) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // 简单处理加密</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#383A42;"> msg.</span><span style="color:#4078F2;">split</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;&quot;</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">reverse</span><span style="color:#383A42;">().</span><span style="color:#4078F2;">join</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用装饰器</span></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> DecoratedClass </span><span style="color:#0184BC;">=</span><span style="color:#4078F2;"> HtmlDecoratedClass</span><span style="color:#383A42;">(TextMessage);</span></span>
<span class="line"><span style="color:#383A42;">DecoratedClass </span><span style="color:#0184BC;">=</span><span style="color:#4078F2;"> EncryptDecoratedClass</span><span style="color:#383A42;">(DecoratedClass);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> messageInstance</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> DecoratedClass</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Hello World&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(messageInstance.</span><span style="color:#4078F2;">getText</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出被 HTML 格式化并加密的文本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h4 id="装饰器案例js动态语言独有的" tabindex="-1">装饰器案例js动态语言独有的 <a class="header-anchor" href="#装饰器案例js动态语言独有的" aria-label="Permalink to &quot;装饰器案例js动态语言独有的&quot;">​</a></h4><p>利用JavaScript的动态特性，可以在运行时修改对象的方法，达到扩展功能的目的。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> plane </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">    fire</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射普通子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#4078F2;"> missileDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射导弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#4078F2;"> atomDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;发射原子弹&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> originalFire </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> plane.</span><span style="color:#E45649;">fire</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#4078F2;">    originalFire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#4078F2;">    missileDecorator</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> decoratedFire </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> plane.</span><span style="color:#E45649;">fire</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#4078F2;">    decoratedFire</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#4078F2;">    atomDecorator</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">plane.</span><span style="color:#4078F2;">fire</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：发射普通子弹、发射导弹、发射原子弹</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="切面编程-aop" tabindex="-1">切面编程 AOP <a class="header-anchor" href="#切面编程-aop" aria-label="Permalink to &quot;切面编程 AOP&quot;">​</a></h3><p>AOP（Aspect-Oriented Programming，面向切面编程）是一种编程范式，它通过将跨切面关注点（cross-cutting concerns）与业务逻辑分离来提高代码的模块化。AOP 的主要目的是将那些与业务逻辑无关的功能（例如日志记录、安全、事务管理等）从核心业务逻辑中分离出来，从而使核心逻辑更加简洁和清晰。</p><ol><li><strong>切面（Aspect）</strong>：模块化的关注点，一个关注点可以是日志、安全、事务等。</li><li><strong>连接点（Join Point）</strong>：程序执行过程中的特定点，如方法调用、方法执行等。</li><li><strong>切入点（Pointcut）</strong>：定义一个或多个连接点，表示在何处插入切面的逻辑。</li><li><strong>通知（Advice）</strong>：在切入点执行的代码，可以在方法执行前（前置通知），方法执行后（后置通知）等。</li><li><strong>织入（Weaving）</strong>：将切面应用到目标对象以创建代理对象的过程。</li></ol><h4 id="aop-和装饰器模式的关系" tabindex="-1">AOP 和装饰器模式的关系 <a class="header-anchor" href="#aop-和装饰器模式的关系" aria-label="Permalink to &quot;AOP 和装饰器模式的关系&quot;">​</a></h4><p>AOP 和装饰器模式在某种程度上有相似之处，尤其是在增强对象功能方面。两者都可以在不修改对象本身的情况下，动态地为对象添加新的行为。但是，它们的关注点和实现方式有所不同：</p><ol><li><p><strong>关注点</strong>：</p><ul><li><strong>AOP</strong>：主要关注跨切面关注点的分离，如日志、安全等，强调的是切面和业务逻辑的分离。</li><li><strong>装饰器模式</strong>：主要用于动态地为对象添加职责，强调的是功能的增强和扩展。</li></ul></li><li><p><strong>实现方式</strong>：</p><ul><li><strong>AOP</strong>：通常通过框架（如 Spring AOP）实现，使用代理对象，在运行时通过定义切入点和通知来增强对象功能。</li><li><strong>装饰器模式</strong>：通过创建装饰器类，将对象包裹起来，并在装饰器类中扩展或增强对象的功能。</li></ul></li></ol><h4 id="javascript-中的-aop-实现" tabindex="-1">JavaScript 中的 AOP 实现 <a class="header-anchor" href="#javascript-中的-aop-实现" aria-label="Permalink to &quot;JavaScript 中的 AOP 实现&quot;">​</a></h4><p>在 JavaScript 中，我们可以通过函数重写的方式实现 AOP。以下是一个简单的 AOP 示例，展示如何在方法执行前后添加额外的行为：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#C18401;">Function</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">before</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(beforeFn) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> originalFn</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {</span></span>
<span class="line"><span style="color:#383A42;">        beforeFn.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> originalFn.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Function</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">after</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(afterFn) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> originalFn</span><span style="color:#0184BC;"> =</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {</span></span>
<span class="line"><span style="color:#A626A4;">        const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> originalFn.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">        afterFn.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> result;</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 示例函数</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#4078F2;"> greet</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Hello, </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 添加前置通知</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> greetWithLogging</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> greet.</span><span style="color:#4078F2;">before</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Logging: About to greet </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 添加后置通知</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> greetWithLoggingAndFarewell</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> greetWithLogging.</span><span style="color:#4078F2;">after</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Goodbye, </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行带有AOP通知的函数</span></span>
<span class="line"><span style="color:#4078F2;">greetWithLoggingAndFarewell</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Alice&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 输出：</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Logging: About to greet Alice</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Hello, Alice</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// Goodbye, Alice</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><h4 id="对比总结" tabindex="-1">对比总结 <a class="header-anchor" href="#对比总结" aria-label="Permalink to &quot;对比总结&quot;">​</a></h4><ul><li><p><strong>关注点分离</strong>：</p><ul><li><strong>AOP</strong>：专注于将非业务逻辑（如日志、事务）从业务逻辑中分离出来。</li><li><strong>装饰器模式</strong>：专注于动态地为对象添加功能和职责。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><strong>AOP</strong>：适用于需要在多个类或方法中添加相同的非功能性行为（如日志、安全）的场景。</li><li><strong>装饰器模式</strong>：适用于需要在运行时动态扩展对象功能的场景。</li></ul></li><li><p><strong>实现复杂度</strong>：</p><ul><li><strong>AOP</strong>：通常需要使用框架或库来实现，具有较高的学习成本和实现复杂度。</li><li><strong>装饰器模式</strong>：相对简单，通过创建装饰器类即可实现。</li></ul></li></ul><p>通过理解 AOP 和装饰器模式的区别和联系，可以更好地选择合适的方式来实现代码的增强和扩展，提高代码的模块化和可维护性。</p><h2 id="语言层面装饰器" tabindex="-1">语言层面装饰器 <a class="header-anchor" href="#语言层面装饰器" aria-label="Permalink to &quot;语言层面装饰器&quot;">​</a></h2><p>上面提过元数据，如果我们能将属性或者类的一些数据进行绑定成为元数据，在使用的时候获取这些元数据 举个例子我们经常做的表单验证</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> { </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 注意：严格检查(strict)不赋初始值会报错</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 演示可以设置 strictPropertyInitialization: false</span></span>
<span class="line"><span style="color:#383A42;">  loginId</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 必须是3-5个字符</span></span>
<span class="line"><span style="color:#383A42;">  loginPwd</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 必须是6-12个字符</span></span>
<span class="line"><span style="color:#383A42;">  age</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 必须是0-100之间的数字</span></span>
<span class="line"><span style="color:#383A42;">  gender</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;男&quot;</span><span style="color:#0184BC;"> |</span><span style="color:#50A14F;"> &quot;女&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  validate</span><span style="color:#383A42;">() { </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 对账号进行验证</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 对密码进行验证</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 对年龄进行验证</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // ...</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>当我们写这个类的属性的时候，对这个属性应该是最了解的。如果我们能在写属性的时候，就直接可以定义这些验证是最舒服的。因此能不能将这些校验规则绑定在属性上形成元数据</p><p>伪代码思路</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">@xxxx</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    @require</span></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">range</span><span style="color:#383A42;">(</span><span style="color:#986801;">3</span><span style="color:#383A42;">,</span><span style="color:#986801;">5</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    @</span><span style="color:#4078F2;">description</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;账号&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">    loginid</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">//描述是：账号，验证规则：1.必填，2.必须是3-5个字符</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">    loginpwd</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">//必须是6-12个字符</span></span>
<span class="line"><span style="color:#383A42;">    age</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">//必须是0-100之间的数字</span></span>
<span class="line"><span style="color:#383A42;">    gender</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;男&quot;</span><span style="color:#0184BC;"> |</span><span style="color:#50A14F;"> &quot;女&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Article</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    title</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">//长度必须是4-20个字符</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * 统一的验证函数</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> * </span><span style="color:#383A42;font-style:italic;">@</span><span style="color:#A626A4;font-style:italic;">param</span><span style="color:#E45649;font-style:italic;"> obj</span><span style="color:#A0A1A7;font-style:italic;"> </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> validate</span><span style="color:#383A42;">(obj</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> object</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    for</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">const</span><span style="color:#986801;"> key</span><span style="color:#A626A4;"> in</span><span style="color:#383A42;"> obj) {</span></span>
<span class="line"><span style="color:#A626A4;">        const</span><span style="color:#986801;"> val</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (obj as </span><span style="color:#0184BC;">any</span><span style="color:#383A42;">)[key];</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">        //缺少该属性的验证规则</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>`,71),o=[e];function r(c,t,i,y,A,b){return a(),n("div",null,o)}const d=s(p,[["render",r]]);export{m as __pageData,d as default};
