import{_ as s,c as n,o as a,a8 as l,ae as p,af as e}from"./chunks/framework.6k5lawSO.js";const g=JSON.parse('{"title":"","description":"创建js 对象","frontmatter":{"description":"创建js 对象"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/5.面向对象/2.创建js对象.md","filePath":"A.前端知识整理/2.JS基础/5.面向对象/2.创建js对象.md","lastUpdated":1718635980000}'),o={name:"A.前端知识整理/2.JS基础/5.面向对象/2.创建js对象.md"},r=l(`<p>在JavaScript中，有多种创建对象的方式，每种方式都有其优缺点。主要包括字面量创建对象、工厂函数、以及构造函数。以下是对这几种方式的总结：</p><h4 id="_1-字面量创建对象" tabindex="-1">1. 字面量创建对象 <a class="header-anchor" href="#_1-字面量创建对象" aria-label="Permalink to &quot;1. 字面量创建对象&quot;">​</a></h4><p>利用字面量形式，手动创建对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;Alice&#39;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    age</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 25</span></span>
<span class="line"><span style="color:#383A42;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>优点</strong>：</p><ul><li>简洁直接</li></ul><p><strong>弊端</strong>：</p><ul><li>当需要创建多个相同结构的对象时，需要编写重复的代码。</li></ul><h4 id="_2-工厂函数" tabindex="-1">2. 工厂函数 <a class="header-anchor" href="#_2-工厂函数" aria-label="Permalink to &quot;2. 工厂函数&quot;">​</a></h4><p>通过封装一个函数，批量创建对象。</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> createPerson</span><span style="color:#383A42;">(name, age) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> person</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {};</span></span>
<span class="line"><span style="color:#383A42;">    person.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">    person.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> age;</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> person;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p1</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> createPerson</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;w&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">15</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p2</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> createPerson</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;ww&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">155</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>优点</strong>：</p><ul><li>允许批量创建对象，减少代码重复。</li></ul><p><strong>弊端</strong>：</p><ul><li>在打印对象时，对象的类型都是<code>Object</code>类型，不能明确区分出用哪个工厂函数创建的对象。</li></ul><h4 id="_3-构造函数" tabindex="-1">3. 构造函数 <a class="header-anchor" href="#_3-构造函数" aria-label="Permalink to &quot;3. 构造函数&quot;">​</a></h4><p>构造函数在JavaScript中扮演了其他语言中类的角色，通过<code>new</code>关键字创建对象。</p><p><strong>Java中的构造函数</strong>：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> Person </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#4078F2;">    Person</span><span style="color:#383A42;">() { </span><span style="color:#A0A1A7;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#E45649;">        System</span><span style="color:#383A42;">.</span><span style="color:#E45649;">out</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">println</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;无参的构造方法&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>JavaScript中的构造函数和类</strong>：</p><ul><li><strong>ES5方式</strong>：</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(name, age) { </span><span style="color:#A0A1A7;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> age;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;w&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">15</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;ww&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">155</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><strong>ES6方式</strong>：</li></ul><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(name, age) { </span><span style="color:#A0A1A7;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> age;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p1</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;w&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">15</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p2</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;ww&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">155</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>优点</strong>：</p><ul><li>使用<code>new</code>关键字创建对象时，能够明确对象的类型。</li><li>支持面向对象编程的很多特性（如继承、方法定义等）。</li></ul><h2 id="手动实现一个-new-语法糖" tabindex="-1">手动实现一个 new 语法糖 <a class="header-anchor" href="#手动实现一个-new-语法糖" aria-label="Permalink to &quot;手动实现一个 new 语法糖&quot;">​</a></h2><p>利用工厂函数创建对象，因此可以发现下面手动实现一个new ，其中new 很像一个构造函数语法糖</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> createPerson</span><span style="color:#383A42;">(name,age){</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> per</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {}</span></span>
<span class="line"><span style="color:#383A42;">	per.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name</span></span>
<span class="line"><span style="color:#383A42;">	per.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;">age</span></span>
<span class="line"><span style="color:#A626A4;">	return</span><span style="color:#383A42;"> per</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p1</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> createPerson</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;w&#39;</span><span style="color:#383A42;">,</span><span style="color:#986801;">15</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p2</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> createPerson</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;ww&#39;</span><span style="color:#383A42;">,</span><span style="color:#986801;">155</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="了解-object-create" tabindex="-1">了解 Object.create <a class="header-anchor" href="#了解-object-create" aria-label="Permalink to &quot;了解 Object.create&quot;">​</a></h3><p><code>Object.create(proto,[propertiesObject])</code> 静态方法以一个现有对象作为原型，创建一个新对象,这是一种更直接地基于原型链实现继承的方式。它允许我们创建一个新对象，并将其原型直接指定为传入的对象。这种方式绕过了构造函数，为原型继承提供了一种更为灵活和低级别的控制。</p><ul><li><code>proto</code> ：要作为新对象原型的对象，或 null。</li><li><code>propertiesObject</code> (可选)：包含一个或多个属性描述符的对象，这些属性描述符将被添加到新对象中。这些属性对应于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties" target="_blank" rel="noreferrer">Object.defineProperties()</a> 的第二个参数</li></ul><p>通过 <code>Object.create</code> 实现原理其实可以看出来 <code>Object.create(proto, [propertiesObject])</code> 创建的新对象的内部 <code>[[Prototype]]</code> 其实链接的是传入参数 <code>proto</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 模拟一个 Object.create</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> simpleCreate</span><span style="color:#383A42;">(proto, props) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 创建一个空对象</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 设置新对象的原型为传入的proto</span></span>
<span class="line"><span style="color:#A626A4;">  if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">typeof</span><span style="color:#383A42;"> proto </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;object&#39;</span><span style="color:#0184BC;"> ||</span><span style="color:#0184BC;"> typeof</span><span style="color:#383A42;"> proto </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;function&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    obj.</span><span style="color:#E45649;">__proto__</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> proto; </span></span>
<span class="line"><span style="color:#383A42;">  } </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> TypeError</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Object prototype may only be an Object or null&#39;</span><span style="color:#383A42;">); </span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="原型链挂在对象" tabindex="-1">原型链挂在对象 <a class="header-anchor" href="#原型链挂在对象" aria-label="Permalink to &quot;原型链挂在对象&quot;">​</a></h4><p>当你使用 <code>Object.create(proto)</code> 时，所创建的新对象具有对 proto 的引用，它作为新对象的原型。在这个新对象上调用任何属性或方法时，如果该对象自身没有这个属性或方法，JavaScript 引擎会在它的原型（即 proto）中查找</p><p>dog 继承了 animal 可以用 animal 上的属性和方法</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> animal</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">    eats</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">		name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;">&#39;123&#39;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> dog</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(animal);</span></span>
<span class="line"><span style="color:#383A42;">dog.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;456&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(dog.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 456 指向自身的 并不会影响到原型链上的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(animal.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 123 并不会改变原型链上的</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(dog.</span><span style="color:#E45649;">eats</span><span style="color:#383A42;">);      </span><span style="color:#A0A1A7;font-style:italic;">// true, 因为在 dog 的原型链上有 eats 属性</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(dog.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// { eats: true }, 即 dog 的 __proto__ 是 animal 对象</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">(dog) </span><span style="color:#0184BC;">===</span><span style="color:#383A42;"> animal); </span><span style="color:#A0A1A7;font-style:italic;">// true, 验证 dog 的原型是 animal</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>创建出来的dog 对象 <code>dog.__proto__.animal.__proto__.Object</code><img src="`+p+`" alt=""></p><h4 id="挂在到构造函数上" tabindex="-1">挂在到构造函数上 <a class="header-anchor" href="#挂在到构造函数上" aria-label="Permalink to &quot;挂在到构造函数上&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">( name ){</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">(){</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 这里让o2对象的原型链指向了Person，并且给o2对象自己添加了个属性p</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    下面的写法等同于</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    const o2 = new Object()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    o2.__proto__ = Person.prototype</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    o2.p = 42</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    所以o2只是继承了Person.prototype原型链但是没有基础他的name属性</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    因此o2是没有name属性的</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#383A42;">o2 </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:#E45649;">    p</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">        value</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;">, </span></span>
<span class="line"><span style="color:#E45649;">        writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#383A42;">    } </span></span>
<span class="line"><span style="color:#383A42;">});</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果如图一</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(o2)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> per</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">o3 </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(per, {</span></span>
<span class="line"><span style="color:#E45649;">    p</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">        value</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 42</span><span style="color:#383A42;">, </span></span>
<span class="line"><span style="color:#E45649;">        writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">        configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;"> </span></span>
<span class="line"><span style="color:#383A42;">    } </span></span>
<span class="line"><span style="color:#383A42;">});</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 打印结果如图一</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(o3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p><img src="`+e+`" alt=""></p><h4 id="创建空对象" tabindex="-1">创建空对象 <a class="header-anchor" href="#创建空对象" aria-label="Permalink to &quot;创建空对象&quot;">​</a></h4><p>有时候你可能需要创建一个没有任何原型链（尤其是没有默认的 Object 原型链）的对象，这可以通过传入 null 来实现。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> pureObject</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(</span><span style="color:#986801;">null</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">pureObject.</span><span style="color:#E45649;">someProp</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;some value&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(pureObject); </span><span style="color:#A0A1A7;font-style:italic;">// { someProp: &#39;some value&#39; }</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">(pureObject)); </span><span style="color:#A0A1A7;font-style:italic;">// Output: null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="实现一个new" tabindex="-1">实现一个new <a class="header-anchor" href="#实现一个new" aria-label="Permalink to &quot;实现一个new&quot;">​</a></h3><p>手动实现主要遵守的四个步骤</p><ol><li>创建一个新对象；</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）；</li><li>执行构造函数中的代码（为这个新对象添加属性）；</li><li>返回新对象。</li></ol><p>设计时候要考虑到构造函数传参 <code>new Person(&#39;wang&#39;)</code> 因此对象设计 <code>var a = objectFactory( Person, &#39;sven&#39; )</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// constructor.apply(obj, prams); 会将属性或方法添加到obj中</span></span>
<span class="line"><span style="color:#E45649;">  this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> objectFactory</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 获取构造函数和传入的参数</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#383A42;"> [</span><span style="color:#986801;">constructor</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#986801;">prams</span><span style="color:#383A42;">] </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> args;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 将对象的原型指向构造函数的原型 	 创建一个对象</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> obj</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Object.</span><span style="color:#4078F2;">create</span><span style="color:#383A42;">(</span><span style="color:#C18401;">constructor</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 执行构造函数，将属性或方法添加到obj中</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> constructor.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(obj, prams);</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#0184BC;"> typeof</span><span style="color:#383A42;"> result </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &quot;object&quot;</span><span style="color:#0184BC;"> ?</span><span style="color:#383A42;"> result </span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> obj; </span><span style="color:#A0A1A7;font-style:italic;">// 确保构造器总是会返回一个对象</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// var objectFactory = function(){</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     // 创建一个 空对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     var obj = new Object();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     // 获取构造函数</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     var  Constructor = [].shift.call( arguments )</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     // 改变当前obj 空对象原型链的指向</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     obj.__proto__ = Constructor.prototype</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     // 改变构造函数指向</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     var ret = Constructor.apply( obj, arguments );    </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     return typeof ret === &#39;object&#39; ? ret : obj;     // 确保构造器总是会返回一个对象</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 这个写法等同  console.log(new Person(&#39;wang&#39;))</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">=</span><span style="color:#4078F2;"> objectFactory</span><span style="color:#383A42;">(Person, </span><span style="color:#50A14F;">&quot;sven&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：sven</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出：sven</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Object.</span><span style="color:#4078F2;">getPrototypeOf</span><span style="color:#383A42;">(a) </span><span style="color:#0184BC;">===</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p><strong>对这个做一个说明 <code>typeof result === &quot;object&quot; ? result : obj;</code></strong></p><ul><li>当构造函数有返回值的时候, return 出来的是一个和 this 无关的对象时，new 命令会直接返回这个新对象，而不是通过 new 执行步骤生成的 this 对象</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(){</span></span>
<span class="line"><span style="color:#E45649;">   this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;Jack&#39;</span><span style="color:#383A42;">; </span></span>
<span class="line"><span style="color:#A626A4;">   return</span><span style="color:#383A42;"> {</span><span style="color:#E45649;">age</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 18</span><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> p </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(); </span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p)  </span><span style="color:#A0A1A7;font-style:italic;">// {age: 18}</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p.</span><span style="color:#E45649;">age</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// 18</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>当返回时候是非对象，那么它还是会根据 new 关键词的执行逻辑，生成一个新的对象（绑定了最新 this），最后返回出来</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(){</span></span>
<span class="line"><span style="color:#E45649;">   this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;Jack&#39;</span><span style="color:#383A42;">; </span></span>
<span class="line"><span style="color:#A626A4;">   return</span><span style="color:#50A14F;"> &#39;tom&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> p </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(); </span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p)  </span><span style="color:#A0A1A7;font-style:italic;">// {name: &#39;Jack&#39;}</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// Jack</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,55),c=[r];function t(i,y,A,b,u,m){return a(),n("div",null,c)}const h=s(o,[["render",t]]);export{g as __pageData,h as default};
