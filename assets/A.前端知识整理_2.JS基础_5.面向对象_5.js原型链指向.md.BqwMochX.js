import{_ as s,c as n,o as a,a8 as l,ag as o,ah as p,ai as e,aj as c}from"./chunks/framework.6k5lawSO.js";const g=JSON.parse('{"title":"","description":"js原型链指向","frontmatter":{"description":"js原型链指向"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/5.面向对象/5.js原型链指向.md","filePath":"A.前端知识整理/2.JS基础/5.面向对象/5.js原型链指向.md","lastUpdated":1718635980000}'),t={name:"A.前端知识整理/2.JS基础/5.面向对象/5.js原型链指向.md"},r=l(`<p>要深入了解 JavaScript 对象，必须掌握三个关键属性：<code>prototype</code>、 <code>__proto__</code> 和 <code>constructor</code></p><p><strong>prototype</strong>：</p><ul><li>是函数的独有属性。</li><li>每个函数都有一个 prototype 属性，该属性是一个对象，包含由该函数创建的所有实例所共享的属性和方法。</li><li>该属性在构造函数调用时会作为新对象的原型。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#E45649;">  this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Person </span><span style="color:#0184BC;">===</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">dir</span><span style="color:#383A42;">(Person)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+o+`" alt=""></p><p><strong><strong>proto</strong></strong>：</p><ul><li>是每个对象都有的属性，指向创建该对象的构造函数的 prototype 属性。</li><li>它形成了对象的原型链，使得对象可以从其原型继承属性和方法。</li><li>当我们通过引用对象的属性key来获取一个value时，它会触发 [[Get]]的操作,首先检查对象本身是否有对应的属,如果对象没有该属性，则访问对象的 <code>[[Prototype]]</code>（即 <code>__proto__</code>）所指向的原型对象，继续查找，直到找到相应的属性或到达原型链的顶层（null）。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#E45649;">  this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> p</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> Person</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+p+`" alt=""></p><p><strong>constructor</strong>：</p><ul><li>是每个对象所具有的属性，指向创建该对象的构造函数。</li><li>当创建一个对象时，这个属性被自动设置。</li><li>对象具有 <code>[[Prototype]]</code>（即 <code>__proto__</code>）属性。当访问一个对象的 <code>constructor</code> 属性时，如果对象本身没有 <code>constructor</code> 属性，那么会沿着原型链查找，直到找到 <code>constructor</code> 属性。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> PersonPrototype </span><span style="color:#0184BC;">=</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(PersonPrototype.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> Person) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> p </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> Person) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// true  因为当查找对象上的某个key 的时候本身没有就会顺着 __proto__ 往上查找因此可以直接其实本质p.__proto__.constructor</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> Person) </span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(p.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> Person.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="三者关系" tabindex="-1">三者关系 <a class="header-anchor" href="#三者关系" aria-label="Permalink to &quot;三者关系&quot;">​</a></h2><ul><li>每个函数都有一个 <code>prototype</code> 属性，它包含由该函数创建的所有实例对象共享的属性和方法。</li><li>每个对象都有一个 <code>__proto__</code> 属性，它指向创建该对象的构造函数的 <code>prototype</code> 属性，从而形成对象的原型链。</li><li>每个对象都有一个 <code>constructor</code> 属性，指向创建该对象的构造函数。</li><li>因为函数也是对象，所以函数也具有 <code>__proto__</code> 和 <code>constructor</code> 属性，并且函数独有 <code>prototype</code> 属性(箭头函数没有自己的 <code>prototype</code> 属性)</li><li>大部分 函数数据类型 的值都具备 <code>prototype</code>（原型/显式原型）属性，属性值本身是一个对象「浏览器会默认为其开辟一个堆内存，用来存储实例可调用的公共的属性和方法」，在浏览器默认开辟的这个堆内存中「原型对象」有一个默认的属性 <code>constructor</code>（构造函数/构造器），属性值是当前函数/类本身</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(name) {</span></span>
<span class="line"><span style="color:#E45649;">  this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 函数的 prototype 属性</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// {constructor: Person}</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [Function: Person]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 实例的 __proto__ 属性</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> alice</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Alice&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(alice.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// {constructor: Person}</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(alice.</span><span style="color:#E45649;">__proto__</span><span style="color:#0184BC;"> ===</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 实例的 constructor 属性</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(alice.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [Function: Person]</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(alice.</span><span style="color:#E45649;">constructor</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> Person); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-plaintext line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>   Person (函数)</span></span>
<span class="line"><span>     |</span></span>
<span class="line"><span>     ├── prototype（显式原型）</span></span>
<span class="line"><span>     ↓</span></span>
<span class="line"><span>Person.prototype  </span></span>
<span class="line"><span>     |</span></span>
<span class="line"><span>     ├── constructor -&gt; Points back to Person</span></span>
<span class="line"><span>     ↓</span></span>
<span class="line"><span>实例 (alice)</span></span>
<span class="line"><span>     |</span></span>
<span class="line"><span>     ├── __proto__（隐式原型）</span></span>
<span class="line"><span>     ↓</span></span>
<span class="line"><span>Person.prototype</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="不要去做的事-重写原型对象" tabindex="-1">不要去做的事 -- 重写原型对象 <a class="header-anchor" href="#不要去做的事-重写原型对象" aria-label="Permalink to &quot;不要去做的事 -- 重写原型对象&quot;">​</a></h2><p>每创建一个函数, 就会同时创建它的prototype对象, 这个对象也会自动获取constructor属性，但重新赋值一个对象相当于丢失了指向自身constructor属性，而constructor属性还变成当前赋值对象的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 直接赋值一个新的原型对象</span></span>
<span class="line"><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#E45649;">	message</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;Hello Person&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">	info</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;哈哈哈&quot;</span><span style="color:#383A42;">, </span><span style="color:#E45649;">age</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> 30</span><span style="color:#383A42;"> },</span></span>
<span class="line"><span style="color:#4078F2;">	running</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {},</span></span>
<span class="line"><span style="color:#4078F2;">	eating</span><span style="color:#0184BC;">:</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {},</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// constructor: Person</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 非要覆盖 可以这么写</span></span>
<span class="line"><span style="color:#383A42;">Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Person</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">, </span><span style="color:#50A14F;">&quot;constructor&quot;</span><span style="color:#383A42;">, {</span></span>
<span class="line"><span style="color:#E45649;">	enumerable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">	configurable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">	writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">	value</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> Person</span></span>
<span class="line"><span style="color:#383A42;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="图解-function-和-object" tabindex="-1">图解 function 和 Object <a class="header-anchor" href="#图解-function-和-object" aria-label="Permalink to &quot;图解 function 和 Object&quot;">​</a></h2><p>构造函数 <code>Foo</code>、实例 <code>f1</code> 以及它们与全局对象 <code>Function</code> 的关系。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 定义构造函数 Foo</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Foo</span><span style="color:#383A42;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 创建实例 f1</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> f1 </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Foo</span><span style="color:#383A42;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+e+`" alt=""></p><h3 id="图解说明" tabindex="-1">图解说明 <a class="header-anchor" href="#图解说明" aria-label="Permalink to &quot;图解说明&quot;">​</a></h3><ol><li>每一个构造函数（比如 <code>Foo</code>）都是 <code>Function</code> 的实例。</li><li>每一个实例对象（比如 <code>f1</code>）的 <code>__proto__</code> 属性指向其构造函数的 <code>prototype</code> 属性。</li><li>每一个构造函数（比如 <code>Foo</code>）本身也是一个对象，所以它的 <code>__proto__</code> 会指向 <code>Function.prototype</code>。</li><li><code>Function</code> 本身也是一个函数，所以 <code>Function</code> 的 <code>__proto__</code> 是 <code>Function.prototype</code>。</li><li><code>Function.prototype</code> 的 <code>__proto__</code> 是 <code>Object.prototype</code>，最终所有对象的 <code>__proto__</code> 指向 <code>null</code>。</li></ol><h3 id="图解" tabindex="-1">图解 <a class="header-anchor" href="#图解" aria-label="Permalink to &quot;图解&quot;">​</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span>      (全局对象) Function</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            ├── prototype</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>   Function.prototype</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            ⬇</span></span>
<span class="line"><span>      +-------------------+</span></span>
<span class="line"><span>      |                   |</span></span>
<span class="line"><span>  Foo (构造函数)          +----------------------+</span></span>
<span class="line"><span>      |                   |                      |</span></span>
<span class="line"><span>      ├── prototype       |                      |</span></span>
<span class="line"><span>      |                   |                      ⬇</span></span>
<span class="line"><span>Foo.prototype             f1 (实例)       Function (全局对象)</span></span>
<span class="line"><span>      |                   |</span></span>
<span class="line"><span>      └── constructor  ←-┘</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            ⬇</span></span>
<span class="line"><span>          f1.__proto__</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            ⬇</span></span>
<span class="line"><span>      Foo.prototype</span></span>
<span class="line"><span>            |</span></span>
<span class="line"><span>            ⟶ Object.prototype</span></span>
<span class="line"><span>                   ⟶ null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h3><p>为了演示上述关系，以下是实际的代码示例及相关注释：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 定义构造函数 Foo</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> Foo</span><span style="color:#383A42;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 创建实例 f1</span></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> f1 </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Foo</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Foo.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);       </span><span style="color:#A0A1A7;font-style:italic;">// Function.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Foo</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">);       </span><span style="color:#A0A1A7;font-style:italic;">// Foo.prototype 是一个对象，包含 constructor 属性</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Foo</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// Foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(f1.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);        </span><span style="color:#A0A1A7;font-style:italic;">// Foo.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(f1.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">);      </span><span style="color:#A0A1A7;font-style:italic;">// Foo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Function.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);  </span><span style="color:#A0A1A7;font-style:italic;">// Function.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Function</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// Function</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 原型链的终点是 Object.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Foo.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);        </span><span style="color:#A0A1A7;font-style:italic;">// Object.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Function</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);   </span><span style="color:#A0A1A7;font-style:italic;">// Object.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Foo</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);        </span><span style="color:#A0A1A7;font-style:italic;">// Object.prototype</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Object</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">__proto__</span><span style="color:#383A42;">);     </span><span style="color:#A0A1A7;font-style:italic;">// null</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="详细解释" tabindex="-1">详细解释 <a class="header-anchor" href="#详细解释" aria-label="Permalink to &quot;详细解释&quot;">​</a></h3><ol><li><p><strong><code>Foo</code> 是 <code>Function</code> 的一个实例</strong>：</p><ul><li><code>Foo.__proto__ === Function.prototype</code> (true)</li><li>这是因为 <code>Foo</code> 作为一个构造函数，实际上是由 <code>Function</code> 构造出来的。</li></ul></li><li><p><strong><code>f1</code> 的原型链</strong>：</p><ul><li><code>f1.__proto__ === Foo.prototype</code> (true)</li><li>这是因为 <code>f1</code> 是通过 <code>new Foo()</code> 创建的实例，所以它的 <code>__proto__</code> 属性指向 <code>Foo.prototype</code>。</li></ul></li><li><p><strong>构造函数 <code>constructor</code></strong>：</p><ul><li><code>Foo.prototype.constructor === Foo</code> (true)</li><li><code>f1.constructor === Foo</code> (true)</li><li>这是因为在定义构造函数 <code>Foo</code> 时会自动创建 <code>Foo.prototype</code> 对象，其中包含 <code>constructor</code> 属性，指向 <code>Foo</code> 函数本身。</li></ul></li><li><p><strong>最终的原型链</strong>：</p><ul><li><code>Foo.__proto__</code> 指向 <code>Function.prototype</code></li><li><code>f1.__proto__</code> 指向 <code>Foo.prototype</code></li><li><code>Function.__proto__</code> 指向 <code>Function.prototype</code></li><li><code>Function.prototype.__proto__</code> 最终指向 <code>Object.prototype</code></li><li><code>Object.prototype.__proto__</code> 为 <code>null</code>，表示该原型链的终点。</li></ul></li></ol><h3 id="其他案例" tabindex="-1">其他案例 <a class="header-anchor" href="#其他案例" aria-label="Permalink to &quot;其他案例&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> DoSomething</span><span style="color:#383A42;">(){}</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( </span><span style="color:#C18401;">DoSomething</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C18401;">DoSomething</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;wang&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     name: &quot;wang&quot;,  ------------&gt; name 属性是DoSomething自己的所以不是从他的copy原型来的，因此不再__proto__</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     constructor: ƒ DoSomething(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     __proto__: {    -----------------&gt; 这里的原型链指向的是Object，这证明最开始说的&#39;Object&#39;就是所有对象的原型&#39;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         valueOf: ƒ valueOf()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> doSomething</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> DoSomething</span><span style="color:#383A42;">()</span></span>
<span class="line"><span style="color:#383A42;">doSomething.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> 17</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( doSomething) </span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     age: 17, ---------》 age 属性是doSomething 的因此不再__proto__</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     __proto__: { ---------》doSomething 是从DoSomething克隆来的因此一层原型链指向是DoSomething</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         name: &quot;wang&quot;,</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         constructor: ƒ DoSomething(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         __proto__: { -----------------》DoSomething 是从Object 来的因此第二层是在Object</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             constructor: ƒ Object(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             hasOwnProperty: ƒ hasOwnProperty(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             isPrototypeOf: ƒ isPrototypeOf(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             propertyIsEnumerable: ƒ propertyIsEnumerable(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             toLocaleString: ƒ toLocaleString(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             toString: ƒ toString(),</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//             valueOf: ƒ valueOf()</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//         }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//     }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="_1-object-作为一个类-函数-是-function-类的实例" tabindex="-1">1. Object 作为一个类（函数），是 Function 类的实例 <a class="header-anchor" href="#_1-object-作为一个类-函数-是-function-类的实例" aria-label="Permalink to &quot;1. Object 作为一个类（函数），是 Function 类的实例&quot;">​</a></h3><ul><li><code>Object instanceof Function</code> =&gt; <code>true</code></li><li><code>Object.__proto__ === Function.prototype</code></li></ul><h3 id="_2-function-作为一个类-函数-是-function-类的实例" tabindex="-1">2. Function 作为一个类（函数），是 Function 类的实例 <a class="header-anchor" href="#_2-function-作为一个类-函数-是-function-类的实例" aria-label="Permalink to &quot;2. Function 作为一个类（函数），是 Function 类的实例&quot;">​</a></h3><ul><li><code>Function instanceof Function</code> =&gt; <code>true</code></li><li><code>Function.__proto__ === Function.prototype</code></li></ul><p><strong>解释</strong>：只有这样我们才可保证所有函数都可调用 <code>call</code>、<code>apply</code>、<code>bind</code> 等方法。</p><h3 id="_3-函数也是对象-function-作为一个普通对象-它是-object-类的实例" tabindex="-1">3. 函数也是对象，Function 作为一个普通对象，它是 Object 类的实例 <a class="header-anchor" href="#_3-函数也是对象-function-作为一个普通对象-它是-object-类的实例" aria-label="Permalink to &quot;3. 函数也是对象，Function 作为一个普通对象，它是 Object 类的实例&quot;">​</a></h3><ul><li><code>Function instanceof Object</code> =&gt; <code>true</code></li><li><code>Function.__proto__.__proto__ === Object.prototype</code></li></ul><h3 id="_4-object-作为一个普通对象-它是-object-类的实例" tabindex="-1">4. Object 作为一个普通对象，它是 Object 类的实例 <a class="header-anchor" href="#_4-object-作为一个普通对象-它是-object-类的实例" aria-label="Permalink to &quot;4. Object 作为一个普通对象，它是 Object 类的实例&quot;">​</a></h3><ul><li><code>Object instanceof Object</code> =&gt; <code>true</code></li><li><code>Object.__proto__.__proto__ === Object.prototype</code></li></ul><h2 id="冷门知识" tabindex="-1">冷门知识 <a class="header-anchor" href="#冷门知识" aria-label="Permalink to &quot;冷门知识&quot;">​</a></h2><p>不具备prototype的函数</p><ul><li>箭头函数</li><li>基于ES6给对象某个成员赋值函数值的快捷操作</li></ul><p><img src="`+c+'" alt=""></p>',48),i=[r];function y(b,u,A,d,m,_){return a(),n("div",null,i)}const h=s(t,[["render",y]]);export{g as __pageData,h as default};
