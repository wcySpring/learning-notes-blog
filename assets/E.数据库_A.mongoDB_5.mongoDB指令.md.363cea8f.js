import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const b=JSON.parse('{"title":"","description":"mongoDB 指令","frontmatter":{"description":"mongoDB 指令","tags":["数据库","mongoDB"]},"headers":[],"relativePath":"E.数据库/A.mongoDB/5.mongoDB指令.md","filePath":"E.数据库/A.mongoDB/5.mongoDB指令.md","lastUpdated":1686039772000}'),o={name:"E.数据库/A.mongoDB/5.mongoDB指令.md"},p=l(`<p>了解简单的 MongoDB 使用上的简单指令，具体更多复杂的用法还是需要去官网去看</p><h2 id="数据库命令" tabindex="-1">数据库命令 <a class="header-anchor" href="#数据库命令" aria-label="Permalink to &quot;数据库命令&quot;">​</a></h2><p>在 MongoDB 中，数据库包含一个或多个文档集合。</p><ol><li>查看所有数据库</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">dbs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>显示当前所在数据库</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>切换到指定数据库，如果切换时候不存在和创建数据库（创建和切换）双重指令，刚创建的 db 如果里面是没内容的 使用show dbs 是查看不到的</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">use</span><span style="color:#ABB2BF;"> &lt;</span><span style="color:#98C379;">DATABASE_NAM</span><span style="color:#ABB2BF;">E&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p><p><strong>admin</strong>：这个数据库主要用于管理MongoDB数据库系统的操作。例如，创建用户和角色，授权用户权限等等。</p><p><strong>config</strong>： 这个数据库主要用于存储MongoDB分片集群的配置信息，包括分片信息和副本集信息。</p><p><strong>local</strong>：这个数据库主要用于在单个MongoDB服务器上存储与该服务器相关的一些信息。例如，存储单个实例的副本集状态、存储分片数据的标记和最近执行的操作日志等信息。这个数据库只在当前服务器上可见。</p><p>MongoDB默认安装时没有设置任何用户和密码，因此任何人都可以连接到MongoDB服务器，然后以读/写所有数据库的方式进行操作，因此可以说它是无权限限制的。这显然不是一个安全的实践，因此在生产环境中应该对MongoDB服务进行适当的配置和安全设置。一种推荐的实践是将访问控制和身份验证设置为MongoDB服务器的一部分，以确保只有经过身份验证的用户才能访问MongoDB服务。可以使用MongoDB提供的访问控制工具来实现此目的。这些工具包括：创建用户和角色、分配权限、控制哪些主机或网络可以连接到MongoDB服务器等。</p><p>admin数据库主要用于管理MongoDB数据库系统的操作，包括创建用户和角色、授权用户权限、监控数据库运行状态等。以下是一些admin数据库的操作：</p><ol><li>创建用户和角色 可以使用以下命令在admin数据库中创建用户和角色：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">use admin</span></span>
<span class="line"><span style="color:#abb2bf;">db.createUser({</span></span>
<span class="line"><span style="color:#abb2bf;">   user: &quot;username&quot;,</span></span>
<span class="line"><span style="color:#abb2bf;">   pwd: &quot;password&quot;,</span></span>
<span class="line"><span style="color:#abb2bf;">   roles: [ &quot;userAdminAnyDatabase&quot;, &quot;readWriteAnyDatabase&quot;, &quot;dbAdminAnyDatabase&quot; ]</span></span>
<span class="line"><span style="color:#abb2bf;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>授权用户权限 可以使用以下命令在admin数据库中授权用户权限：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">use admin</span></span>
<span class="line"><span style="color:#abb2bf;">db.grantRolesToUser(&quot;username&quot;, [ &quot;readAnyDatabase&quot; ])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>监控数据库运行状态 可以使用以下命令在admin数据库中监控数据库运行状态：</li></ol><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">use admin</span></span>
<span class="line"><span style="color:#abb2bf;">db.runCommand({ serverStatus: 1 })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以上仅是admin数据库的一些常用操作，更多操作可以查看MongoDB的官方文档。</p><h2 id="集合命令" tabindex="-1">集合命令 <a class="header-anchor" href="#集合命令" aria-label="Permalink to &quot;集合命令&quot;">​</a></h2><p>集合类似于关系数据库中的表，MongoDB 将文档存储在集合中。</p><p>集合名称应以下划线或字母字符开头， 不能包含 $ ，不能为空字符串 ，不能包含空字符 ，不能以 . 开头 ，长度限制(版本 4.2 最大 120 个字节,版本 4.4 最大 255 个字节)</p><ol><li>创建完数据库，就要对数据库的集合进行创建</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.createCollection(</span><span style="color:#61AFEF;">&#39;集合名称&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>显示当前数据库中的所有集合</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">show</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">collections</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>删除集合</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.集合名.drop</span><span style="color:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>重命名集合</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.集合名.renameCollection(</span><span style="color:#61AFEF;">&#39;newName&#39;</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="5"><li>对集合做配置项 可以使用db.createCollection()可以指定集合的最大大小、存储引擎、文档验证规则、索引等选项，如果没有创建事实上，MongoDB在内部为每个数据库和集合维护了一个系统命名空间，用于管理数据库和集合的元数据信息以及索引和其他元素。因此，当您执行存储操作时，MongoDB会自动检查这些命名空间并相应地创建或更新相应的集合</li></ol><p>创建一个名为“myNewCollection”的新集合，并指定集合为有限制大小的集合（capped），设置最大大小为20KB，最大文档数为1000。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.createCollection(</span><span style="color:#61AFEF;">&quot;myNewCollection&quot;</span><span style="color:#61AFEF;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">capped:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#98C379;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">size:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">20000</span><span style="color:#98C379;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">   </span><span style="color:#61AFEF;">max:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">1000</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="文档" tabindex="-1">文档 <a class="header-anchor" href="#文档" aria-label="Permalink to &quot;文档&quot;">​</a></h2><p>MongoDB 将数据记录存储为 BSON 文档 ，BSON（Binary JSON）是 JSON 文档的二进制表示形式，它比 JSON 包含更多的数据类型</p><ul><li><a href="http://bsonspec.org/" target="_blank" rel="noreferrer">BSON 规范</a></li><li><a href="https://docs.mongodb.com/manual/reference/bson-types/" target="_blank" rel="noreferrer">BSON 支持的数据类型</a></li></ul><p>文档对字段名称有以下限制：字段名称 _id 保留用作主键；它的值在集合中必须是唯一的，不可变的，并且可以是数组以外的任何类型, 从 MongoDB 3.6 开始，服务器允许存储包含点 . 和美元符号 $ 的字段名称</p><p>如果该集合当前不存在，则插入操作将创建该集合。</p><ol><li>插入文档</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.集合名.insert(文档对象</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>查询文档</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.集合名.find(查询条件</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>更新文档</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.集合名.update(查询条件,新的文档</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#61AFEF;">db.集合名.update(</span><span style="color:#ABB2BF;">{name:</span><span style="color:#61AFEF;">&#39;张三&#39;</span><span style="color:#61AFEF;">},</span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;">$set</span><span style="color:#ABB2BF;">:{age:19}</span><span style="color:#61AFEF;">}</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="4"><li>删除文档</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.集合名.remove(查询条件</span><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">关于插入的补充</p><p>db.collection.insertOne() 插入单个文档到集合中</p><p>db.collection.insertMany() 插入多个文档到集合中</p><p>db.collection.insert() 将1个或多个文档插入到集合中</p><p>举了例子 给档期数据库集合为 inventory 插入一条数据</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.insertOne(</span></span>
<span class="line"><span style="color:#ABB2BF;">   { </span><span style="color:#61AFEF;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;canvas&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tags:</span><span style="color:#ABB2BF;"> [</span><span style="color:#98C379;">&quot;cotton&quot;</span><span style="color:#ABB2BF;">], size: { </span><span style="color:#61AFEF;">h:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">28</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">w:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">35.5</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">uom:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cm&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><ul><li><strong>文档字段也有自己的数据类型常见数据类型</strong></li></ul><table><thead><tr><th>类型</th><th>整数标识符</th><th>别名（字符串标识符）</th></tr></thead><tbody><tr><td>Double</td><td>1</td><td>“double”</td></tr><tr><td>String</td><td>2</td><td>“string”</td></tr><tr><td>Object</td><td>3</td><td>“object”</td></tr><tr><td>Array</td><td>4</td><td>“array”</td></tr><tr><td>Binary data</td><td>5</td><td>“binData”</td></tr><tr><td>ObjectId</td><td>7</td><td>“objectId”</td></tr><tr><td>Boolean</td><td>8</td><td>“bool”</td></tr><tr><td>Date</td><td>9</td><td>“date”</td></tr><tr><td>Null</td><td>10</td><td>“null”</td></tr><tr><td>Regular Expression</td><td>11</td><td>“regex”</td></tr><tr><td>32-bit integer</td><td>16</td><td>“int”</td></tr><tr><td>Timestamp</td><td>17</td><td>“timestamp”</td></tr><tr><td>64-bit integer</td><td>18</td><td>“long”</td></tr><tr><td>Decimal128</td><td>19</td><td>“decimal”</td></tr></tbody></table><h3 id="文档里的-id-字段" tabindex="-1">文档里的_id 字段 <a class="header-anchor" href="#文档里的-id-字段" aria-label="Permalink to &quot;文档里的_id 字段&quot;">​</a></h3><p>在 MongoDB 中，存储在集合中的每个文档都需要一个唯一的 _id 字段作为主键。如果插入的文档省略 _id 字段，则 MongoDB 驱动程序会自动为 _id 字段生成 ObjectId。</p><p>_id 字段具有以下行为和约束：</p><ul><li>默认情况下，MongoDB 在创建集合时会在 _id 字段上创建唯一索引。</li><li>_id 字段始终是文档中的第一个字段</li><li>_id 字段可以包含任何 BSON 数据类型的值，而不是数组。</li></ul><h3 id="文档中的查询" tabindex="-1">文档中的查询 <a class="header-anchor" href="#文档中的查询" aria-label="Permalink to &quot;文档中的查询&quot;">​</a></h3><p>文档中查询是一个复杂的组合，find 仅仅是一个最简单的使用方式，更多方式有</p><h4 id="find-使用" tabindex="-1">find 使用 <a class="header-anchor" href="#find-使用" aria-label="Permalink to &quot;find 使用&quot;">​</a></h4><ul><li>db.collection.find(query, projection) <ul><li>query ：可选，使用查询操作符指定查询条件</li><li>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。在projection中，可以使用1或0来指定要返回或排除的字段，但是你也可以使用其他的值，如true或false</li></ul></li><li>db.collection.findOne() 查找一条</li></ul><p>创建一个集合案例后续使用这个集合进行查找</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.insertMany([</span></span>
<span class="line"><span style="color:#ABB2BF;">   { </span><span style="color:#61AFEF;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;journal&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">25</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">h:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">14</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">w:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">21</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">uom:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cm&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">   { </span><span style="color:#61AFEF;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;notebook&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">50</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">h:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8.5</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">w:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">11</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">uom:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;in&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">   { </span><span style="color:#61AFEF;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;paper&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">100</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">h:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">8.5</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">w:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">11</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">uom:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;in&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">   { </span><span style="color:#61AFEF;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;planner&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">75</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">h:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">22.85</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">w:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">uom:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cm&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">   { </span><span style="color:#61AFEF;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;postcard&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">45</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">size:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">h:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">w:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">15.25</span><span style="color:#98C379;">,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">uom:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;cm&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>指定返回字段</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;">{}</span><span style="color:#61AFEF;">,</span><span style="color:#ABB2BF;">{status:1})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查询后结果</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#abb2bf;">[</span></span>
<span class="line"><span style="color:#abb2bf;">  { _id: ObjectId(&quot;6473056825147561110673f3&quot;), status: &#39;A&#39; },</span></span>
<span class="line"><span style="color:#abb2bf;">  { _id: ObjectId(&quot;6473056825147561110673f4&quot;), status: &#39;A&#39; },</span></span>
<span class="line"><span style="color:#abb2bf;">  { _id: ObjectId(&quot;6473056825147561110673f5&quot;), status: &#39;D&#39; },</span></span>
<span class="line"><span style="color:#abb2bf;">  { _id: ObjectId(&quot;6473056825147561110673f6&quot;), status: &#39;D&#39; },</span></span>
<span class="line"><span style="color:#abb2bf;">  { _id: ObjectId(&quot;6473056825147561110673f7&quot;), status: &#39;A&#39; }</span></span>
<span class="line"><span style="color:#abb2bf;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>指定查询内容</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>等价于 SQL 中的 SELECT * FROM inventory WHERE status = &quot;D&quot; 语句。</p><h3 id="find-配合运算符" tabindex="-1">find 配合运算符 <a class="header-anchor" href="#find-配合运算符" aria-label="Permalink to &quot;find 配合运算符&quot;">​</a></h3><p>比较运算符：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>$eq</td><td>匹配等于指定值的值。</td></tr><tr><td>$gt</td><td>匹配大于指定值的值。</td></tr><tr><td>$gte</td><td>匹配大于或等于指定值的值。</td></tr><tr><td>$in</td><td>匹配数组中指定的任何值。</td></tr><tr><td>$lt</td><td>匹配小于指定值的值。</td></tr><tr><td>$lte</td><td>匹配小于或等于指定值的值。</td></tr><tr><td>$ne</td><td>匹配所有不等于指定值的值。</td></tr><tr><td>$nin</td><td>不匹配数组中指定的任何值。</td></tr></tbody></table><p>逻辑运算符：</p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>$and</td><td>将查询子句与逻辑连接，并返回与这两个子句条件匹配的所有文档。</td></tr><tr><td>$not</td><td>反转查询表达式的效果，并返回与查询表达式不匹配的文档。</td></tr><tr><td>$nor</td><td>用逻辑NOR连接查询子句，返回所有不能匹配这两个子句的文档。</td></tr><tr><td>$or</td><td>用逻辑连接查询子句，或返回与任一子句条件匹配的所有文档。</td></tr></tbody></table><p><strong>查询指定 AND 条件</strong></p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$lt</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该操作对应于以下SQL语句：</p><p>SELECT * FROM inventory WHERE status = &quot;A&quot; AND qty &lt; 30</p><p><strong>指定 OR 条件</strong></p><p>使用 $or 运算符，您可以指定一个复合查询，该查询将每个子句与一个逻辑或连接相连接，以便该查询选择集合中至少匹配一个条件的文档。</p><p>下面的示例检索状态为 A 或数量小于 $lt30 的集合中的所有文档</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">$or</span><span style="color:#ABB2BF;">: [</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#61AFEF;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span></span>
<span class="line"><span style="color:#ABB2BF;">    { </span><span style="color:#61AFEF;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$lt</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">  ]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>SELECT * FROM inventory WHERE status = &quot;A&quot; OR qty &lt; 30</p><p><strong>指定 AND 和 OR 条件</strong></p><p>在下面的示例中，复合查询文档选择状态为“ A”且qty小于（$ lt）30或item以字符p开头的所有文档：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#61AFEF;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;A&quot;,</span></span>
<span class="line"><span style="color:#ABB2BF;">  </span><span style="color:#E06C75;">$or</span><span style="color:#ABB2BF;">: [ </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">qty:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$lt</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">30</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">},</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/^p/</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">]</span></span>
<span class="line"><span style="color:#ABB2BF;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>SELECT * FROM inventory WHERE status = &quot;A&quot; AND ( qty &lt; 30 OR item LIKE &quot;p%&quot;)</p><p><strong>匹配数组中指定的任何值</strong></p><p>下面的示例从状态为“ A”或“ D”等于“库存”的清单集中检索所有文档：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">status:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$in</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> [ </span><span style="color:#98C379;">&quot;A&quot;,</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;D&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">]</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>SELECT * FROM inventory WHERE status in (&quot;A&quot;, &quot;D&quot;)</p><p><strong>不包含字段的文档</strong></p><p>$exists 操作符可以用来在一个查询表达式中测试某个字段是否存在。在这个查询语句中， $exists 对应的值是 false，表示查询只匹配不包含 item 字段的文档。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">item</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$exists</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>类型检查</strong></p><p>该查询仅返回 item 字段值为 null 的文档。{ item: { $type: 10 } } 查询仅匹配包含 item 字段，其值为 null 的文档；即 item 字段的值为 BSON 类型为 Null（类型编号10）：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">item</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">$type</span><span style="color:#98C379;">:</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">10</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>相等过滤</strong></p><p>{item: null} 查询将匹配包含其值为 null 的 item 字段或不包含 item 字段的文档。</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#61AFEF;">db.inventory.find(</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">{</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">item:</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">null</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">}</span><span style="color:#ABB2BF;"> )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="更多操作参考" tabindex="-1">更多操作参考 <a class="header-anchor" href="#更多操作参考" aria-label="Permalink to &quot;更多操作参考&quot;">​</a></h2><p><a href="https://www.yuque.com/lipengzhou/mongodb/mspxar" target="_blank" rel="noreferrer">https://www.yuque.com/lipengzhou/mongodb/mspxar</a></p>`,102),e=[p];function t(r,c,i,B,d,y){return n(),a("div",null,e)}const A=s(o,[["render",t]]);export{b as __pageData,A as default};
