import{_ as s,c as n,o as a,a8 as l,ad as p}from"./chunks/framework.6k5lawSO.js";const g=JSON.parse('{"title":"","description":"函数特性","frontmatter":{"description":"函数特性"},"headers":[],"relativePath":"A.前端知识整理/2.JS基础/4.函数知识/1.函数特性.md","filePath":"A.前端知识整理/2.JS基础/4.函数知识/1.函数特性.md","lastUpdated":1691718897000}'),o={name:"A.前端知识整理/2.JS基础/4.函数知识/1.函数特性.md"},e=l(`<p>函数也是对象，因此函数也是存储在堆内存，声明函数除了基础篇章说的函数表达式，和函数声明两种方式外，也可以 &#39;new&#39;出来，但这种方式不推荐</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">var</span><span style="color:#383A42;"> sum </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Function</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;num1&#39;</span><span style="color:#383A42;">,</span><span style="color:#50A14F;">&#39;return num1&#39;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">sum</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#383A42;">)) </span><span style="color:#A0A1A7;font-style:italic;">// 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">var</span><span style="color:#4078F2;"> foo</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {} </span><span style="color:#A0A1A7;font-style:italic;">// 堆内存</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> bar</span><span style="color:#383A42;">() {} </span><span style="color:#A0A1A7;font-style:italic;">// 堆内存</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="`+p+`" alt=""></p><h2 id="length-属性" tabindex="-1">length 属性 <a class="header-anchor" href="#length-属性" aria-label="Permalink to &quot;length 属性&quot;">​</a></h2><p>函数作为对象因此也是具备对象可以调用属性的使用形式 其中 以length 为例 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/length" target="_blank" rel="noreferrer">MDN</a></p><ol><li>MDN 里面解释:length 属性指明函数的形参个数。</li><li>&#39;arguments.length&#39; <strong>是函数被调用时实际传参的个数</strong>,&#39;Function.length&#39;<strong>指该函数有多少个必须要传入的参数，即形参的个数</strong></li></ol><h3 id="mdn-上的案例" tabindex="-1">MDN 上的案例 <a class="header-anchor" href="#mdn-上的案例" aria-label="Permalink to &quot;MDN 上的案例&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(Function.</span><span style="color:#E45649;">length</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">()        {}).</span><span style="color:#E45649;">length</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 0</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(a)       {}).</span><span style="color:#E45649;">length</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(a, b)    {}).</span><span style="color:#E45649;">length</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 0,不计算不定参数</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {}).</span><span style="color:#E45649;">length</span><span style="color:#383A42;">); </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 1，只有在第一个参数之前</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// a 形参计算默认值，只能算出a的参数</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(a, b </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">, c) {}).</span><span style="color:#E45649;">length</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="function-arguments" tabindex="-1">Function -- arguments <a class="header-anchor" href="#function-arguments" aria-label="Permalink to &quot;Function -- arguments&quot;">​</a></h2><ol><li><strong>arguments</strong> 是一个 对应于 传递给函数的参数 的 <strong>类数组 array-like</strong>对象</li><li><strong>arguments</strong> 只是像数组结构一种对象，因此他不具备数组的方法，如<strong>filter、map</strong>，但其自身是有<strong>length</strong>,且也是<strong>可迭代对象</strong>，因此可以使用<strong>index</strong> 依次获取或者 <strong>of</strong>循环可迭代对象</li><li><strong>arguments</strong> 获取是是实际传入参数个数</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> a</span><span style="color:#383A42;">(p1, p2, p3, p4 </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">.</span><span style="color:#E45649;">length</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"><span style="color:#4078F2;">a</span><span style="color:#383A42;">() </span><span style="color:#A0A1A7;font-style:italic;">// [Arguments] {} 0</span></span>
<span class="line"><span style="color:#4078F2;">a</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// [Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2 } 2</span></span>
<span class="line"><span style="color:#4078F2;">a</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">, </span><span style="color:#986801;">4</span><span style="color:#383A42;">, </span><span style="color:#986801;">5</span><span style="color:#383A42;">, </span><span style="color:#986801;">6</span><span style="color:#383A42;">, </span><span style="color:#986801;">7</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// [Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4, &#39;4&#39;: 5, &#39;5&#39;: 6, &#39;6&#39;: 7 }  7</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="arguments转array" tabindex="-1">arguments转Array <a class="header-anchor" href="#arguments转array" aria-label="Permalink to &quot;arguments转Array&quot;">​</a></h3><ol><li>遍历arguments，添加到一个新数组中</li><li>调用数组<strong>slice</strong>函数的call方法</li><li>ES6 <strong>Array.from</strong> 和 <strong>解构赋值</strong></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> a</span><span style="color:#383A42;">(p1, p2, p3, p4 </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> newLs1</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> []</span></span>
<span class="line"><span style="color:#A626A4;">	for</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">let</span><span style="color:#383A42;"> item </span><span style="color:#A626A4;">of</span><span style="color:#E45649;"> arguments</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">		newLs1.</span><span style="color:#4078F2;">push</span><span style="color:#383A42;">(item)</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// es6</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> newLs2</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Array.</span><span style="color:#4078F2;">from</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> newLs3</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> [</span><span style="color:#0184BC;">...</span><span style="color:#C18401;">arguments</span><span style="color:#383A42;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">	// 改变this 指向 等同 [].slice.call(arguments) 等同 arguments.slice() slice方法会生成新的数组</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> newLs4</span><span style="color:#0184BC;"> =</span><span style="color:#C18401;"> Array</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">slice</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> newLs5</span><span style="color:#0184BC;"> =</span><span style="color:#C18401;"> Array</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#E45649;">splice</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">, </span><span style="color:#986801;">0</span><span style="color:#383A42;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(newLs1)</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(newLs2)</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(newLs3)</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(newLs4)</span></span>
<span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(newLs5)</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">a</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">, </span><span style="color:#986801;">4</span><span style="color:#383A42;">, </span><span style="color:#986801;">5</span><span style="color:#383A42;">, </span><span style="color:#986801;">6</span><span style="color:#383A42;">, </span><span style="color:#986801;">7</span><span style="color:#383A42;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="箭头函数不绑定arguments" tabindex="-1">箭头函数不绑定arguments <a class="header-anchor" href="#箭头函数不绑定arguments" aria-label="Permalink to &quot;箭头函数不绑定arguments&quot;">​</a></h3><ol><li>箭头函数没有<strong>arguments</strong> 属性</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> a</span><span style="color:#383A42;">(p1, p2, p3, p4 </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 4</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args) {</span></span>
<span class="line"><span style="color:#A626A4;">	return</span><span style="color:#383A42;"> (a1) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">arguments</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// 箭头函数没有arguments 熟悉因此获取当前this为最外层函数的</span></span>
<span class="line"><span style="color:#383A42;">	}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">a</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">, </span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">, </span><span style="color:#986801;">4</span><span style="color:#383A42;">, </span><span style="color:#986801;">5</span><span style="color:#383A42;">, </span><span style="color:#986801;">6</span><span style="color:#383A42;">, </span><span style="color:#986801;">7</span><span style="color:#383A42;">)(</span><span style="color:#986801;">10</span><span style="color:#383A42;">) </span><span style="color:#A0A1A7;font-style:italic;">// [Arguments] { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4, &#39;4&#39;: 5, &#39;5&#39;: 6, &#39;6&#39;: 7 }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="使用es6-剩余参数-还是es5-arguments" tabindex="-1">使用es6 剩余参数 还是es5 arguments <a class="header-anchor" href="#使用es6-剩余参数-还是es5-arguments" aria-label="Permalink to &quot;使用es6 剩余参数 还是es5 arguments&quot;">​</a></h3><ol><li>剩余参数只<strong>包含那些没有对应形参的实参</strong>，剩余参数是一个真正的数组，可以进行<strong>数组的所有操作</strong></li><li><strong>arguments</strong> 对象包含了<strong>传给函数的所有实参</strong>； arguments对象<strong>不是一个真正的数组</strong></li><li>arguments是早期的ECMAScript中为了方便去获取所有的参数提供的一个数据结构，而rest参数是ES6中提供并且希望以此来替代arguments的</li></ol><h2 id="callee" tabindex="-1">callee <a class="header-anchor" href="#callee" aria-label="Permalink to &quot;callee&quot;">​</a></h2><p>arguments的主要用途是保存函数参数，但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee" target="_blank" rel="noreferrer">callee 不推荐使用了</a></p><h3 id="用途可以在递归的时候让代码更加解耦" tabindex="-1">用途可以在递归的时候让代码更加解耦 <a class="header-anchor" href="#用途可以在递归的时候让代码更加解耦" aria-label="Permalink to &quot;用途可以在递归的时候让代码更加解耦&quot;">​</a></h3><ul><li>递归方法</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> factorial</span><span style="color:#383A42;">(num){</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;">(num</span><span style="color:#0184BC;">&lt;=</span><span style="color:#986801;">1</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">        }</span><span style="color:#A626A4;">else</span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#383A42;"> num </span><span style="color:#0184BC;">*</span><span style="color:#4078F2;"> factorial</span><span style="color:#383A42;">(num</span><span style="color:#0184BC;">-</span><span style="color:#986801;">1</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>如果是函数表达式或者是用其他函数接收递归函数调用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">    const</span><span style="color:#4078F2;"> test</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (num){</span></span>
<span class="line"><span style="color:#A626A4;">        if</span><span style="color:#383A42;">(num</span><span style="color:#0184BC;">&lt;=</span><span style="color:#986801;">1</span><span style="color:#383A42;">){</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">        }</span><span style="color:#A626A4;">else</span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A626A4;">            return</span><span style="color:#383A42;"> num </span><span style="color:#0184BC;">*</span><span style="color:#E45649;"> arguments</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">callee</span><span style="color:#383A42;">(num</span><span style="color:#0184BC;">-</span><span style="color:#986801;">1</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">   console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">( </span><span style="color:#4078F2;">test</span><span style="color:#383A42;">(</span><span style="color:#986801;">10</span><span style="color:#383A42;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,27),r=[e];function t(c,i,y,A,u,b){return a(),n("div",null,r)}const d=s(o,[["render",t]]);export{g as __pageData,d as default};
