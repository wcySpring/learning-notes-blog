import{_ as e,c as s,o as a,a8 as o}from"./chunks/framework.6k5lawSO.js";const h=JSON.parse('{"title":"","description":"生成Log说明md日志","frontmatter":{"description":"生成Log说明md日志"},"headers":[],"relativePath":"C.前端工程化/4.搭建代码规范/6.生成Log说明md日志.md","filePath":"C.前端工程化/4.搭建代码规范/6.生成Log说明md日志.md","lastUpdated":1695881925000}'),n={name:"C.前端工程化/4.搭建代码规范/6.生成Log说明md日志.md"},l=o(`<p>在 npm 上，有许多插件可以用于生成项目的 changelog。以下是其中的一些插件：</p><ol><li><p><strong>auto-changelog</strong>:</p><ul><li><strong>描述</strong>: 一个命令行工具，用于从 git 标签和提交历史生成 changelog。</li><li><a href="https://www.npmjs.com/package/auto-changelog" target="_blank" rel="noreferrer">查看详情</a></li></ul></li><li><p><strong>@semantic-release/release-notes-generator</strong>:</p><ul><li><strong>描述</strong>: Semantic-release 插件，用于使用 conventional-changelog 生成 changelog 内容。</li><li><a href="https://www.npmjs.com/package/@semantic-release/release-notes-generator" target="_blank" rel="noreferrer">查看详情</a></li></ul></li><li><p><strong>@changesets/changelog-github</strong>:</p><ul><li><strong>描述</strong>: 一个为 GitHub 生成 changelog 条目的生成器，链接到提交、PR 和用户。</li><li><a href="https://www.npmjs.com/package/@changesets/changelog-github" target="_blank" rel="noreferrer">查看详情</a></li></ul></li><li><p><strong>@changesets/changelog-git</strong>:</p><ul><li><strong>描述</strong>: 一个为 git 生成 changelog 条目的生成器，写入哈希值。</li><li><a href="https://www.npmjs.com/package/@changesets/changelog-git" target="_blank" rel="noreferrer">查看详情</a></li></ul></li><li><p><strong>git-cliff</strong>:</p><ul><li><strong>描述</strong>: 一个高度可定制的 Changelog 生成器，遵循 Conventional Commit 规范。</li><li><a href="https://www.npmjs.com/package/git-cliff" target="_blank" rel="noreferrer">查看详情</a></li></ul></li></ol><h2 id="auto-changelog" tabindex="-1">auto-changelog <a class="header-anchor" href="#auto-changelog" aria-label="Permalink to &quot;auto-changelog&quot;">​</a></h2><p><code>auto-changelog</code> 是一个命令行工具，用于从 git 标签和提交历史生成 changelog。以下是其主要用法和功能：</p><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">npm</span><span style="color:#50A14F;"> install</span><span style="color:#986801;"> -D</span><span style="color:#50A14F;"> auto-changelog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h3><p>如果全局安装在 git 仓库的根目录下运行 <code>auto-changelog</code>。它在后台运行 <code>git log</code> 以解析提交历史。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">auto-changelog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h3><ul><li><code>-o, --output [file]</code>: 输出文件，默认为 <code>CHANGELOG.md</code>。</li><li><code>-c, --config [file]</code>: 配置文件位置，默认为 <code>.auto-changelog</code>。</li><li><code>-t, --template [template]</code>: 使用的模板（例如：<code>compact</code>, <code>keepachangelog</code>, <code>json</code>），默认为 <code>compact</code>。</li><li><code>-r, --remote [remote]</code>: 用于链接的 git 远程，默认为 <code>origin</code>。</li><li><code>-p, --package</code>: 使用 <code>package.json</code> 中的版本作为最新发布。</li><li><code>-v, --latest-version [version]</code>: 使用指定的版本作为最新发布。</li><li><code>-u, --unreleased</code>: 包括未发布的更改部分。</li><li><code>-l, --commit-limit [count]</code>: 每个发布显示的提交数量，默认为 3。</li><li><code>--commit-url [url]</code>: 覆盖提交的 URL，使用 <code>{id}</code> 作为提交 id。</li><li><code>--issue-url [url]</code>: 覆盖问题的 URL，使用 <code>{id}</code> 作为问题 id。</li><li><code>--merge-url [url]</code>: 覆盖合并的 URL，使用 <code>{id}</code> 作为合并 id。</li><li><code>--compare-url [url]</code>: 覆盖比较的 URL，使用 <code>{from}</code> 和 <code>{to}</code> 作为标签。</li><li><code>--issue-pattern [regex]</code>: 覆盖提交消息中的问题模式。</li><li><code>--breaking-pattern [regex]</code>: 突破性更改提交的正则模式。</li><li><code>--merge-pattern [regex]</code>: 添加合并提交的自定义正则模式。</li><li><code>--ignore-commit-pattern [regex]</code>: 解析提交时要忽略的模式。</li><li><code>--tag-pattern [regex]</code>: 覆盖版本标签的正则模式。</li><li><code>--tag-prefix [prefix]</code>: 版本标签中使用的前缀，默认为 <code>v</code>。</li><li><code>--starting-version [tag]</code>: 在 changelog 中包括的最早版本。</li><li><code>--ending-version [tag]</code>: 在 changelog 中包括的最新版本。</li><li><code>--sort-commits [property]</code>: 按属性对提交进行排序（例如：<code>relevance</code>, <code>date</code>, <code>subject</code>），默认为 <code>relevance</code>。</li><li><code>--release-summary</code>: 将标记的提交消息体显示为发布摘要。</li><li><code>--unreleased-only</code>: 仅输出未发布的更改。</li><li><code>--hide-empty-releases</code>: 隐藏空的发布。</li><li><code>--hide-credit</code>: 隐藏 auto-changelog 信用。</li><li><code>--handlebars-setup [file]</code>: handlebars 设置文件。</li><li><code>--append-git-log [string]</code>: 附加到 git log 命令的字符串。</li><li><code>--append-git-tag [string]</code>: 附加到 git 标签命令的字符串。</li><li><code>--prepend</code>: 在输出文件前面添加 changelog。</li><li><code>--stdout</code>: 将 changelog 输出到 stdout。</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><ul><li>将日志写入当前目录的 <code>CHANGELOG.md</code>：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">auto-changelog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>使用 <code>keepachangelog</code> 模板将日志写入 <code>HISTORY.md</code>：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">auto-changelog</span><span style="color:#986801;"> --output</span><span style="color:#50A14F;"> HISTORY.md</span><span style="color:#986801;"> --template</span><span style="color:#50A14F;"> keepachangelog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>禁用提交限制，为每个发布渲染所有提交：</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#4078F2;">auto-changelog</span><span style="color:#986801;"> --commit-limit</span><span style="color:#986801;"> false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此外，<code>auto-changelog</code> 还提供了许多高级功能，如 URL 覆盖、添加到现有的 changelog、配置、标签前缀、标签模式、突破性更改、自定义问题模式、自定义模板等。</p><h3 id="在项目中配置文件" tabindex="-1">在项目中配置文件 <a class="header-anchor" href="#在项目中配置文件" aria-label="Permalink to &quot;在项目中配置文件&quot;">​</a></h3><p>配置可以放在您的 <code>package.json</code> 文件中或在一个名为 <code>.auto-changelog</code> 的单独配置文件中：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#E45649;">  &quot;auto-changelog&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">    &quot;output&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;CHANGELOG.md&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;template&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;keepachangelog&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;unreleased&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">true</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;commitLimit&quot;</span><span style="color:#383A42;">: </span><span style="color:#0184BC;">false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;tagPrefix&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;v&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;sortCommits&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;relevance&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;replaceText&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">      &quot;(#</span><span style="color:#0184BC;">\\\\</span><span style="color:#E45649;">d+)&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;[\`$1\`](https://github.com/your-username/your-repo/issues/$1)&quot;</span></span>
<span class="line"><span style="color:#383A42;">    },</span></span>
<span class="line"><span style="color:#E45649;">    &quot;issueUrl&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;https://github.com/your-username/your-repo/issues/{id}&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;commitUrl&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;https://github.com/your-username/your-repo/commit/{id}&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;mergeUrl&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;https://github.com/your-username/your-repo/pull/{id}&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;compareUrl&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;https://github.com/your-username/your-repo/compare/{from}...{to}&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;issuePattern&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;#(</span><span style="color:#0184BC;">\\\\</span><span style="color:#50A14F;">d+)&quot;</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#E45649;">    &quot;breakingPattern&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;BREAKING CHANGE:&quot;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>配置解释</strong>:</p><ul><li><code>output</code>: changelog 文件的输出位置。</li><li><code>template</code>: 使用的模板。<code>keepachangelog</code> 是一个流行的 changelog 格式。</li><li><code>unreleased</code>: 是否包括未发布的更改部分。</li><li><code>commitLimit</code>: 每个版本显示的提交数量。设置为 <code>false</code> 会显示所有提交。</li><li><code>tagPrefix</code>: 版本标签的前缀。</li><li><code>sortCommits</code>: 按 relevance（相关性）对提交进行排序。</li><li><code>replaceText</code>: 用于在日志中替换文本的正则表达式。这里，它将 <code>#123</code> 这样的问题引用替换为一个链接到 GitHub 问题的链接。</li><li><code>issueUrl</code>, <code>commitUrl</code>, <code>mergeUrl</code>, <code>compareUrl</code>: 这些是用于生成链接的 URL 模板。</li><li><code>issuePattern</code>: 用于从提交消息中解析问题引用的正则表达式。</li><li><code>breakingPattern</code>: 用于识别破坏性更改的提交消息的正则表达式。</li></ul><h3 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h3><p>在想你 package.json 文件中配置指令</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#50A14F;">&quot;scripts&quot;</span><span style="color:#383A42;">: {</span></span>
<span class="line"><span style="color:#E45649;">	&quot;version&quot;</span><span style="color:#383A42;">: </span><span style="color:#50A14F;">&quot;auto-changelog -p &amp;&amp; git add CHANGELOG.md&quot;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,27),c=[l];function t(p,r,i,d,u,g){return a(),s("div",null,c)}const b=e(n,[["render",t]]);export{h as __pageData,b as default};
