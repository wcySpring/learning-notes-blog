import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"G.设计模式/a.md","filePath":"G.设计模式/a.md","lastUpdated":1718893054000}'),e={name:"G.设计模式/a.md"},p=l(`<p>当然，这段代码是一个简单的依赖注入（Dependency Injection，简称 DI）实现示例。我们逐步解释每个部分的作用和功能。</p><h3 id="_1-injectable-装饰器" tabindex="-1">1. <code>injectable</code> 装饰器 <a class="header-anchor" href="#_1-injectable-装饰器" aria-label="Permalink to &quot;1. \`injectable\` 装饰器&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> injectable</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 将类标记为可注入</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;injectable&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">true</span><span style="color:#383A42;">, target);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>作用</strong>：<code>injectable</code> 装饰器用于标记一个类可以被依赖注入容器管理。</li><li><strong>实现</strong>：通过 <code>Reflect.defineMetadata</code> 方法为目标类（<code>target</code>）添加一个名为 <code>&#39;injectable&#39;</code> 的元数据，并设置其值为 <code>true</code>。<code>Reflect</code> 是一个元数据操作库，需要额外安装 <code>reflect-metadata</code> 包。</li></ul><h3 id="_2-标记-myservice-类为可注入" tabindex="-1">2. 标记 <code>MyService</code> 类为可注入 <a class="header-anchor" href="#_2-标记-myservice-类为可注入" aria-label="Permalink to &quot;2. 标记 \`MyService\` 类为可注入&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#383A42;">@injectable</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MyService</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 服务逻辑</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>作用</strong>：使用 <code>@injectable</code> 装饰器标记 <code>MyService</code> 类，使其可以被依赖注入容器管理。</li><li><strong>实现</strong>：<code>@injectable</code> 装饰器会将 <code>MyService</code> 类标记为可注入，并在元数据中记录这个信息。</li></ul><h3 id="_3-inject-装饰器" tabindex="-1">3. <code>inject</code> 装饰器 <a class="header-anchor" href="#_3-inject-装饰器" aria-label="Permalink to &quot;3. \`inject\` 装饰器&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> inject</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, parameterIndex</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> existingParameters</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, target, propertyKey) </span><span style="color:#0184BC;">||</span><span style="color:#383A42;"> [];</span></span>
<span class="line"><span style="color:#383A42;">  existingParameters[parameterIndex] </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> true</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// 标记参数为可注入</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, existingParameters, target, propertyKey);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>作用</strong>：<code>inject</code> 装饰器用于标记构造函数参数需要依赖注入。</li><li><strong>实现</strong>：<code>Reflect.getOwnMetadata</code> 获取现有的参数元数据，如果没有则初始化为空数组。然后将指定参数位置（<code>parameterIndex</code>）标记为 <code>true</code>。最后，通过 <code>Reflect.defineMetadata</code> 方法将这些元数据重新设置到目标类上。</li></ul><h3 id="_4-使用-inject-装饰器在-mycomponent-构造函数中注入-myservice" tabindex="-1">4. 使用 <code>@inject</code> 装饰器在 <code>MyComponent</code> 构造函数中注入 <code>MyService</code> <a class="header-anchor" href="#_4-使用-inject-装饰器在-mycomponent-构造函数中注入-myservice" aria-label="Permalink to &quot;4. 使用 \`@inject\` 装饰器在 \`MyComponent\` 构造函数中注入 \`MyService\`&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MyComponent</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(@inject </span><span style="color:#A626A4;">private</span><span style="color:#383A42;"> myService</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> MyService</span><span style="color:#383A42;">) {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><strong>作用</strong>：使用 <code>@inject</code> 装饰器标记 <code>MyComponent</code> 构造函数的参数 <code>myService</code> 需要依赖注入。</li><li><strong>实现</strong>：<code>@inject</code> 装饰器会在参数元数据中记录这个依赖注入需求。</li></ul><h3 id="依赖注入流程" tabindex="-1">依赖注入流程 <a class="header-anchor" href="#依赖注入流程" aria-label="Permalink to &quot;依赖注入流程&quot;">​</a></h3><ol><li><strong>定义服务类</strong>：<code>MyService</code> 被 <code>@injectable</code> 装饰，表明它是一个可注入的服务。</li><li><strong>定义使用依赖的类</strong>：<code>MyComponent</code> 类的构造函数参数 <code>myService</code> 被 <code>@inject</code> 装饰，表明它需要注入一个 <code>MyService</code> 实例。</li><li><strong>注入依赖</strong>：在创建 <code>MyComponent</code> 实例时，依赖注入容器会读取元数据，发现 <code>myService</code> 需要注入一个 <code>MyService</code> 实例，并自动创建 <code>MyService</code> 实例并注入。</li></ol><h3 id="依赖注入容器实现-示例" tabindex="-1">依赖注入容器实现（示例） <a class="header-anchor" href="#依赖注入容器实现-示例" aria-label="Permalink to &quot;依赖注入容器实现（示例）&quot;">​</a></h3><p>为了使上述装饰器真正起作用，还需要一个简单的依赖注入容器实现：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &#39;reflect-metadata&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Container</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  private</span><span style="color:#A626A4;"> static</span><span style="color:#383A42;"> instances </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Map</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">  static</span><span style="color:#4078F2;"> get</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">instances</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(target)) {</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">instances</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(target);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> injectable</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;injectable&#39;</span><span style="color:#383A42;">, target);</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">injectable) {</span></span>
<span class="line"><span style="color:#A626A4;">      throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Cannot inject </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">target</span><span style="color:#50A14F;">.</span><span style="color:#E45649;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">. It is not marked as injectable.\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> paramTypes</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, target) </span><span style="color:#0184BC;">||</span><span style="color:#383A42;"> [];</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> params</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> paramTypes.</span><span style="color:#4078F2;">map</span><span style="color:#383A42;">((param</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(param));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> instance</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> target</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">params);</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">instances</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(target, instance);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> instance;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> myComponent</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Container.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(MyComponent);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(myComponent);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="依赖注入容器工作原理" tabindex="-1">依赖注入容器工作原理 <a class="header-anchor" href="#依赖注入容器工作原理" aria-label="Permalink to &quot;依赖注入容器工作原理&quot;">​</a></h3><ol><li><strong>检查是否已有实例</strong>：如果容器中已经存在目标类的实例，直接返回该实例。</li><li><strong>检查可注入性</strong>：通过元数据检查目标类是否标记为可注入。</li><li><strong>获取构造函数参数类型</strong>：通过元数据获取构造函数参数类型，并递归获取这些参数的实例。</li><li><strong>创建实例</strong>：使用获取的参数实例创建目标类实例，并存储到容器中。</li><li><strong>返回实例</strong>：返回目标类的实例。</li></ol><p>通过这种方式，可以实现简单的依赖注入，使得类之间的依赖关系更加清晰和易于管理。</p><p>依赖注入（Dependency Injection, DI）是一个设计模式，通过将对象的创建和对象之间的依赖关系管理从代码中剥离出来，转移到一个独立的依赖注入容器中，以提高代码的可维护性、可测试性和灵活性。装饰器在依赖注入模式中起到了标记和配置依赖关系的作用。以下是依赖注入及其配套装饰器解决的问题和优势：</p><h3 id="_1-解耦" tabindex="-1">1. <strong>解耦</strong> <a class="header-anchor" href="#_1-解耦" aria-label="Permalink to &quot;1. **解耦**&quot;">​</a></h3><p>依赖注入将类的实例化和依赖管理移到外部容器，使得类不再直接依赖具体的实现，而是通过容器注入。这样做使得代码更加解耦，降低了模块之间的耦合度。</p><p><strong>示例</strong>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getUser</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> &#39;User data&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> UserController</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">private</span><span style="color:#383A42;"> userService</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  getUserData</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">userService</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getUser</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 依赖注入方式</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> userService</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> UserService</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> userController</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> UserController</span><span style="color:#383A42;">(userService);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_2-提高可测试性" tabindex="-1">2. <strong>提高可测试性</strong> <a class="header-anchor" href="#_2-提高可测试性" aria-label="Permalink to &quot;2. **提高可测试性**&quot;">​</a></h3><p>通过依赖注入，可以方便地替换依赖项，从而进行单元测试。可以在测试中注入模拟对象或假对象，而不需要修改实际代码。</p><p><strong>示例</strong>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MockUserService</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getUser</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> &#39;Mock user data&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> mockUserService</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> MockUserService</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> userController</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> UserController</span><span style="color:#383A42;">(mockUserService);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(userController.</span><span style="color:#4078F2;">getUserData</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出 &#39;Mock user data&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-促进单一职责原则" tabindex="-1">3. <strong>促进单一职责原则</strong> <a class="header-anchor" href="#_3-促进单一职责原则" aria-label="Permalink to &quot;3. **促进单一职责原则**&quot;">​</a></h3><p>依赖注入容器负责创建和管理对象的生命周期，类只需关注自身的职责，不需要负责依赖项的创建和管理。这符合单一职责原则，增强了代码的可维护性。</p><h3 id="_4-方便扩展和维护" tabindex="-1">4. <strong>方便扩展和维护</strong> <a class="header-anchor" href="#_4-方便扩展和维护" aria-label="Permalink to &quot;4. **方便扩展和维护**&quot;">​</a></h3><p>通过依赖注入，可以轻松地更换依赖项的实现而不影响使用这些依赖项的代码。例如，可以将 <code>UserService</code> 换成 <code>AdvancedUserService</code> 而不需要修改 <code>UserController</code>。</p><p><strong>示例</strong>：</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> AdvancedUserService</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getUser</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> &#39;Advanced user data&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用新的实现</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> advancedUserService</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> AdvancedUserService</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> userController</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> UserController</span><span style="color:#383A42;">(advancedUserService);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(userController.</span><span style="color:#4078F2;">getUserData</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出 &#39;Advanced user data&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_5-集中管理配置" tabindex="-1">5. <strong>集中管理配置</strong> <a class="header-anchor" href="#_5-集中管理配置" aria-label="Permalink to &quot;5. **集中管理配置**&quot;">​</a></h3><p>通过依赖注入容器，可以在一个地方集中管理所有依赖项的配置，便于统一管理和调整。</p><h3 id="装饰器的作用" tabindex="-1">装饰器的作用 <a class="header-anchor" href="#装饰器的作用" aria-label="Permalink to &quot;装饰器的作用&quot;">​</a></h3><p>装饰器在依赖注入模式中起到标记和配置的作用。以下是装饰器在依赖注入中的具体作用：</p><ol><li><strong>标记类为可注入</strong>：通过 <code>@injectable</code> 装饰器标记某个类为可注入，这样依赖注入容器就能识别并管理它。</li></ol><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> injectable</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;injectable&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">true</span><span style="color:#383A42;">, target);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@injectable</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 服务逻辑</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li><strong>标记需要注入的依赖项</strong>：通过 <code>@inject</code> 装饰器标记构造函数参数为需要注入的依赖项，容器在实例化时会自动注入相应的依赖。</li></ol><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> inject</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, parameterIndex</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> existingParameters</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, target, propertyKey) </span><span style="color:#0184BC;">||</span><span style="color:#383A42;"> [];</span></span>
<span class="line"><span style="color:#383A42;">  existingParameters[parameterIndex] </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, existingParameters, target, propertyKey);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> UserController</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(@inject </span><span style="color:#A626A4;">private</span><span style="color:#383A42;"> userService</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;">) {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="综合示例" tabindex="-1">综合示例 <a class="header-anchor" href="#综合示例" aria-label="Permalink to &quot;综合示例&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">import</span><span style="color:#50A14F;"> &#39;reflect-metadata&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 装饰器定义</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> injectable</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;injectable&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">true</span><span style="color:#383A42;">, target);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> inject</span><span style="color:#383A42;">(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, propertyKey</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">, parameterIndex</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  const</span><span style="color:#986801;"> existingParameters</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getOwnMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, target, propertyKey) </span><span style="color:#0184BC;">||</span><span style="color:#383A42;"> [];</span></span>
<span class="line"><span style="color:#383A42;">  existingParameters[parameterIndex] </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> true</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  Reflect.</span><span style="color:#4078F2;">defineMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, existingParameters, target, propertyKey);</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 依赖注入容器</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Container</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  private</span><span style="color:#A626A4;"> static</span><span style="color:#383A42;"> instances </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Map</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">  static</span><span style="color:#4078F2;"> get</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(target</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">instances</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">has</span><span style="color:#383A42;">(target)) {</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">instances</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(target);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> injectable</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;injectable&#39;</span><span style="color:#383A42;">, target);</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">injectable) {</span></span>
<span class="line"><span style="color:#A626A4;">      throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`Cannot inject </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">target</span><span style="color:#50A14F;">.</span><span style="color:#E45649;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">. It is not marked as injectable.\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> paramTypes</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Reflect.</span><span style="color:#4078F2;">getMetadata</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;design:paramtypes&#39;</span><span style="color:#383A42;">, target) </span><span style="color:#0184BC;">||</span><span style="color:#383A42;"> [];</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> params</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> paramTypes.</span><span style="color:#4078F2;">map</span><span style="color:#383A42;">((param</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(param));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> instance</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> target</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">params);</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">instances</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(target, instance);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> instance;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 使用装饰器标记类</span></span>
<span class="line"><span style="color:#383A42;">@injectable</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">  getUser</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> &#39;User data&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@injectable</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> UserController</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(@inject </span><span style="color:#A626A4;">private</span><span style="color:#383A42;"> userService</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> UserService</span><span style="color:#383A42;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4078F2;">  getUserData</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">userService</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getUser</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 从容器中获取实例</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> userController</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> Container.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(UserController);</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(userController.</span><span style="color:#4078F2;">getUserData</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出 &#39;User data&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>通过依赖注入和装饰器，代码变得更加模块化、易于测试和维护，同时增强了扩展性和配置的集中管理能力。这就是依赖注入及其装饰器的主要优势和解决的问题。</p>`,47),o=[p];function r(c,t,i,y,A,b){return a(),n("div",null,o)}const m=s(e,[["render",r]]);export{u as __pageData,m as default};
