import{_ as s,o as n,c as a,V as l}from"./chunks/framework.96db2af4.js";const F=JSON.parse('{"title":"","description":"组合/聚合复用原则（Composite/Aggregate Reuse Principle）是面向对象设计原则的一种，也叫合成复用原则","frontmatter":{"description":"组合/聚合复用原则（Composite/Aggregate Reuse Principle）是面向对象设计原则的一种，也叫合成复用原则"},"headers":[],"relativePath":"G.设计模式/2.设计原则/8.组合 聚合复用原则.md","filePath":"G.设计模式/2.设计原则/8.组合 聚合复用原则.md","lastUpdated":1690115031000}'),p={name:"G.设计模式/2.设计原则/8.组合 聚合复用原则.md"},o=l(`<p>组合/聚合复用原则（Composite/Aggregate Reuse Principle）是面向对象设计原则的一种，也叫合成复用原则。组合/聚合复用原则是指尽量使用组合/聚合，不要使用类继承。在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分，新对象通过向这些对象的委派达到复用已有功能的目的。就是说要尽量的使用合成和聚合，而不是继承关系达到复用的目的。</p><p><strong>多用组合少用继承</strong>,我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。</p><p><strong>尽量采用组合(contains-a)、聚合(has-a)的方式而不是继承(is-a)的关系来达到软件的复用目的</strong></p><p>在给出的代码例子中，Manager和Employee都继承自Person类，这样做的问题在于，如果我们要给Person添加新的角色，那么使用继承的方式就会导致每个Person只能有一个角色，这显然是不合理的。因为在现实生活中，一个人可能同时具有多种角色。</p><p>如果按照组合/聚合复用原则，我们应该创建一个新的Role类，然后在Person类中使用Role类的实例，这样就可以让一个Person具有多个角色，更符合现实生活中的情况。这就是“Has-A”的关系，即Person具有Role，而不是Person是Role（“Is-A”的关系）。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-dark-pro"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> talk</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; say hello&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> walk</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot; move&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Manager</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span><span style="color:#E06C75;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Employee</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">extends</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Person</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,6),e=[o];function r(t,c,B,y,i,C){return n(),a("div",null,e)}const E=s(p,[["render",r]]);export{F as __pageData,E as default};
