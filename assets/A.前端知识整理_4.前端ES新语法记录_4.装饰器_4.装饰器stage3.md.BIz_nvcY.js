import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const u=JSON.parse('{"title":"","description":"装饰器提案3","frontmatter":{"description":"装饰器提案3"},"headers":[],"relativePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/4.装饰器stage3.md","filePath":"A.前端知识整理/4.前端ES新语法记录/4.装饰器/4.装饰器stage3.md","lastUpdated":1719061829000}'),p={name:"A.前端知识整理/4.前端ES新语法记录/4.装饰器/4.装饰器stage3.md"},e=l(`<p>装饰器的发展历程</p><ul><li>2014-04-10: Yehuda Katz 向 TC39 提出装饰器提案，进入 Stage 0。</li><li>2015-03-05: Angular 团队和 TypeScript 团队宣布 Angular 将从 AtScript 切换到 TypeScript，并采用装饰器。</li><li>2015-03-24: 装饰器提案达到 Stage 1。</li><li>2016-07-28: 提案达到 Stage 2。</li><li>2022-03-28: 装饰器提案达到 Stage 3。</li></ul><p>装饰器有两种主要的提案：第二提案（Stage 2）和第三提案（Stage 3）。二者虽然都旨在增强代码的可读性和可维护性，但在语法和功能上存在一些差异，在新版本的ts5 可以直接使用装饰器但是默认 stage3 提案的</p><p><strong>新的装饰器不支持装饰参数</strong><a href="https://juejin.cn/post/7277835425960099874" target="_blank" rel="noreferrer">TypeScript 5+装饰器变更的影响</a></p><p>另一个改动在装饰器函数定义上，之前装饰函数定义入参可以理解 <code>target</code> <code>key</code> <code>descriptor</code>, 并且在第二提案的时候 使用描述符对象（descriptor），需要显式操作描述符，但是在提案 3 使用<strong>上下文对象（context）</strong>，提供更详细和结构化的元数据。</p><p>看一下新版的装饰器函数定义</p><p>好的，我会将这些参数解释为一个表格：</p><table tabindex="0"><thead><tr><th>参数名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>value</code></td><td><code>DecoratedValue</code></td><td>被装饰的值。</td></tr><tr><td><code>context</code></td><td><code>object</code></td><td>上下文对象，包含装饰器的上下文信息。</td></tr><tr><td><code>context.kind</code></td><td><code>string</code></td><td>装饰器应用的类型，例如属性、方法、访问器等。</td></tr><tr><td><code>context.name</code></td><td>\`string</td><td>symbol\`</td></tr><tr><td><code>context.addInitializer</code></td><td><code>function</code></td><td>可选函数，用于添加初始化逻辑。</td></tr><tr><td><code>context.static</code></td><td><code>boolean</code></td><td>可选属性，指示是否是静态成员。</td></tr><tr><td><code>context.private</code></td><td><code>boolean</code></td><td>可选属性，指示是否是私有成员。</td></tr><tr><td><code>context.access</code></td><td><code>object</code></td><td>访问方法对象，包含获取和设置方法。</td></tr><tr><td><code>context.access.get</code></td><td><code>function</code></td><td>可选属性，返回值的获取方法。</td></tr><tr><td><code>context.access.set</code></td><td><code>function</code></td><td>可选属性，设置值的方法。</td></tr><tr><td>返回值</td><td>\`void</td><td>ReplacementValue\`</td></tr></tbody></table><p>解释部分：</p><ul><li><code>value</code>：这是被装饰的原始值，类型因装饰器作用的目标不同而异。</li><li><code>context</code>：这是一个包含上下文信息的对象，用于提供装饰器的环境信息。</li><li><code>context.kind</code>：标识装饰器应用的对象类型，例如class、method、getter、setter、field、accessor。</li><li><code>context.name</code>：被装饰的对象的名称，可以是字符串或符号。</li><li><code>context.addInitializer</code>：一个可选的函数，以前，这些逻辑通常放在构造函数里面，对方法进行初始化，现在改成以函数形式传入addInitializer()方法。注意，addInitializer()没有返回值。可以用于添加初始化逻辑，该函数在装饰器应用后会被调用。</li><li><code>context.static</code>：一个可选布尔值，指示被装饰的对象是否是静态成员。</li><li><code>context.private</code>：一个可选布尔值，指示被装饰的对象是否是私有成员。</li><li><code>context.access</code>：一个对象，包含访问方法，用于获取和设置被装饰对象的值。</li><li><code>context.access.get</code>：一个可选的函数，用于获取被装饰对象的值。</li><li><code>context.access.set</code>：一个可选的函数，用于设置被装饰对象的值。</li><li><code>返回值</code>：装饰器的返回值，可以是 <code>void</code> 或者是一个替换值，如果返回替换值，它将替代原始值。</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> Decorator</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#383A42;">  value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> DecoratedValue</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  context</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    kind</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> symbol</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#4078F2;">    addInitializer</span><span style="color:#0184BC;">?</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">initializer</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    static</span><span style="color:#0184BC;">?:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    private</span><span style="color:#0184BC;">?:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    access</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#4078F2;">      get</span><span style="color:#0184BC;">?</span><span style="color:#383A42;">()</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#4078F2;">      set</span><span style="color:#0184BC;">?</span><span style="color:#383A42;">(value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#0184BC;"> |</span><span style="color:#C18401;"> ReplacementValue</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol><li><strong>ClassDecoratorContext</strong></li></ol><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>kind</code></td><td><code>&quot;class&quot;</code></td><td>被装饰的元素类型，类装饰器上下文中总是 <code>&quot;class&quot;</code></td></tr><tr><td><code>name</code></td><td><code>string | undefined</code></td><td>被装饰的类的名称</td></tr><tr><td><code>addInitializer</code></td><td><code>(initializer: (this: Class) =&gt; void) =&gt; void</code></td><td>添加类定义完成后的回调函数</td></tr><tr><td><code>metadata</code></td><td><code>DecoratorMetadata</code></td><td>装饰器元数据</td></tr></tbody></table><ol start="2"><li><strong>ClassMethodDecoratorContext</strong></li></ol><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>kind</code></td><td><code>&quot;method&quot;</code></td><td>被装饰的元素类型，方法装饰器上下文中总是 <code>&quot;method&quot;</code></td></tr><tr><td><code>name</code></td><td><code>string | symbol</code></td><td>被装饰的类元素的名称</td></tr><tr><td><code>static</code></td><td><code>boolean</code></td><td>表示类元素是静态(<code>true</code>)还是实例(<code>false</code>)</td></tr><tr><td><code>private</code></td><td><code>boolean</code></td><td>表示类元素名字是否是私有的</td></tr><tr><td><code>access</code></td><td><code>Object</code></td><td>可以用于在运行时访问类元素当前值的对象，上下文会有所不同</td></tr><tr><td><code>access.has</code></td><td><code>(object: This) =&gt; boolean</code></td><td>检查对象是否有与装饰的元素相同名称的属性</td></tr><tr><td><code>access.get</code></td><td><code>(object: This) =&gt; Value</code></td><td>从提供的对象获取当前方法的值</td></tr><tr><td><code>addInitializer</code></td><td><code>(initializer: (this: This) =&gt; void) =&gt; void</code></td><td>添加回调函数，在静态初始化器或实例初始化器运行前调用</td></tr><tr><td><code>metadata</code></td><td><code>DecoratorMetadata</code></td><td>装饰器元数据</td></tr></tbody></table><ol start="3"><li><strong>ClassGetterDecoratorContext</strong></li></ol><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>kind</code></td><td><code>&quot;getter&quot;</code></td><td>被装饰的元素类型，getter装饰器上下文中总是 <code>&quot;getter&quot;</code></td></tr><tr><td><code>name</code></td><td><code>string | symbol</code></td><td>被装饰的类元素的名称</td></tr><tr><td><code>static</code></td><td><code>boolean</code></td><td>表示类元素是静态(<code>true</code>)还是实例(<code>false</code>)</td></tr><tr><td><code>private</code></td><td><code>boolean</code></td><td>表示类元素名字是否是私有的</td></tr><tr><td><code>access</code></td><td><code>Object</code></td><td>可以用于在运行时访问类元素当前值的对象，上下文会有所不同</td></tr><tr><td><code>access.has</code></td><td><code>(object: This) =&gt; boolean</code></td><td>检查对象是否有与装饰的元素相同名称的属性</td></tr><tr><td><code>access.get</code></td><td><code>(object: This) =&gt; Value</code></td><td>调用getter方法从提供的对象上获取值</td></tr><tr><td><code>addInitializer</code></td><td><code>(initializer: (this: This) =&gt; void) =&gt; void</code></td><td>添加回调函数，在静态初始化器或实例初始化器运行前调用</td></tr><tr><td><code>metadata</code></td><td><code>DecoratorMetadata</code></td><td>装饰器元数据</td></tr></tbody></table><ol start="4"><li><strong>ClassSetterDecoratorContext</strong></li></ol><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>kind</code></td><td><code>&quot;setter&quot;</code></td><td>被装饰的元素类型，setter装饰器上下文中总是 <code>&quot;setter&quot;</code></td></tr><tr><td><code>name</code></td><td><code>string | symbol</code></td><td>被装饰的类元素的名称</td></tr><tr><td><code>static</code></td><td><code>boolean</code></td><td>表示类元素是静态(<code>true</code>)还是实例(<code>false</code>)</td></tr><tr><td><code>private</code></td><td><code>boolean</code></td><td>表示类元素名字是否是私有的</td></tr><tr><td><code>access</code></td><td><code>Object</code></td><td>可以用于在运行时访问类元素当前值的对象，上下文会有所不同</td></tr><tr><td><code>access.has</code></td><td><code>(object: This) =&gt; boolean</code></td><td>检查对象是否有与装饰的元素相同名称的属性</td></tr><tr><td><code>access.set</code></td><td><code>(object: This, value: Value) =&gt; void</code></td><td>调用setter从提供的对象上设置值</td></tr><tr><td><code>addInitializer</code></td><td><code>(initializer: (this: This) =&gt; void) =&gt; void</code></td><td>添加回调函数，在静态初始化器或实例初始化器运行前调用</td></tr><tr><td><code>metadata</code></td><td><code>DecoratorMetadata</code></td><td>装饰器元数据</td></tr></tbody></table><ol start="5"><li><strong>ClassAccessorDecoratorContext</strong></li></ol><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>kind</code></td><td><code>&quot;accessor&quot;</code></td><td>被装饰的元素类型，accessor装饰器上下文中总是 <code>&quot;accessor&quot;</code></td></tr><tr><td><code>name</code></td><td><code>string | symbol</code></td><td>被装饰的类元素的名称</td></tr><tr><td><code>static</code></td><td><code>boolean</code></td><td>表示类元素是静态(<code>true</code>)还是实例(<code>false</code>)</td></tr><tr><td><code>private</code></td><td><code>boolean</code></td><td>表示类元素名字是否是私有的</td></tr><tr><td><code>access</code></td><td><code>Object</code></td><td>可以用于在运行时访问类元素当前值的对象，上下文会有所不同</td></tr><tr><td><code>access.has</code></td><td><code>(object: This) =&gt; boolean</code></td><td>检查对象是否有与装饰的元素相同名称的属性</td></tr><tr><td><code>access.get</code></td><td><code>(object: This) =&gt; Value</code></td><td>调用getter方法从提供的对象上获取值</td></tr><tr><td><code>access.set</code></td><td><code>(object: This, value: Value) =&gt; void</code></td><td>调用setter从提供的对象上设置值</td></tr><tr><td><code>addInitializer</code></td><td><code>(initializer: (this: This) =&gt; void) =&gt; void</code></td><td>添加回调函数，在静态初始化器或实例初始化器运行前调用</td></tr><tr><td><code>metadata</code></td><td><code>DecoratorMetadata</code></td><td>装饰器元数据</td></tr></tbody></table><ol start="6"><li><strong>ClassFieldDecoratorContext</strong></li></ol><table tabindex="0"><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><code>kind</code></td><td><code>&quot;field&quot;</code></td><td>被装饰的元素类型，字段装饰器上下文中总是 <code>&quot;field&quot;</code></td></tr><tr><td><code>name</code></td><td><code>string | symbol</code></td><td>被装饰的类元素的名称</td></tr><tr><td><code>static</code></td><td><code>boolean</code></td><td>表示类元素是静态(<code>true</code>)还是实例(<code>false</code>)</td></tr><tr><td><code>private</code></td><td><code>boolean</code></td><td>表示类元素名字是否是私有的</td></tr><tr><td><code>access</code></td><td><code>Object</code></td><td>可以用于在运行时访问类元素当前值的对象，上下文会有所不同</td></tr><tr><td><code>access.has</code></td><td><code>(object: This) =&gt; boolean</code></td><td>检查对象是否有与装饰的元素相同名称的属性</td></tr><tr><td><code>access.get</code></td><td><code>(object: This) =&gt; Value</code></td><td>从提供的对象获取字段的值</td></tr><tr><td><code>access.set</code></td><td><code>(object: This, value: Value) =&gt; void</code></td><td>设置提供的对象的字段</td></tr><tr><td><code>addInitializer</code></td><td><code>(initializer: (this: This) =&gt; void) =&gt; void</code></td><td>添加回调函数，在静态初始化器或实例初始化器运行前调用</td></tr><tr><td><code>metadata</code></td><td><code>DecoratorMetadata</code></td><td>装饰器元数据</td></tr></tbody></table><h3 id="类装饰器" tabindex="-1">类装饰器 <a class="header-anchor" href="#类装饰器" aria-label="Permalink to &quot;类装饰器&quot;">​</a></h3><p>类装饰器参数描述</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> ClassDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#4078F2;">  value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  context</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    kind</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;class&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> undefined</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#4078F2;">    addInitializer</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">initializer</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> Function</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>下面是一个简单的类装饰器案例，执行后打印就可以发现 value 其实就是 class 本身 这一点和提案二是一样的</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行需要 tsc 执行 ts-node v10.9.2 会报错</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> o</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">A</span><span style="color:#383A42;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDeclaration</span><span style="color:#383A42;">(v</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> &lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 如果是多个不同种类装饰器用这个判断可以进行分类</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (context.</span><span style="color:#E45649;">kind</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;class&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // 还是指向构造函数</span></span>
<span class="line"><span style="color:#383A42;">      o </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`class decorator</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">v</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDeclaration</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;类装饰器&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">A</span><span style="color:#0184BC;"> ===</span><span style="color:#383A42;"> o); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="案例-在原型链上添加" tabindex="-1">案例 -- 在原型链上添加 <a class="header-anchor" href="#案例-在原型链上添加" aria-label="Permalink to &quot;案例 -- 在原型链上添加&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行需要 tsc 执行 ts-node v10.9.2 会报错</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDeclaration</span><span style="color:#383A42;">(v</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> &lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 如果是多个不同种类装饰器用这个判断可以进行分类</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (context.</span><span style="color:#E45649;">kind</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;class&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#C18401;">      value</span><span style="color:#383A42;">.</span><span style="color:#E45649;">prototype</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">getName</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`class decorator</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">v</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">      };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDeclaration</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;类装饰器&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">(a as </span><span style="color:#0184BC;">any</span><span style="color:#383A42;">).</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">(); </span><span style="color:#A0A1A7;font-style:italic;">// class decorator类装饰器</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h4 id="案例-继承修改修饰类" tabindex="-1">案例 -- 继承修改修饰类 <a class="header-anchor" href="#案例-继承修改修饰类" aria-label="Permalink to &quot;案例 -- 继承修改修饰类&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行需要 tsc 执行 ts-node v10.9.2 会报错</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDeclaration</span><span style="color:#383A42;">(v</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> &lt;</span><span style="color:#C18401;">T</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">A</span><span style="color:#383A42;">&gt;&gt;(</span></span>
<span class="line"><span style="color:#383A42;">    value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">    context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassDecoratorContext</span></span>
<span class="line"><span style="color:#383A42;">  ) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 如果是多个不同种类装饰器用这个判断可以进行分类</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (context.</span><span style="color:#E45649;">kind</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;class&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#A626A4;"> class</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> value</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">        age </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 18</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">      };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDeclaration</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;类装饰器&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">constructor</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// [Function: class_1] 指向的是子类 此时A 变成了父类</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((a as </span><span style="color:#0184BC;">any</span><span style="color:#383A42;">).</span><span style="color:#E45649;">age</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 19</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="覆盖当前类" tabindex="-1">覆盖当前类 <a class="header-anchor" href="#覆盖当前类" aria-label="Permalink to &quot;覆盖当前类&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行需要 tsc 执行 ts-node v10.9.2 会报错</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDeclaration</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(v</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    // 如果是多个不同种类装饰器用这个判断可以进行分类</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (context.</span><span style="color:#E45649;">kind</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;class&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">			// 这里不能出现 A 中没有的属性否则会 报错</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#A626A4;"> class</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">        name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;18&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">        age </span><span style="color:#0184BC;">=</span><span style="color:#986801;"> 20</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">      };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDeclaration</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;类装饰器&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;w&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> A</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a </span><span style="color:#A626A4;">instanceof</span><span style="color:#C18401;"> A</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// true da</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">((a as </span><span style="color:#0184BC;">any</span><span style="color:#383A42;">).</span><span style="color:#E45649;">age</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 19</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h4 id="不准通过new-创建" tabindex="-1">不准通过new 创建 <a class="header-anchor" href="#不准通过new-创建" aria-label="Permalink to &quot;不准通过new 创建&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> functionCallable</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  value</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;">, {kind}</span><span style="color:#0184BC;">:any</span></span>
<span class="line"><span style="color:#383A42;">)</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  if</span><span style="color:#383A42;"> (kind </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;class&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">      if</span><span style="color:#383A42;"> (</span><span style="color:#A626A4;">new</span><span style="color:#383A42;">.</span><span style="color:#E45649;">target</span><span style="color:#0184BC;"> !==</span><span style="color:#986801;"> undefined</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">        throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> TypeError</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;This function can’t be new-invoked&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">      }</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> value</span><span style="color:#383A42;">(</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@functionCallable</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  name</span><span style="color:#0184BC;">:string</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(name</span><span style="color:#0184BC;">:string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// @ts-ignore</span></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> robin</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Robin&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">robin.</span><span style="color:#E45649;">name</span><span style="color:#A0A1A7;font-style:italic;"> // &#39;Robin&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="使用-addinitializer" tabindex="-1">使用 addInitializer <a class="header-anchor" href="#使用-addinitializer" aria-label="Permalink to &quot;使用 addInitializer&quot;">​</a></h4><p>context的addInitializer()方法，用来定义一个类的初始化函数，在类完全定义结束后执行。类定义完成后，会自动执行类装饰器</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// 执行需要 tsc 执行 ts-node v10.9.2 会报错</span></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt; </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> T</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 创建一个收集注册定义 class Map</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> mapCls</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Map</span><span style="color:#383A42;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> classDeclaration</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;(v</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> constructor</span><span style="color:#383A42;">&lt;</span><span style="color:#C18401;">T</span><span style="color:#383A42;">&gt;, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    context.</span><span style="color:#4078F2;">addInitializer</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">      if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#383A42;">mapCls.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(value)) mapCls.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(v, value);</span></span>
<span class="line"><span style="color:#383A42;">    });</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDeclaration</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;A&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> A</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;w&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">classDeclaration</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;B&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> B</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &quot;ww&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 策略模式分发</span></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> creatClsByKey</span><span style="color:#383A42;">(k</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (mapCls.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(k))();</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> creatClsByKey</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;A&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(mapCls); </span><span style="color:#A0A1A7;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// w</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><ul><li>html 组件class 案例</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> customElement</span><span style="color:#383A42;">(name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> &lt;</span><span style="color:#C18401;">Input</span><span style="color:#A626A4;"> extends</span><span style="color:#A626A4;"> new</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> any) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> any&gt;(</span></span>
<span class="line"><span style="color:#383A42;">    value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Input</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">    context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassDecoratorContext</span></span>
<span class="line"><span style="color:#383A42;">  ) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    context.</span><span style="color:#4078F2;">addInitializer</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#383A42;">      customElements.</span><span style="color:#4078F2;">define</span><span style="color:#383A42;">(name, value);</span></span>
<span class="line"><span style="color:#383A42;">    });</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">@</span><span style="color:#4078F2;">customElement</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;hello-world&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> MyComponent</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> HTMLElement</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    super</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#4078F2;">  connectedCallback</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">innerHTML</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> \`&lt;h1&gt;Hello World&lt;/h1&gt;\`</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="方法装饰器" tabindex="-1">方法装饰器 <a class="header-anchor" href="#方法装饰器" aria-label="Permalink to &quot;方法装饰器&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> ClassMethodDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#4078F2;">  value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  context</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    kind</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;method&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> symbol</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    static</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    private</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    access</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#4078F2;">get</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#4078F2;">    addInitializer</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">initializer</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> Function</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>static：布尔值，表示是否为静态方法。该属性为只读属性。</li><li>private：布尔值，表示是否为私有方法。该属性为只读属性。</li><li>access：对象，包含了方法的存取器，但是只有get()方法用来取值，没有set()方法进行赋值。</li></ul><h4 id="替代所装饰原始函数" tabindex="-1">替代所装饰原始函数 <a class="header-anchor" href="#替代所装饰原始函数" aria-label="Permalink to &quot;替代所装饰原始函数&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> replaceMethod</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassMethodDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> \`How are you, </span><span style="color:#CA1243;">\${</span><span style="color:#E45649;">this</span><span style="color:#50A14F;">.</span><span style="color:#E45649;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">?\`</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassMethodDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(context.</span><span style="color:#E45649;">static</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 是否是静态方法</span></span>
<span class="line"><span style="color:#383A42;">  console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(context.</span><span style="color:#E45649;">private</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// 方法是否为私有</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">  function</span><span style="color:#4078F2;"> replacementMethod</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;开始执行&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> value.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, </span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> result;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  // 替换原来的函数</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;"> replacementMethod;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Person</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#A626A4;">  constructor</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">public</span><span style="color:#383A42;"> name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @replaceMethod</span></span>
<span class="line"><span style="color:#4078F2;">  hello</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> \`Hi </span><span style="color:#CA1243;">\${</span><span style="color:#E45649;">this</span><span style="color:#50A14F;">.</span><span style="color:#E45649;">name</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">!\`</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @log</span></span>
<span class="line"><span style="color:#4078F2;">  getName</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> robin</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Person</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Robin&quot;</span><span style="color:#383A42;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(robin.</span><span style="color:#4078F2;">hello</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: &quot;How are you, Robin?&quot;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(robin.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">()); </span><span style="color:#A0A1A7;font-style:italic;">// 输出: 开始执行 Robin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h4 id="防抖装饰器" tabindex="-1">防抖装饰器 <a class="header-anchor" href="#防抖装饰器" aria-label="Permalink to &quot;防抖装饰器&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> delay</span><span style="color:#383A42;">(milliseconds</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> number</span><span style="color:#0184BC;"> =</span><span style="color:#986801;"> 0</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (value, context) {</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (context.</span><span style="color:#E45649;">kind</span><span style="color:#0184BC;"> ===</span><span style="color:#50A14F;"> &quot;method&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">args</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> any</span><span style="color:#383A42;">[]) {</span></span>
<span class="line"><span style="color:#4078F2;">        setTimeout</span><span style="color:#383A42;">(() </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">          value.</span><span style="color:#4078F2;">apply</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">, args);</span></span>
<span class="line"><span style="color:#383A42;">        }, milliseconds);</span></span>
<span class="line"><span style="color:#383A42;">      };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Logger</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">delay</span><span style="color:#383A42;">(</span><span style="color:#986801;">1000</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#4078F2;">  log</span><span style="color:#383A42;">(msg</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">\`</span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">msg</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> logger </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Logger</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">logger.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;Hello World&quot;</span><span style="color:#383A42;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h4 id="收集" tabindex="-1">收集 <a class="header-anchor" href="#收集" aria-label="Permalink to &quot;收集&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> collect</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  value,</span></span>
<span class="line"><span style="color:#383A42;">  {name, addInitializer}</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#4078F2;">  addInitializer</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;"> () {</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">!</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">collectedMethodKeys</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#E45649;">      this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">collectedMethodKeys</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Set</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#E45649;">    this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">collectedMethodKeys</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">add</span><span style="color:#383A42;">(name);</span></span>
<span class="line"><span style="color:#383A42;">  });</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> C</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @collect</span></span>
<span class="line"><span style="color:#4078F2;">  toString</span><span style="color:#383A42;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">  @collect</span></span>
<span class="line"><span style="color:#383A42;">  [Symbol.</span><span style="color:#C18401;">iterator</span><span style="color:#383A42;">]() {}</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> inst</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> C</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">inst.</span><span style="color:#E45649;">collectedMethodKeys</span><span style="color:#A0A1A7;font-style:italic;"> // new Set([&#39;toString&#39;, Symbol.iterator])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="属性装饰器" tabindex="-1">属性装饰器 <a class="header-anchor" href="#属性装饰器" aria-label="Permalink to &quot;属性装饰器&quot;">​</a></h3><p>属性装饰器用来装饰定义在类顶部的属性（field）</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> ClassFieldDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#383A42;">  value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> undefined</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  context</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    kind</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;field&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> symbol</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    static</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    private</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    access</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#4078F2;">get</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;">, </span><span style="color:#4078F2;">set</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> (value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#4078F2;">    addInitializer</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">initializer</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> (initialValue</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> unknown</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>装饰器的第一个参数<strong>value的类型是undefined</strong>，这意味着这个参数实际上没用的，装饰器不能从value获取所装饰属性的值。另外，第二个参数 <code>context</code> 对象的kind属性的值为字符串 <code>field</code></p><p>属性装饰器要么不返回值，要么返回一个函数，该函数会自动执行，用来对所装饰属性进行初始化。该函数的参数是所装饰属性的初始值，该函数的返回值是该属性的最终值。</p><h4 id="初始化参数值" tabindex="-1">初始化参数值 <a class="header-anchor" href="#初始化参数值" aria-label="Permalink to &quot;初始化参数值&quot;">​</a></h4><p>返回一个函数，该函数会自动执行，用来对所装饰属性进行初始化</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A0A1A7;font-style:italic;">// function twice() {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   return initialValue =&gt; initialValue * 2;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// class C {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   @twice</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">//   field = 3;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// const inst = new C();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// inst.field // 6</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> initParams</span><span style="color:#383A42;">(v) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (value, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassFieldDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">kind</span><span style="color:#383A42;">, </span><span style="color:#986801;">name</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> context;</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (kind </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &quot;field&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // console.log(context.access.get());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (initialValue) {</span></span>
<span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#50A14F;">          \`initializing </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">name</span><span style="color:#383A42;"> as</span><span style="color:#0184BC;"> string</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;"> with value </span><span style="color:#CA1243;">\${</span><span style="color:#383A42;">initialValue</span><span style="color:#CA1243;">}</span><span style="color:#50A14F;">\`</span></span>
<span class="line"><span style="color:#383A42;">        );</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> v;</span></span>
<span class="line"><span style="color:#383A42;">      };</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Color</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">initParams</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;green&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> color</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Color</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// &quot;initializing name with value green&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(color.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// &quot;green&quot;</span></span>
<span class="line"><span style="color:#383A42;">color.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;red&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(color.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// red</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><h4 id="用来触发指定对象-get-set" tabindex="-1">用来触发指定对象 get set <a class="header-anchor" href="#用来触发指定对象-get-set" aria-label="Permalink to &quot;用来触发指定对象 get set&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> a</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> { </span><span style="color:#E45649;">name</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &quot;w&quot;</span><span style="color:#383A42;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> initParams</span><span style="color:#383A42;">(v) {</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (value, context</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> ClassFieldDecoratorContext</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    const</span><span style="color:#383A42;"> { </span><span style="color:#986801;">kind</span><span style="color:#383A42;">, </span><span style="color:#986801;">name</span><span style="color:#383A42;"> } </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> context;</span></span>
<span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (kind </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &quot;field&quot;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // console.log(context.access.get());</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      // 利用 context.access get set 方法设置触发传入的对象的属性值</span></span>
<span class="line"><span style="color:#383A42;">      context.</span><span style="color:#E45649;">access</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(a, v);</span></span>
<span class="line"><span style="color:#383A42;">      console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(context.</span><span style="color:#E45649;">access</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(a), </span><span style="color:#986801;">2</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// green 2</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">  };</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Color</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#4078F2;">initParams</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&quot;green&quot;</span><span style="color:#383A42;">)</span></span>
<span class="line"><span style="color:#383A42;">  name;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> color</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Color</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// &quot;initializing name with value green&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(color.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// &quot;undefined&quot;</span></span>
<span class="line"><span style="color:#383A42;">color.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &quot;red&quot;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(color.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// red</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(a.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// green</span></span>
<span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(color.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">); </span><span style="color:#A0A1A7;font-style:italic;">// red</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><ul><li>提取存储器</li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> acc;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> exposeAccess</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  value, {access}</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#383A42;">  acc </span><span style="color:#0184BC;">=</span><span style="color:#383A42;"> access;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Color</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @exposeAccess</span></span>
<span class="line"><span style="color:#383A42;">  name </span><span style="color:#0184BC;">=</span><span style="color:#50A14F;"> &#39;green&#39;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> green</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Color</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">green.</span><span style="color:#E45649;">name</span><span style="color:#A0A1A7;font-style:italic;"> // &#39;green&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">acc.</span><span style="color:#4078F2;">get</span><span style="color:#383A42;">(green) </span><span style="color:#A0A1A7;font-style:italic;">// &#39;green&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#383A42;">acc.</span><span style="color:#4078F2;">set</span><span style="color:#383A42;">(green, </span><span style="color:#50A14F;">&#39;red&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">green.</span><span style="color:#E45649;">name</span><span style="color:#A0A1A7;font-style:italic;"> // &#39;red&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="getter-装饰器-setter-装饰器" tabindex="-1">getter 装饰器，setter 装饰器 <a class="header-anchor" href="#getter-装饰器-setter-装饰器" aria-label="Permalink to &quot;getter 装饰器，setter 装饰器&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> ClassGetterDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#4078F2;">  value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  context</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    kind</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;getter&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> symbol</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    static</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    private</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    access</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#4078F2;">get</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#4078F2;">    addInitializer</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">initializer</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> Function</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">type</span><span style="color:#C18401;"> ClassSetterDecorator</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> (</span></span>
<span class="line"><span style="color:#4078F2;">  value</span><span style="color:#0184BC;">:</span><span style="color:#C18401;"> Function</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  context</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">    kind</span><span style="color:#0184BC;">:</span><span style="color:#50A14F;"> &#39;setter&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    name</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> string</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> symbol</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    static</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    private</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> boolean</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    access</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> { </span><span style="color:#4078F2;">set</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> (value</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> unknown</span><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;"> };</span></span>
<span class="line"><span style="color:#4078F2;">    addInitializer</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">initializer</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> () </span><span style="color:#A626A4;">=&gt;</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">)</span><span style="color:#0184BC;">:</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#C18401;"> Function</span><span style="color:#0184BC;"> |</span><span style="color:#0184BC;"> void</span><span style="color:#383A42;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这两个装饰器要么不返回值，要么返回一个函数，取代原来的取值器或存值器。</p><h4 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h4><p>下面的例子是将取值器的结果，保存为一个属性，加快后面的读取，第一次读取inst.value，会进行计算，然后装饰器@lazy将结果存入只读属性value，后面再读取这个属性，就不会进行计算了。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> C</span><span style="color:#383A42;"> {</span></span>
<span class="line"><span style="color:#383A42;">  @lazy</span></span>
<span class="line"><span style="color:#0184BC;">  get</span><span style="color:#4078F2;"> value</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">    console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;正在计算……&#39;</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#50A14F;"> &#39;开销大的计算结果&#39;</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> lazy</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#383A42;">  value</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">  {kind, name}</span><span style="color:#0184BC;">:any</span></span>
<span class="line"><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">  if</span><span style="color:#383A42;"> (kind </span><span style="color:#0184BC;">===</span><span style="color:#50A14F;"> &#39;getter&#39;</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">    return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;"> (</span><span style="color:#E45649;">this</span><span style="color:#0184BC;">:any</span><span style="color:#383A42;">) {</span></span>
<span class="line"><span style="color:#A626A4;">      const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> value.</span><span style="color:#4078F2;">call</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">      Object.</span><span style="color:#4078F2;">defineProperty</span><span style="color:#383A42;">(</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">, name,</span></span>
<span class="line"><span style="color:#383A42;">        {</span></span>
<span class="line"><span style="color:#E45649;">          value</span><span style="color:#0184BC;">:</span><span style="color:#383A42;"> result,</span></span>
<span class="line"><span style="color:#E45649;">          writable</span><span style="color:#0184BC;">:</span><span style="color:#986801;"> false</span><span style="color:#383A42;">,</span></span>
<span class="line"><span style="color:#383A42;">        }</span></span>
<span class="line"><span style="color:#383A42;">      );</span></span>
<span class="line"><span style="color:#A626A4;">      return</span><span style="color:#383A42;"> result;</span></span>
<span class="line"><span style="color:#383A42;">    };</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#A626A4;">  return</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> inst</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> C</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">inst.</span><span style="color:#E45649;">value</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// 正在计算……</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// &#39;开销大的计算结果&#39;</span></span>
<span class="line"><span style="color:#383A42;">inst.</span><span style="color:#E45649;">value</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">// &#39;开销大的计算结果&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://juejin.cn/post/7277835425960099874" target="_blank" rel="noreferrer">TypeScript 5+装饰器变更的影响</a><a href="https://wangdoc.com/typescript/decorator-legacy" target="_blank" rel="noreferrer">网道 / WangDoc.com</a><a href="https://2ality.com/2022/10/javascript-decorators.html#the-history-of-decorators" target="_blank" rel="noreferrer">2ality – JavaScript and more</a></p>`,70),o=[e];function t(c,r,i,y,A,d){return a(),n("div",null,o)}const m=s(p,[["render",t]]);export{u as __pageData,m as default};
