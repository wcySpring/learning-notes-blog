import{_ as t,o as d,c as e,O as o}from"./chunks/framework.ab95ac3d.js";const p=JSON.parse('{"title":"","description":"ES3和ES5+编译和执行阶段中  VO / AO / GO / ECS / GEC / FEC / VE 名词解释 - js 代码执行过程","frontmatter":{"description":"ES3和ES5+编译和执行阶段中  VO / AO / GO / ECS / GEC / FEC / VE 名词解释 - js 代码执行过程"},"headers":[],"relativePath":"A.前端知识整理/3.浏览器和JS引擎执行过程/4.ES3和ES5+执行过程阶段.md","filePath":"A.前端知识整理/3.浏览器和JS引擎执行过程/4.ES3和ES5+执行过程阶段.md","lastUpdated":1687659923000}'),r={name:"A.前端知识整理/3.浏览器和JS引擎执行过程/4.ES3和ES5+执行过程阶段.md"},n=o('<p>先提前了解名词定义</p><table><thead><tr><th>名词</th><th>解释</th></tr></thead><tbody><tr><td>ECS</td><td>执行上下文栈（Execution Context Stack）：JavaScript引擎在执行代码时，会将创建的执行上下文（Execution Context）按照顺序存储在一个栈结构中，这个栈结构被称为执行上下文栈。当函数被调用时，会创建一个新的执行上下文并将其压入栈顶；当函数执行完毕后，会将栈顶的执行上下文弹出，返回到下一个执行上下文。</td></tr><tr><td>GEC</td><td>全局执行上下文（Global Execution Context）：在JavaScript代码开始执行时，会首先创建一个全局执行上下文。全局执行上下文负责管理全局变量、函数声明以及全局对象（如window对象）。全局执行上下文只有一个，它是执行上下文栈的底部。</td></tr><tr><td>FEC</td><td>函数执行上下文（Functional Execution Context）：当一个函数被调用时，会创建一个新的函数执行上下文。函数执行上下文负责管理函数内的变量、函数声明以及this指针。每次调用函数时，都会创建一个新的函数执行上下文。</td></tr><tr><td>VO</td><td>Variable Object：在早期的ECMA规范中，变量对象（Variable Object）是用来存储执行上下文中的变量、函数声明和函数参数的对象。在最新的ECMA规范中，变量对象已经被替换为环境记录（Environment Record）。</td></tr><tr><td>VE</td><td>Variable Environment：在最新的ECMA规范中，变量环境（Variable Environment）是用来存储执行上下文中的变量、函数声明和函数参数的环境记录。环境记录有两种类型：词法环境记录（Lexical Environment Record）和全局环境记录（Global Environment Record）。</td></tr><tr><td>GO</td><td>全局对象（Global Object）：在JavaScript代码开始执行时，会创建一个全局对象。全局对象用于存储全局变量、函数声明以及其他全局性质的属性。在浏览器环境中，全局对象通常是window对象；在Node.js环境中，全局对象是global对象。全局执行上下文中关联的变量对象就是全局对象。</td></tr><tr><td>AO</td><td>函数对象（Activation Object）：当一个函数被调用时，会创建一个函数对象（Activation Object）。函数对象用于存储函数内的变量、函数声明和函数参数。函数执行上下文中关联的变量对象就是函数对象。在最新的ECMA规范中，函数对象已经被替换为词法环境记录。</td></tr></tbody></table><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><p>随着 es 升级，规范也和之前不一样做了升级。主要可以分为 es3 和 es5+ 两个分水岭</p><p>当然可以。以下是旧概念与新概念的对照表：</p><table><thead><tr><th>旧概念</th><th>新概念</th><th>描述</th></tr></thead><tbody><tr><td>变量对象（VO）</td><td>环境记录（Environment Record）</td><td>存储变量、函数声明和类声明等标识符</td></tr><tr><td>活动对象（AO）</td><td>环境记录（Environment Record）</td><td>存储变量、函数声明和类声明等标识符</td></tr><tr><td>全局对象（GO）</td><td>全局对象（Global Object）</td><td>JavaScript 运行时的全局作用域（如浏览器中的 <code>window</code> 对象，Node.js 中的 <code>global</code> 对象）</td></tr><tr><td>执行上下文栈（ECS）</td><td>执行上下文栈（Execution Context Stack）</td><td>存储和管理当前执行的所有执行上下文</td></tr><tr><td>全局执行上下文（GEC）</td><td>执行上下文（Execution Context）</td><td>包括全局执行上下文（在全局作用域中执行的代码）和函数执行上下文（在函数作用域中执行的代码）</td></tr><tr><td>函数执行上下文（FEC）</td><td>执行上下文（Execution Context）</td><td>包括全局执行上下文（在全局作用域中执行的代码）和函数执行上下文（在函数作用域中执行的代码）</td></tr><tr><td>变量环境（VE）</td><td>词法环境（Lexical Environment）</td><td>存储和管理变量、函数声明和类声明等标识符，实现作用域链和变量访问</td></tr></tbody></table><ol><li><p><strong>变量环境（VE）</strong> ：这个概念已经被词法环境（Lexical Environment）替代。词法环境用于存储和管理变量、函数声明和类声明等标识符。它包括环境记录和外部词法环境引用两个部分，用于实现作用域链和变量访问。</p></li><li><p><strong>变量对象（VO）和活动对象（AO）</strong> ：这两个概念已经被环境记录（Environment Record）替代。环境记录用于存储变量、函数声明和类声明等标识符。它包括声明式环境记录（用于存储 var、let、const 声明的变量，以及 function 和 class 声明的函数和类）和对象环境记录（用于存储通过 with 语句和全局对象创建的变量）</p></li></ol>',7),a=[n];function i(c,E,l,s,_,S){return d(),e("div",null,a)}const b=t(r,[["render",i]]);export{p as __pageData,b as default};
