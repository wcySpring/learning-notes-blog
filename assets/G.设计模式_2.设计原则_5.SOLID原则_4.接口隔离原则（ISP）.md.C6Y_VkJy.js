import{_ as s,c as n,o as a,a8 as l}from"./chunks/framework.6k5lawSO.js";const d=JSON.parse('{"title":"","description":"客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。","frontmatter":{"description":"客户端不应该依赖它不需要的接口，一个类对另一个类的依赖应该建立在最小的接口上。"},"headers":[],"relativePath":"G.设计模式/2.设计原则/5.SOLID原则/4.接口隔离原则（ISP）.md","filePath":"G.设计模式/2.设计原则/5.SOLID原则/4.接口隔离原则（ISP）.md","lastUpdated":1690115031000}'),p={name:"G.设计模式/2.设计原则/5.SOLID原则/4.接口隔离原则（ISP）.md"},e=l(`<p>接口隔离原则的英文翻译是“ Interface Segregation Principle”，缩写为 ISP。Robert Martin 在 SOLID 原则中是这样定义它的：“Clients should not be forced to depend upon interfaces that they do not use。”直译成中文的话就是：客户端不应该被强迫依赖它不需要的接口。其中的“客户端”，可以理解为接口的调用者或者使用者。</p><p>一个类对另一个类的依赖应该建立在最小的接口上。这个原则的目的是减少类之间的耦合性，提高系统的内聚性，降低因修改一个类而带来的风险。在实际开发中，我们可以通过将臃肿的接口拆分成更小的和更具体的接口来遵循这个原则。</p><p>举个例子：假设我们正在开发一个图形用户界面（GUI）框架，其中包含一个名为 Widget 的类，它有许多方法，例如 draw()、resize()、move() 等。现在我们需要实现一个按钮（Button）类，它只需要 draw() 和 click() 方法。如果我们直接让 Button 类继承 Widget 类，那么 Button 类就会继承所有 Widget 类的方法，包括那些它不需要的方法。这就违反了接口隔离原则。</p><p>为了遵循接口隔离原则，我们可以将 Widget 类拆分成更小的接口，例如 Drawable 和 Resizable，然后让 Button 类只实现 Drawable 接口。这样，Button 类就只能访问它需要的方法，而不会访问它不需要的方法。</p><p>通过例子来看这很像单一职责，不过稍微还是有点区别。单一职责原则针对的是模块、类、接口的设计。而接口隔离原则相对于单一职责原则，一方面它更侧重于接口的设计，另一方面它的思考的角度不同。它提供了一种判断接口是否职责单一的标准：通过调用者如何使用接口来间接地判定。如果调用者只使用部分接口或接口的部分功能，那接口的设计就不够职责单一。二者总结来看</p><ul><li>单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离</li><li>单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建</li></ul><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><p>项目中用到了三个外部系统：Redis、MySQL、Kafka。每个系统都对应一系列配置信息，比如地址、端口、访问超时时间等。为了在内存中存储这些配置信息，供项目中的其他模块来使用，我们分别设计实现了三个 Configuration 类：RedisConfig、MysqlConfig、KafkaConfig。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> RedisConfig </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#C18401;"> ConfigSource</span><span style="color:#E45649;"> configSource</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">//配置中心（比如zookeeper）</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#C18401;"> String</span><span style="color:#E45649;"> address</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#A626A4;"> int</span><span style="color:#E45649;"> timeout</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#A626A4;"> int</span><span style="color:#E45649;"> maxTotal</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    //省略其他配置: maxWaitMillis,maxIdle,minIdle...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#4078F2;"> RedisConfig</span><span style="color:#383A42;">(</span><span style="color:#C18401;">ConfigSource</span><span style="color:#383A42;"> configSource) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">configSource</span><span style="color:#383A42;"> = configSource;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#C18401;"> String</span><span style="color:#4078F2;"> getAddress</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">address</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">    //...省略其他get()、init()方法...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#A626A4;"> void</span><span style="color:#4078F2;"> update</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">      //从configSource加载配置到address/timeout/maxTotal...</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> KafkaConfig </span><span style="color:#383A42;">{ </span><span style="color:#A0A1A7;font-style:italic;">//...省略... }</span></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> MysqlConfig </span><span style="color:#383A42;">{ </span><span style="color:#A0A1A7;font-style:italic;">//...省略... }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>有一个新的功能需求，希望支持 Redis 和 Kafka 配置信息的热更新。所谓“热更新（hot update）”就是，如果在配置中心中更改了配置信息，我们希望在不用重启系统的情况下，能将最新的配置信息加载到内存中（也就是 RedisConfig、KafkaConfig 类中）。但是，因为某些原因，我们并不希望对 MySQL 的配置信息进行热更新。</p><p>如果此时设计的一个统一父类三者继承，就会导致 MySQL 要去实现用不到的功能</p><p>因此为了实现这样一个功能需求，我们设计实现了一个 ScheduledUpdater 类，以固定时间频率（periodInSeconds）来调用 RedisConfig、KafkaConfig 的 update() 方法更新配置信息。具体的代码实现如下所示：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki one-light vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> interface</span><span style="color:#C18401;"> Updater </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A626A4;">  void</span><span style="color:#4078F2;"> update</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> RedisConfig implemets Updater </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  //...省略其他属性和方法...</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#A626A4;">Override</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#A626A4;"> void</span><span style="color:#4078F2;"> update</span><span style="color:#383A42;">() { </span><span style="color:#A0A1A7;font-style:italic;">//... }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> KafkaConfig </span><span style="color:#A626A4;">implements</span><span style="color:#C18401;"> Updater </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A0A1A7;font-style:italic;">  //...省略其他属性和方法...</span></span>
<span class="line"><span style="color:#383A42;">  @</span><span style="color:#A626A4;">Override</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#A626A4;"> void</span><span style="color:#4078F2;"> update</span><span style="color:#383A42;">() { </span><span style="color:#A0A1A7;font-style:italic;">//... }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> MysqlConfig </span><span style="color:#383A42;">{ </span><span style="color:#A0A1A7;font-style:italic;">//...省略其他属性和方法... }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> ScheduledUpdater </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#A626A4;"> final</span><span style="color:#C18401;"> ScheduledExecutorService</span><span style="color:#E45649;"> executor </span><span style="color:#383A42;">= </span><span style="color:#E45649;">Executors</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">newSingleThreadScheduledExecutor</span><span style="color:#383A42;">();;</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#A626A4;"> long</span><span style="color:#E45649;"> initialDelayInSeconds</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#A626A4;"> long</span><span style="color:#E45649;"> periodInSeconds</span><span style="color:#383A42;">;</span></span>
<span class="line"><span style="color:#A626A4;">    private</span><span style="color:#C18401;"> Updater</span><span style="color:#E45649;"> updater</span><span style="color:#383A42;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#4078F2;"> ScheduleUpdater</span><span style="color:#383A42;">(</span><span style="color:#C18401;">Updater</span><span style="color:#383A42;"> updater, </span><span style="color:#A626A4;">long</span><span style="color:#383A42;"> initialDelayInSeconds, </span><span style="color:#A626A4;">long</span><span style="color:#383A42;"> periodInSeconds) {</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">updater</span><span style="color:#383A42;"> = updater;</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">initialDelayInSeconds</span><span style="color:#383A42;"> = initialDelayInSeconds;</span></span>
<span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">periodInSeconds</span><span style="color:#383A42;"> = periodInSeconds;</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">    public</span><span style="color:#A626A4;"> void</span><span style="color:#4078F2;"> run</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">        executor</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">scheduleAtFixedRate</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Runnable</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#383A42;">            @</span><span style="color:#A626A4;">Override</span></span>
<span class="line"><span style="color:#A626A4;">            public</span><span style="color:#A626A4;"> void</span><span style="color:#4078F2;"> run</span><span style="color:#383A42;">() {</span></span>
<span class="line"><span style="color:#E45649;">                updater</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">update</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">            }</span></span>
<span class="line"><span style="color:#383A42;">        }, </span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">initialDelayInSeconds</span><span style="color:#383A42;">, </span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">periodInSeconds</span><span style="color:#383A42;">, </span><span style="color:#E45649;">TimeUnit</span><span style="color:#383A42;">.</span><span style="color:#E45649;">SECONDS</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#383A42;">    }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">public</span><span style="color:#A626A4;"> class</span><span style="color:#C18401;"> Application </span><span style="color:#383A42;">{</span></span>
<span class="line"><span style="color:#C18401;">  ConfigSource</span><span style="color:#E45649;"> configSource </span><span style="color:#383A42;">= </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> ZookeeperConfigSource</span><span style="color:#383A42;">(</span><span style="color:#A0A1A7;font-style:italic;">/*省略参数*/</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#A626A4;"> static</span><span style="color:#A626A4;"> final</span><span style="color:#C18401;"> RedisConfig</span><span style="color:#E45649;"> redisConfig </span><span style="color:#383A42;">= </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> RedisConfig</span><span style="color:#383A42;">(configSource);</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#A626A4;"> static</span><span style="color:#A626A4;"> final</span><span style="color:#C18401;"> KafkaConfig</span><span style="color:#E45649;"> kafkaConfig </span><span style="color:#383A42;">= </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> KakfaConfig</span><span style="color:#383A42;">(configSource);</span></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#A626A4;"> static</span><span style="color:#A626A4;"> final</span><span style="color:#C18401;"> MySqlConfig</span><span style="color:#E45649;"> mysqlConfig </span><span style="color:#383A42;">= </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> MysqlConfig</span><span style="color:#383A42;">(configSource);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A626A4;">  public</span><span style="color:#A626A4;"> static</span><span style="color:#A626A4;"> void</span><span style="color:#4078F2;"> main</span><span style="color:#383A42;">(</span><span style="color:#C18401;">String</span><span style="color:#383A42;">[] args) {</span></span>
<span class="line"><span style="color:#C18401;">    ScheduledUpdater</span><span style="color:#E45649;"> redisConfigUpdater </span><span style="color:#383A42;">= </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> ScheduledUpdater</span><span style="color:#383A42;">(redisConfig, </span><span style="color:#986801;">300</span><span style="color:#383A42;">, </span><span style="color:#986801;">300</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#E45649;">    redisConfigUpdater</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">run</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">    </span></span>
<span class="line"><span style="color:#C18401;">    ScheduledUpdater</span><span style="color:#E45649;"> kafkaConfigUpdater </span><span style="color:#383A42;">= </span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> ScheduledUpdater</span><span style="color:#383A42;">(kafkaConfig, </span><span style="color:#986801;">60</span><span style="color:#383A42;">, </span><span style="color:#986801;">60</span><span style="color:#383A42;">);</span></span>
<span class="line"><span style="color:#E45649;">    kafkaConfigUpdater</span><span style="color:#383A42;">.</span><span style="color:#4078F2;">run</span><span style="color:#383A42;">();</span></span>
<span class="line"><span style="color:#383A42;">  }</span></span>
<span class="line"><span style="color:#383A42;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>后续有新的功能可以用接口形式做统一划分区别</p><h2 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度</p><p>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系</p><p>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://geek-docs.com/design-pattern/design-principle/interface-segregation-principle.html" target="_blank" rel="noreferrer">接口分离原则ISP</a></p><p><a href="https://time.geekbang.org/column/article/177442" target="_blank" rel="noreferrer">理论四：接口隔离原则有哪三种应用？原则中的“接口”该如何理解？</a></p>`,21),o=[e];function r(c,t,i,y,A,b){return a(),n("div",null,o)}const m=s(p,[["render",r]]);export{d as __pageData,m as default};
